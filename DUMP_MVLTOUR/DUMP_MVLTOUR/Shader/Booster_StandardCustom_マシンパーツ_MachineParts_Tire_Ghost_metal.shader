//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Booster/StandardCustom/マシンパーツ/MachineParts_Tire_Ghost" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_AddColor ("加算色", Color) = (0,0,0,0)
_MinMSA ("Min MSA", Vector) = (0,0,0,0)
_MainTex ("Albedo(UV0)", 2D) = "white" { }
_MSA ("MSA Map(UV0)", 2D) = "black" { }
_BumpMap ("Normalmap(UV0)", 2D) = "bump" { }
_AlphaFactor ("アルファ強度", Range(0, 1)) = 1
[Header(Booster Reflection Cube Map)] [KeywordEnum(NO,YES,FIXEDCOLOR)] _ReflectionProbeType ("個別リフレクションキューブマップ使用", Float) = 0
_HeuristicReflection ("個別リフレクションキューブマップ", Cube) = "_Skybox" { }
_NormalDiff ("疑似LOD反射の揺らぎ", Range(-1, 1)) = 0
_NormalRand ("疑似LOD乱数値", Vector) = (9993.169,5715.817,4488.509,34.2347)
_FixedReflColor ("単色リフレクションカラー", Color) = (1,1,1,1)
[Space(20)] [Enum(NO,0,YES,2)] _StencilOp ("置き影が落ちなくなる", Float) = 2
}
SubShader {
 LOD 2500
 Tags { "DisableBatching" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Name "FORWARD"
  LOD 2500
  Tags { "DisableBatching" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  GpuProgramID 10410
Program "vp" {
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD2.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD2.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD2.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD2.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD2.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD2.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
}
}
 Pass {
  Name "PREPASS"
  LOD 2500
  Tags { "DisableBatching" = "true" "LIGHTMODE" = "PREPASSBASE" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  GpuProgramID 110466
Program "vp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD0.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD0.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD0.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    output.SV_Target0.xyz = half3(fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5)));
    output.SV_Target0.w = half(0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    output.SV_Target0.xyz = half3(fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5)));
    output.SV_Target0.w = half(0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    output.SV_Target0.xyz = half3(fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5)));
    output.SV_Target0.w = half(0.0);
    return output;
}
"
}
}
}
 Pass {
  Name "PREPASS"
  LOD 2500
  Tags { "DisableBatching" = "true" "LIGHTMODE" = "PREPASSFINAL" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  GpuProgramID 165304
Program "vp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD1 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat2;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD1.zw = u_xlat2.zw;
    output.TEXCOORD1.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD1 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat2;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD1.zw = u_xlat2.zw;
    output.TEXCOORD1.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD1 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat2;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD1.zw = u_xlat2.zw;
    output.TEXCOORD1.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD1 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat2;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD1.zw = u_xlat2.zw;
    output.TEXCOORD1.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD1 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat2;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD1.zw = u_xlat2.zw;
    output.TEXCOORD1.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD1 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat2;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD1.zw = u_xlat2.zw;
    output.TEXCOORD1.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
}
}
 Pass {
  Name "DEFERRED"
  LOD 2500
  Tags { "DisableBatching" = "true" "LIGHTMODE" = "DEFERRED" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  GpuProgramID 220822
Program "vp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    output.SV_Target3 = half4(1.0, 1.0, 1.0, 1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    output.SV_Target3 = half4(1.0, 1.0, 1.0, 1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    output.SV_Target3 = half4(1.0, 1.0, 1.0, 1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    output.SV_Target3 = half4(1.0, 1.0, 1.0, 1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    output.SV_Target3 = half4(1.0, 1.0, 1.0, 1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    output.SV_Target3 = half4(1.0, 1.0, 1.0, 1.0);
    return output;
}
"
}
}
}
 Pass {
  Name "FORWARD"
  LOD 2500
  Tags { "DisableBatching" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  GpuProgramID 327595
Program "vp" {
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat42 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat42 = (-u_xlat42) + 1.0;
    u_xlat42 = u_xlat42 * VGlobals._ProjectionParams.z;
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat42 = fma(u_xlat42, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat42, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat42 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat42 = (-u_xlat42) + 1.0;
    u_xlat42 = u_xlat42 * VGlobals._ProjectionParams.z;
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat42 = fma(u_xlat42, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat42, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat42 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat42 = (-u_xlat42) + 1.0;
    u_xlat42 = u_xlat42 * VGlobals._ProjectionParams.z;
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat42 = fma(u_xlat42, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat42, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat42 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat42 = (-u_xlat42) + 1.0;
    u_xlat42 = u_xlat42 * VGlobals._ProjectionParams.z;
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat42 = fma(u_xlat42, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat42, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat42 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat42 = (-u_xlat42) + 1.0;
    u_xlat42 = u_xlat42 * VGlobals._ProjectionParams.z;
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat42 = fma(u_xlat42, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat42, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat42 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat42 = (-u_xlat42) + 1.0;
    u_xlat42 = u_xlat42 * VGlobals._ProjectionParams.z;
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat42 = fma(u_xlat42, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat42, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half u_xlat16_11;
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_1 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat16_2.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = u_xlat16_2.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_11 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_11 = max(u_xlat16_11, half(0.0));
    output.SV_Target0.xyz = half3(u_xlat16_11) * u_xlat16_2.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half u_xlat16_11;
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_1 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat16_2.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = u_xlat16_2.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_11 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_11 = max(u_xlat16_11, half(0.0));
    output.SV_Target0.xyz = half3(u_xlat16_11) * u_xlat16_2.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half u_xlat16_11;
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_1 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat16_2.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = u_xlat16_2.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_11 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_11 = max(u_xlat16_11, half(0.0));
    output.SV_Target0.xyz = half3(u_xlat16_11) * u_xlat16_2.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_18;
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_18 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_18 = max(u_xlat16_18, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_18), u_xlat16_4.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_18;
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_18 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_18 = max(u_xlat16_18, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_18), u_xlat16_4.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_18;
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_18 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_18 = max(u_xlat16_18, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_18), u_xlat16_4.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_21 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_21) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_21 = max(u_xlat16_21, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_21), u_xlat16_4.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_21 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_21) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_21 = max(u_xlat16_21, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_21), u_xlat16_4.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_21 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_21) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_21 = max(u_xlat16_21, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_21), u_xlat16_4.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    u_xlat16_0 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_0 = max(u_xlat16_0, half(0.0));
    u_xlat16_1.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_0), u_xlat16_4.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    u_xlat16_0 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_0 = max(u_xlat16_0, half(0.0));
    u_xlat16_1.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_0), u_xlat16_4.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    u_xlat16_0 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_0 = max(u_xlat16_0, half(0.0));
    u_xlat16_1.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_0), u_xlat16_4.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_18;
    u_xlat16_0.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_0.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_0.x))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_0.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_0.xxx, u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_0.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_5.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_18 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_18 = max(u_xlat16_18, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_5.xyz, half3(u_xlat16_18), u_xlat16_0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_18;
    u_xlat16_0.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_0.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_0.x))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_0.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_0.xxx, u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_0.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_5.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_18 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_18 = max(u_xlat16_18, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_5.xyz, half3(u_xlat16_18), u_xlat16_0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_18;
    u_xlat16_0.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_0.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_0.x))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_0.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_0.xxx, u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_0.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_5.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_18 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_18 = max(u_xlat16_18, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_5.xyz, half3(u_xlat16_18), u_xlat16_0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_16;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_1.x = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * FGlobals._LightColor0.xyz;
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    u_xlat16_2.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    output.SV_Target0.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_16), u_xlat16_3.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_16;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_1.x = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * FGlobals._LightColor0.xyz;
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    u_xlat16_2.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    output.SV_Target0.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_16), u_xlat16_3.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_16;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_1.x = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * FGlobals._LightColor0.xyz;
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    u_xlat16_2.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    output.SV_Target0.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_16), u_xlat16_3.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half u_xlat16_21;
    u_xlat16_0.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_0.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_0.x))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_0.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_0.xxx, u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_0.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_5.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_1 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_21 = dot(u_xlat16_1, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_6.xyz = half3(u_xlat16_21) * FGlobals._LightColor0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_21 = max(u_xlat16_21, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_5.xyz, half3(u_xlat16_21), u_xlat16_0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half u_xlat16_21;
    u_xlat16_0.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_0.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_0.x))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_0.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_0.xxx, u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_0.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_5.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_1 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_21 = dot(u_xlat16_1, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_6.xyz = half3(u_xlat16_21) * FGlobals._LightColor0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_21 = max(u_xlat16_21, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_5.xyz, half3(u_xlat16_21), u_xlat16_0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half u_xlat16_21;
    u_xlat16_0.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_0.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_0.x))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_0.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_0.xxx, u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_0.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_5.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_1 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_21 = dot(u_xlat16_1, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_6.xyz = half3(u_xlat16_21) * FGlobals._LightColor0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_21 = max(u_xlat16_21, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_5.xyz, half3(u_xlat16_21), u_xlat16_0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    float3 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    float u_xlat10;
    half u_xlat16_11;
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_1 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat16_2.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = u_xlat16_2.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_11 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_11 = max(u_xlat16_11, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_2.xyz, half3(u_xlat16_11), (-FGlobals.unity_FogColor.xyz));
    u_xlat10 = input.TEXCOORD4;
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat1.xyz = fma(float3(u_xlat10), float3(u_xlat16_1.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    float3 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    float u_xlat10;
    half u_xlat16_11;
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_1 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat16_2.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = u_xlat16_2.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_11 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_11 = max(u_xlat16_11, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_2.xyz, half3(u_xlat16_11), (-FGlobals.unity_FogColor.xyz));
    u_xlat10 = input.TEXCOORD4;
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat1.xyz = fma(float3(u_xlat10), float3(u_xlat16_1.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    float3 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    float u_xlat10;
    half u_xlat16_11;
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_1 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat16_2.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = u_xlat16_2.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_11 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_11 = max(u_xlat16_11, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_2.xyz, half3(u_xlat16_11), (-FGlobals.unity_FogColor.xyz));
    u_xlat10 = input.TEXCOORD4;
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat1.xyz = fma(float3(u_xlat10), float3(u_xlat16_1.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_FogColor;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat15;
    half u_xlat16_18;
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_18 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_18 = max(u_xlat16_18, half(0.0));
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_18), u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_3.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat15 = input.TEXCOORD4;
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat15), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_FogColor;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat15;
    half u_xlat16_18;
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_18 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_18 = max(u_xlat16_18, half(0.0));
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_18), u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_3.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat15 = input.TEXCOORD4;
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat15), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_FogColor;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat15;
    half u_xlat16_18;
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_18 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_18 = max(u_xlat16_18, half(0.0));
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_18), u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_3.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat15 = input.TEXCOORD4;
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat15), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat18;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_21 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_21) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_21 = max(u_xlat16_21, half(0.0));
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_21), u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_3.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat18 = input.TEXCOORD4;
    u_xlat18 = clamp(u_xlat18, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat18), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat18;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_21 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_21) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_21 = max(u_xlat16_21, half(0.0));
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_21), u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_3.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat18 = input.TEXCOORD4;
    u_xlat18 = clamp(u_xlat18, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat18), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat18;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_21 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_21) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_21 = max(u_xlat16_21, half(0.0));
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_21), u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_3.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat18 = input.TEXCOORD4;
    u_xlat18 = clamp(u_xlat18, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat18), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat14;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_0.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_1.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_0.xxx, u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat14 = input.TEXCOORD4;
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat14), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat14;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_0.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_1.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_0.xxx, u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat14 = input.TEXCOORD4;
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat14), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat14;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_0.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_1.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_0.xxx, u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat14 = input.TEXCOORD4;
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat14), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_18;
    float u_xlat21;
    u_xlat16_0.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_0.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_0.x))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_0.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_0.xxx, u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_0.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_5.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_18 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_18 = max(u_xlat16_18, half(0.0));
    u_xlat16_0.xyz = fma(u_xlat16_5.xyz, half3(u_xlat16_18), u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat21 = input.TEXCOORD4;
    u_xlat21 = clamp(u_xlat21, 0.0f, 1.0f);
    u_xlat3.xyz = fma(float3(u_xlat21), float3(u_xlat16_3.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat3.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_18;
    float u_xlat21;
    u_xlat16_0.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_0.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_0.x))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_0.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_0.xxx, u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_0.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_5.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_18 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_18 = max(u_xlat16_18, half(0.0));
    u_xlat16_0.xyz = fma(u_xlat16_5.xyz, half3(u_xlat16_18), u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat21 = input.TEXCOORD4;
    u_xlat21 = clamp(u_xlat21, 0.0f, 1.0f);
    u_xlat3.xyz = fma(float3(u_xlat21), float3(u_xlat16_3.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat3.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_18;
    float u_xlat21;
    u_xlat16_0.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_0.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_0.x))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_0.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_0.xxx, u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_0.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_5.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_18 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_18 = max(u_xlat16_18, half(0.0));
    u_xlat16_0.xyz = fma(u_xlat16_5.xyz, half3(u_xlat16_18), u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat21 = input.TEXCOORD4;
    u_xlat21 = clamp(u_xlat21, 0.0f, 1.0f);
    u_xlat3.xyz = fma(float3(u_xlat21), float3(u_xlat16_3.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat3.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_16;
    float u_xlat17;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_1.x = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * FGlobals._LightColor0.xyz;
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    u_xlat16_2.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_16), u_xlat16_3.xyz);
    u_xlat16_2.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat17 = input.TEXCOORD4;
    u_xlat17 = clamp(u_xlat17, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat17), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_16;
    float u_xlat17;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_1.x = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * FGlobals._LightColor0.xyz;
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    u_xlat16_2.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_16), u_xlat16_3.xyz);
    u_xlat16_2.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat17 = input.TEXCOORD4;
    u_xlat17 = clamp(u_xlat17, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat17), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_16;
    float u_xlat17;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_1.x = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * FGlobals._LightColor0.xyz;
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    u_xlat16_2.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_16), u_xlat16_3.xyz);
    u_xlat16_2.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat17 = input.TEXCOORD4;
    u_xlat17 = clamp(u_xlat17, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat17), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half u_xlat16_21;
    float u_xlat24;
    u_xlat16_0.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_0.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_0.x))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_0.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_0.xxx, u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_0.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_5.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_1 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_21 = dot(u_xlat16_1, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_6.xyz = half3(u_xlat16_21) * FGlobals._LightColor0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_21 = max(u_xlat16_21, half(0.0));
    u_xlat16_0.xyz = fma(u_xlat16_5.xyz, half3(u_xlat16_21), u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat24 = input.TEXCOORD4;
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat3.xyz = fma(float3(u_xlat24), float3(u_xlat16_3.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat3.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half u_xlat16_21;
    float u_xlat24;
    u_xlat16_0.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_0.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_0.x))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_0.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_0.xxx, u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_0.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_5.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_1 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_21 = dot(u_xlat16_1, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_6.xyz = half3(u_xlat16_21) * FGlobals._LightColor0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_21 = max(u_xlat16_21, half(0.0));
    u_xlat16_0.xyz = fma(u_xlat16_5.xyz, half3(u_xlat16_21), u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat24 = input.TEXCOORD4;
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat3.xyz = fma(float3(u_xlat24), float3(u_xlat16_3.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat3.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half u_xlat16_21;
    float u_xlat24;
    u_xlat16_0.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_0.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_0.x))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_0.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_0.xxx, u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = fma(u_xlat16_3.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_0.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_5.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_1 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_21 = dot(u_xlat16_1, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_6.xyz = half3(u_xlat16_21) * FGlobals._LightColor0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_21 = max(u_xlat16_21, half(0.0));
    u_xlat16_0.xyz = fma(u_xlat16_5.xyz, half3(u_xlat16_21), u_xlat16_0.xyz);
    u_xlat16_3.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat24 = input.TEXCOORD4;
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat3.xyz = fma(float3(u_xlat24), float3(u_xlat16_3.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat3.xyz);
    return output;
}
"
}
}
}
 Pass {
  Name "FORWARD"
  LOD 2500
  Tags { "DisableBatching" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  GpuProgramID 361487
Program "vp" {
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    float u_xlat39;
    float u_xlat40;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat39 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat39), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat40 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat40), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat39 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * VGlobals._ProjectionParams.z;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat39 = fma(u_xlat39, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat39, float(u_xlat16_12));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    output.TEXCOORD1.xyz = float3(u_xlat39) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat39 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat39), u_xlat0.xyz);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half u_xlat16_6;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_6 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_6 = max(u_xlat16_6, half(0.0));
    output.SV_Target0.xyz = half3(u_xlat16_6) * u_xlat16_0.xyz;
    output.SV_Target0.w = half(0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half u_xlat16_6;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_6 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_6 = max(u_xlat16_6, half(0.0));
    output.SV_Target0.xyz = half3(u_xlat16_6) * u_xlat16_0.xyz;
    output.SV_Target0.w = half(0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half u_xlat16_6;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_6 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_6 = max(u_xlat16_6, half(0.0));
    output.SV_Target0.xyz = half3(u_xlat16_6) * u_xlat16_0.xyz;
    output.SV_Target0.w = half(0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    half u_xlat16_6;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_6 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_6 = max(u_xlat16_6, half(0.0));
    u_xlat16_0.xyz = half3(u_xlat16_6) * u_xlat16_0.xyz;
    u_xlat1.x = input.TEXCOORD5;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xxx;
    output.SV_Target0.xyz = half3(u_xlat1.xyz);
    output.SV_Target0.w = half(0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    half u_xlat16_6;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_6 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_6 = max(u_xlat16_6, half(0.0));
    u_xlat16_0.xyz = half3(u_xlat16_6) * u_xlat16_0.xyz;
    u_xlat1.x = input.TEXCOORD5;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xxx;
    output.SV_Target0.xyz = half3(u_xlat1.xyz);
    output.SV_Target0.w = half(0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    half u_xlat16_6;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_6 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_6 = max(u_xlat16_6, half(0.0));
    u_xlat16_0.xyz = half3(u_xlat16_6) * u_xlat16_0.xyz;
    u_xlat1.x = input.TEXCOORD5;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xxx;
    output.SV_Target0.xyz = half3(u_xlat1.xyz);
    output.SV_Target0.w = half(0.0);
    return output;
}
"
}
}
}
 Pass {
  Name "PREPASS"
  LOD 2500
  Tags { "DisableBatching" = "true" "LIGHTMODE" = "PREPASSBASE" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  GpuProgramID 417461
Program "vp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD0.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD0.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD0.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    output.SV_Target0.xyz = half3(fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5)));
    output.SV_Target0.w = half(0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    output.SV_Target0.xyz = half3(fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5)));
    output.SV_Target0.w = half(0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    output.SV_Target0.xyz = half3(fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5)));
    output.SV_Target0.w = half(0.0);
    return output;
}
"
}
}
}
 Pass {
  Name "PREPASS"
  LOD 2500
  Tags { "DisableBatching" = "true" "LIGHTMODE" = "PREPASSFINAL" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  GpuProgramID 491099
Program "vp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat11;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat11 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat11 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat11;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat11 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat11 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat11;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat11 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat11 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat11;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat11 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat11 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat11;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat11 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat11 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat11;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat11 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat11 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat11;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat11 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat11 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat11;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat11 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat11 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat11;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat11 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat11 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat11;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat11 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat11 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat11;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat11 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat11 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float u_xlat11;
    float u_xlat33;
    float u_xlat34;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat34 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat34), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat33 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat33), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat11 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat11 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat42 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat42 = (-u_xlat42) + 1.0;
    u_xlat42 = u_xlat42 * VGlobals._ProjectionParams.z;
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat42 = fma(u_xlat42, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat42, float(u_xlat16_12.x));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat42 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat42 = (-u_xlat42) + 1.0;
    u_xlat42 = u_xlat42 * VGlobals._ProjectionParams.z;
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat42 = fma(u_xlat42, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat42, float(u_xlat16_12.x));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat42 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat42 = (-u_xlat42) + 1.0;
    u_xlat42 = u_xlat42 * VGlobals._ProjectionParams.z;
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat42 = fma(u_xlat42, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat42, float(u_xlat16_12.x));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat42 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat42 = (-u_xlat42) + 1.0;
    u_xlat42 = u_xlat42 * VGlobals._ProjectionParams.z;
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat42 = fma(u_xlat42, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat42, float(u_xlat16_12.x));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat42 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat42 = (-u_xlat42) + 1.0;
    u_xlat42 = u_xlat42 * VGlobals._ProjectionParams.z;
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat42 = fma(u_xlat42, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat42, float(u_xlat16_12.x));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat42 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat42 = (-u_xlat42) + 1.0;
    u_xlat42 = u_xlat42 * VGlobals._ProjectionParams.z;
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat42 = fma(u_xlat42, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat42, float(u_xlat16_12.x));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat42 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat42 = (-u_xlat42) + 1.0;
    u_xlat42 = u_xlat42 * VGlobals._ProjectionParams.z;
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat42 = fma(u_xlat42, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat42, float(u_xlat16_12.x));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat42 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat42 = (-u_xlat42) + 1.0;
    u_xlat42 = u_xlat42 * VGlobals._ProjectionParams.z;
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat42 = fma(u_xlat42, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat42, float(u_xlat16_12.x));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half3 u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.mtl_Position = u_xlat3;
    u_xlat42 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat42 = (-u_xlat42) + 1.0;
    u_xlat42 = u_xlat42 * VGlobals._ProjectionParams.z;
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat42 = fma(u_xlat42, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_12.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat42, float(u_xlat16_12.x));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat16_12.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_12.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_12.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_12.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_12.xxx, u_xlat16_13.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_13.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_13.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_13.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_12.xyz = u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat16_12.xyz = max(u_xlat16_12.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_12.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    half u_xlat16_11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    u_xlat36 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat36 = (-u_xlat36) + 1.0;
    u_xlat36 = u_xlat36 * VGlobals._ProjectionParams.z;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat36 = fma(u_xlat36, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_11 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat36, float(u_xlat16_11));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    half u_xlat16_11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    u_xlat36 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat36 = (-u_xlat36) + 1.0;
    u_xlat36 = u_xlat36 * VGlobals._ProjectionParams.z;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat36 = fma(u_xlat36, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_11 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat36, float(u_xlat16_11));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    half u_xlat16_11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    u_xlat36 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat36 = (-u_xlat36) + 1.0;
    u_xlat36 = u_xlat36 * VGlobals._ProjectionParams.z;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat36 = fma(u_xlat36, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_11 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat36, float(u_xlat16_11));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    half u_xlat16_11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    u_xlat36 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat36 = (-u_xlat36) + 1.0;
    u_xlat36 = u_xlat36 * VGlobals._ProjectionParams.z;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat36 = fma(u_xlat36, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_11 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat36, float(u_xlat16_11));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    half u_xlat16_11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    u_xlat36 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat36 = (-u_xlat36) + 1.0;
    u_xlat36 = u_xlat36 * VGlobals._ProjectionParams.z;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat36 = fma(u_xlat36, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_11 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat36, float(u_xlat16_11));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    half u_xlat16_11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    u_xlat36 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat36 = (-u_xlat36) + 1.0;
    u_xlat36 = u_xlat36 * VGlobals._ProjectionParams.z;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat36 = fma(u_xlat36, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_11 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat36, float(u_xlat16_11));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    half u_xlat16_11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    u_xlat36 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat36 = (-u_xlat36) + 1.0;
    u_xlat36 = u_xlat36 * VGlobals._ProjectionParams.z;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat36 = fma(u_xlat36, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_11 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat36, float(u_xlat16_11));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    half u_xlat16_11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    u_xlat36 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat36 = (-u_xlat36) + 1.0;
    u_xlat36 = u_xlat36 * VGlobals._ProjectionParams.z;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat36 = fma(u_xlat36, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_11 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat36, float(u_xlat16_11));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    half u_xlat16_11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    u_xlat36 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat36 = (-u_xlat36) + 1.0;
    u_xlat36 = u_xlat36 * VGlobals._ProjectionParams.z;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat36 = fma(u_xlat36, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_11 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat36, float(u_xlat16_11));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    half u_xlat16_11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    u_xlat36 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat36 = (-u_xlat36) + 1.0;
    u_xlat36 = u_xlat36 * VGlobals._ProjectionParams.z;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat36 = fma(u_xlat36, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_11 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat36, float(u_xlat16_11));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    half u_xlat16_11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    u_xlat36 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat36 = (-u_xlat36) + 1.0;
    u_xlat36 = u_xlat36 * VGlobals._ProjectionParams.z;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat36 = fma(u_xlat36, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_11 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat36, float(u_xlat16_11));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    half u_xlat16_11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat7.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat7.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat7.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat7.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat0.x = dot(u_xlat0, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat2 = (-u_xlat3) + u_xlat7;
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat2, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    output.mtl_Position = u_xlat3;
    u_xlat36 = u_xlat3.z / VGlobals._ProjectionParams.y;
    u_xlat36 = (-u_xlat36) + 1.0;
    u_xlat36 = u_xlat36 * VGlobals._ProjectionParams.z;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat36 = fma(u_xlat36, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_11 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat36, float(u_xlat16_11));
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat4 = fma(u_xlat5, u_xlat1.zzzz, u_xlat4);
    u_xlat5.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat6.x = (-u_xlat5.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat5.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat6.y = (-u_xlat5.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat5.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat6.z = (-u_xlat5.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat5.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat6.w = (-u_xlat5.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat5 = fma(u_xlat1.xxxx, u_xlat6, u_xlat5);
    u_xlat4 = u_xlat4 + (-u_xlat5);
    u_xlat1 = fma(u_xlat4, u_xlat1.yyyy, u_xlat5);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat3.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat3.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat3.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat2.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat2.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat2.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_3.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_3.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_3.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_3.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_3.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_3.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_3.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_3.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_3.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat0.xyz = fma(float3(u_xlat16_3.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat0.xyz = fma(float3(u_xlat16_3.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat0.xyz = fma(float3(u_xlat16_3.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat0.xyz = fma(float3(u_xlat16_3.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat0.xyz = fma(float3(u_xlat16_3.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat0.xyz = fma(float3(u_xlat16_3.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat0.xyz = fma(float3(u_xlat16_3.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat0.xyz = fma(float3(u_xlat16_3.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half4 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_1.xyz)) + input.TEXCOORD4.xyz;
    u_xlat16_1 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_1.w * FGlobals._AlphaFactor;
    u_xlat0.xyz = fma(float3(u_xlat16_3.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat14;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = fma(u_xlat16_3.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat14 = input.TEXCOORD5;
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat14), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat14;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = fma(u_xlat16_3.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat14 = input.TEXCOORD5;
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat14), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat14;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = fma(u_xlat16_3.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat14 = input.TEXCOORD5;
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat14), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat14;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = fma(u_xlat16_3.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat14 = input.TEXCOORD5;
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat14), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat14;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = fma(u_xlat16_3.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat14 = input.TEXCOORD5;
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat14), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat14;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = fma(u_xlat16_3.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat14 = input.TEXCOORD5;
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat14), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat14;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = fma(u_xlat16_3.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat14 = input.TEXCOORD5;
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat14), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat14;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = fma(u_xlat16_3.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat14 = input.TEXCOORD5;
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat14), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat14;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = fma(u_xlat16_3.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat14 = input.TEXCOORD5;
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat14), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat14;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = fma(u_xlat16_3.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat14 = input.TEXCOORD5;
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat14), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat14;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = fma(u_xlat16_3.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat14 = input.TEXCOORD5;
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat14), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
    half _AlphaFactor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat14;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_1.xyz));
    u_xlat16_0 = FGlobals._Color + FGlobals._AddColor;
    u_xlat16_2 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_2;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = u_xlat16_0.w * FGlobals._AlphaFactor;
    u_xlat16_2.xyz = fma(u_xlat16_3.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat14 = input.TEXCOORD5;
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat14), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    return output;
}
"
}
}
}
 Pass {
  Name "DEFERRED"
  LOD 2500
  Tags { "DisableBatching" = "true" "LIGHTMODE" = "DEFERRED" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  GpuProgramID 548673
Program "vp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat3.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat3.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat3.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat3.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat3.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat3, u_xlat1.zzzz, u_xlat2);
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat3 = fma(u_xlat1.xxxx, u_xlat4, u_xlat3);
    u_xlat2 = u_xlat2 + (-u_xlat3);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat3);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    half u_xlat16_12;
    half3 u_xlat16_13;
    float u_xlat42;
    float u_xlat43;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat42), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat43 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat43), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    u_xlat3.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat3.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat3.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat3.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat3.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat3.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat3.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat3.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat3 = fma(u_xlat4, u_xlat1.zzzz, u_xlat3);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat3 = u_xlat3 + (-u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat1.yyyy, u_xlat4);
    u_xlat42 = dot(u_xlat1, input.POSITION0);
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat42), u_xlat0.xyz);
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_12 = half(u_xlat2.y * u_xlat2.y);
    u_xlat16_12 = half(fma(u_xlat2.x, u_xlat2.x, (-float(u_xlat16_12))));
    u_xlat16_0 = half4(u_xlat2.yzzx * u_xlat2.xyzz);
    u_xlat16_13.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_13.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_13.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_12), u_xlat16_13.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat4.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat4, u_xlat1.zzzz, u_xlat2);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat2 = u_xlat2 + (-u_xlat4);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat3.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat3.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat3.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat3.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat4.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat4, u_xlat1.zzzz, u_xlat2);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat2 = u_xlat2 + (-u_xlat4);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat3.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat3.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat3.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat3.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat4.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat4, u_xlat1.zzzz, u_xlat2);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat2 = u_xlat2 + (-u_xlat4);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat3.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat3.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat3.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat3.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat4.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat4, u_xlat1.zzzz, u_xlat2);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat2 = u_xlat2 + (-u_xlat4);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat3.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat3.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat3.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat3.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat4.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat4, u_xlat1.zzzz, u_xlat2);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat2 = u_xlat2 + (-u_xlat4);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat3.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat3.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat3.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat3.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat4.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat4, u_xlat1.zzzz, u_xlat2);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat2 = u_xlat2 + (-u_xlat4);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat3.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat3.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat3.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat3.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat4.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat4, u_xlat1.zzzz, u_xlat2);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat2 = u_xlat2 + (-u_xlat4);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat3.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat3.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat3.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat3.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat4.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat4, u_xlat1.zzzz, u_xlat2);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat2 = u_xlat2 + (-u_xlat4);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat3.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat3.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat3.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat3.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat4.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat4, u_xlat1.zzzz, u_xlat2);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat2 = u_xlat2 + (-u_xlat4);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat3.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat3.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat3.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat3.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat4.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat4, u_xlat1.zzzz, u_xlat2);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat2 = u_xlat2 + (-u_xlat4);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat3.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat3.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat3.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat3.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat4.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat4, u_xlat1.zzzz, u_xlat2);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat2 = u_xlat2 + (-u_xlat4);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat3.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat3.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat3.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat3.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 hlslcc_mtx4x4_flMatrix[4];
    float4 hlslcc_mtx4x4_frMatrix[4];
    float4 hlslcc_mtx4x4_rlMatrix[4];
    float4 hlslcc_mtx4x4_rrMatrix[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float u_xlat12;
    float u_xlat36;
    float u_xlat37;
    u_xlat0.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].yxz;
    u_xlatb1.xyz = (input.TEXCOORD1.xxx>=float3(1.0, 2.0, 3.0));
    u_xlat1.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb1.xyz));
    u_xlat2.x = fma(u_xlat0.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].y);
    u_xlat3.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].xyz;
    u_xlat2.y = fma(u_xlat3.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].y);
    u_xlat4.xyz = (-VGlobals.hlslcc_mtx4x4_rlMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].xzy;
    u_xlat2.z = fma(u_xlat4.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].y);
    u_xlat5.xyw = (-VGlobals.hlslcc_mtx4x4_rlMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].xzy;
    u_xlat2.w = fma(u_xlat5.w, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].y);
    u_xlat6.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[0].yxz) + VGlobals.hlslcc_mtx4x4_frMatrix[0].yxz;
    u_xlat7.x = fma(u_xlat1.x, u_xlat6.x, VGlobals.hlslcc_mtx4x4_flMatrix[0].y);
    u_xlat8.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[1].xyz) + VGlobals.hlslcc_mtx4x4_frMatrix[1].xyz;
    u_xlat7.y = fma(u_xlat1.x, u_xlat8.y, VGlobals.hlslcc_mtx4x4_flMatrix[1].y);
    u_xlat9.xyz = (-VGlobals.hlslcc_mtx4x4_flMatrix[2].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[2].xzy;
    u_xlat7.z = fma(u_xlat1.x, u_xlat9.z, VGlobals.hlslcc_mtx4x4_flMatrix[2].y);
    u_xlat10.xyw = (-VGlobals.hlslcc_mtx4x4_flMatrix[3].xzy) + VGlobals.hlslcc_mtx4x4_frMatrix[3].xzy;
    u_xlat7.w = fma(u_xlat1.x, u_xlat10.w, VGlobals.hlslcc_mtx4x4_flMatrix[3].y);
    u_xlat2 = u_xlat2 + (-u_xlat7);
    u_xlat2 = fma(u_xlat2, u_xlat1.yyyy, u_xlat7);
    u_xlat0.x = dot(u_xlat2, input.POSITION0);
    u_xlat2.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat7 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat11.x = fma(u_xlat0.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].z);
    u_xlat0.x = fma(u_xlat0.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[0].x);
    u_xlat11.y = fma(u_xlat3.z, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].z);
    u_xlat0.y = fma(u_xlat3.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[1].x);
    u_xlat11.z = fma(u_xlat4.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].z);
    u_xlat0.z = fma(u_xlat4.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[2].x);
    u_xlat11.w = fma(u_xlat5.y, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].z);
    u_xlat0.w = fma(u_xlat5.x, u_xlat1.z, VGlobals.hlslcc_mtx4x4_rlMatrix[3].x);
    u_xlat3.x = fma(u_xlat1.x, u_xlat6.z, VGlobals.hlslcc_mtx4x4_flMatrix[0].z);
    u_xlat4.x = fma(u_xlat1.x, u_xlat6.y, VGlobals.hlslcc_mtx4x4_flMatrix[0].x);
    u_xlat3.y = fma(u_xlat1.x, u_xlat8.z, VGlobals.hlslcc_mtx4x4_flMatrix[1].z);
    u_xlat4.y = fma(u_xlat1.x, u_xlat8.x, VGlobals.hlslcc_mtx4x4_flMatrix[1].x);
    u_xlat3.z = fma(u_xlat1.x, u_xlat9.y, VGlobals.hlslcc_mtx4x4_flMatrix[2].z);
    u_xlat4.z = fma(u_xlat1.x, u_xlat9.x, VGlobals.hlslcc_mtx4x4_flMatrix[2].x);
    u_xlat3.w = fma(u_xlat1.x, u_xlat10.y, VGlobals.hlslcc_mtx4x4_flMatrix[3].z);
    u_xlat4.w = fma(u_xlat1.x, u_xlat10.x, VGlobals.hlslcc_mtx4x4_flMatrix[3].x);
    u_xlat0 = u_xlat0 + (-u_xlat4);
    u_xlat0 = fma(u_xlat0, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat0, input.POSITION0);
    u_xlat2.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], float4(u_xlat36), u_xlat7);
    u_xlat4 = (-u_xlat3) + u_xlat11;
    u_xlat3 = fma(u_xlat4, u_xlat1.yyyy, u_xlat3);
    u_xlat37 = dot(u_xlat3, input.POSITION0);
    u_xlat2.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], float4(u_xlat37), u_xlat0);
    u_xlat3 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat4);
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat4);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat3.wwww, u_xlat4);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat4.x = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(u_xlat2.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    output.TEXCOORD1.xyz = float3(u_xlat36) * u_xlat4.xyz;
    u_xlat2.x = VGlobals.hlslcc_mtx4x4_rlMatrix[0].w;
    u_xlat4.x = (-u_xlat2.x) + VGlobals.hlslcc_mtx4x4_rrMatrix[0].w;
    u_xlat2.y = VGlobals.hlslcc_mtx4x4_rlMatrix[1].w;
    u_xlat4.y = (-u_xlat2.y) + VGlobals.hlslcc_mtx4x4_rrMatrix[1].w;
    u_xlat2.z = VGlobals.hlslcc_mtx4x4_rlMatrix[2].w;
    u_xlat4.z = (-u_xlat2.z) + VGlobals.hlslcc_mtx4x4_rrMatrix[2].w;
    u_xlat2.w = VGlobals.hlslcc_mtx4x4_rlMatrix[3].w;
    u_xlat4.w = (-u_xlat2.w) + VGlobals.hlslcc_mtx4x4_rrMatrix[3].w;
    u_xlat2 = fma(u_xlat4, u_xlat1.zzzz, u_xlat2);
    u_xlat4.x = VGlobals.hlslcc_mtx4x4_flMatrix[0].w;
    u_xlat5.x = (-u_xlat4.x) + VGlobals.hlslcc_mtx4x4_frMatrix[0].w;
    u_xlat4.y = VGlobals.hlslcc_mtx4x4_flMatrix[1].w;
    u_xlat5.y = (-u_xlat4.y) + VGlobals.hlslcc_mtx4x4_frMatrix[1].w;
    u_xlat4.z = VGlobals.hlslcc_mtx4x4_flMatrix[2].w;
    u_xlat5.z = (-u_xlat4.z) + VGlobals.hlslcc_mtx4x4_frMatrix[2].w;
    u_xlat4.w = VGlobals.hlslcc_mtx4x4_flMatrix[3].w;
    u_xlat5.w = (-u_xlat4.w) + VGlobals.hlslcc_mtx4x4_frMatrix[3].w;
    u_xlat4 = fma(u_xlat1.xxxx, u_xlat5, u_xlat4);
    u_xlat2 = u_xlat2 + (-u_xlat4);
    u_xlat1 = fma(u_xlat2, u_xlat1.yyyy, u_xlat4);
    u_xlat36 = dot(u_xlat1, input.POSITION0);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, float3(u_xlat36), u_xlat0.xyz);
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat3.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat3.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat3.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat3.w, u_xlat0.x);
    u_xlat12 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat12 * (-u_xlat0.x);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    output.SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    output.SV_Target3 = half4(1.0, 1.0, 1.0, 1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    output.SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    output.SV_Target3 = half4(1.0, 1.0, 1.0, 1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    output.SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    output.SV_Target3 = half4(1.0, 1.0, 1.0, 1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_2.xyz = u_xlat16_2.xyz + input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_2.xyz = u_xlat16_2.xyz + input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_2.xyz = u_xlat16_2.xyz + input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_ProbesOcclusion;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_2.xyz = u_xlat16_2.xyz + input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    output.SV_Target4 = FGlobals.unity_ProbesOcclusion;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_ProbesOcclusion;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_2.xyz = u_xlat16_2.xyz + input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    output.SV_Target4 = FGlobals.unity_ProbesOcclusion;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_ProbesOcclusion;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_2.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_2.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_2.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_2.xyz = u_xlat16_2.xyz + input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    output.SV_Target4 = FGlobals.unity_ProbesOcclusion;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat16_1.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat16_1.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat16_1.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_18;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat16_18 = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_18 = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_18))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(FGlobals.unity_SHC.xyz, half3(u_xlat16_18), u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_2.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_18;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat16_18 = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_18 = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_18))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(FGlobals.unity_SHC.xyz, half3(u_xlat16_18), u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_2.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_18;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat16_18 = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_18 = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_18))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(FGlobals.unity_SHC.xyz, half3(u_xlat16_18), u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_2.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat16_1.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD3.xy);
    output.SV_Target4 = u_xlat16_0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat16_1.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD3.xy);
    output.SV_Target4 = u_xlat16_0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat16_1.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD3.xy);
    output.SV_Target4 = u_xlat16_0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_18;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat16_18 = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_18 = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_18))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(FGlobals.unity_SHC.xyz, half3(u_xlat16_18), u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_2.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD3.xy);
    output.SV_Target4 = u_xlat16_0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_18;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat16_18 = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_18 = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_18))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(FGlobals.unity_SHC.xyz, half3(u_xlat16_18), u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_2.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD3.xy);
    output.SV_Target4 = u_xlat16_0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half4 _AddColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_18;
    u_xlat16_0.xyz = FGlobals._Color.xyz + FGlobals._AddColor.xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat1.w = 1.0;
    output.SV_Target2 = half4(u_xlat1);
    u_xlat16_18 = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_18 = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_18))));
    u_xlat16_1 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_2.x = dot(FGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_2.y = dot(FGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_2.z = dot(FGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(FGlobals.unity_SHC.xyz, half3(u_xlat16_18), u_xlat16_2.xyz);
    u_xlat1.xyz = input.TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat1));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat1));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat1));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_2.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_0.xyz));
    output.SV_Target3.w = half(1.0);
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD3.xy);
    output.SV_Target4 = u_xlat16_0;
    return output;
}
"
}
}
}
}
Fallback "Booster/Black"
}