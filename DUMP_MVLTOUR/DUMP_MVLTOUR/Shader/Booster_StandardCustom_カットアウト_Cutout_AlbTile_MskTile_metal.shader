//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Booster/StandardCustom/カットアウト/Cutout_AlbTile_MskTile" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_MainTex ("Albedo(UV0)", 2D) = "white" { }
[Header(Albedo UV Tile)] _AlbedoTileFreq ("コマ送り速度", Range(-1000, 1000)) = 0
_AlbedoTileSplitU ("U方向：分割数", Range(1, 32)) = 1
_AlbedoTileSplitV ("V方向：分割数", Range(1, 32)) = 1
[Space(10)] _TransparencyLM ("AlphaMask(UV0)", 2D) = "black" { }
[Header(AlphaMask UV Tile)] _AlphaMaskTileFreq ("コマ送り速度", Range(-1000, 1000)) = 0
_AlphaMaskTileSplitU ("U方向：分割数", Range(1, 32)) = 1
_AlphaMaskTileSplitV ("V方向：分割数", Range(1, 32)) = 1
[Space(10)] _Metallic ("Metallic", Range(0, 1)) = 0
_Smoothness ("Smoothness", Range(0, 1)) = 0
_Occlusion ("Occlusion", Range(0, 1)) = 1
_Cutout ("カットアウト値", Range(0, 1)) = 0.5
[Header(Booster Reflection Cube Map)] [KeywordEnum(NO,YES,FIXEDCOLOR)] _ReflectionProbeType ("個別リフレクションキューブマップ使用", Float) = 0
_HeuristicReflection ("個別リフレクションキューブマップ", Cube) = "_Skybox" { }
_NormalDiff ("疑似LOD反射の揺らぎ", Range(-1, 1)) = 0
_NormalRand ("疑似LOD乱数値", Vector) = (9993.169,5715.817,4488.509,34.2347)
_FixedReflColor ("単色リフレクションカラー", Color) = (1,1,1,1)
[Space(20)] [Enum(NO,0,YES,2)] _StencilOp ("置き影が落ちなくなる", Float) = 0
}
SubShader {
 LOD 5000
 Tags { "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
 Pass {
  Name "FORWARD"
  LOD 5000
  Tags { "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  GpuProgramID 24971
Program "vp" {
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    float2 u_xlat10;
    bool u_xlatb22;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat32;
    half u_xlat16_34;
    half u_xlat16_36;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat10.xy = trunc(u_xlat10.xy);
    u_xlat0.x = u_xlat10.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat10.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat10.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat10.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb30 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb30) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat10.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_1.x = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat0.xyz)));
    u_xlat30 = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb30 = u_xlat30<9.99999975e-06;
    u_xlat30 = (u_xlatb30) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat2.z = u_xlat30 * float(u_xlat16_1.x);
    u_xlat3.x = u_xlat30 * float(u_xlat16_1.z);
    u_xlat2.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat3.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat30 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat30 = sin(u_xlat30);
    u_xlat30 = u_xlat30 * FGlobals._NormalRand.w;
    u_xlat30 = fract(u_xlat30);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat30), float3(u_xlat16_1.xyz));
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * u_xlat2.xyz;
    u_xlat3.z = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb30 = u_xlat3.z<0.00499999989;
    u_xlat32 = u_xlat3.z * 8.29800034;
    u_xlat16_1.x = (u_xlatb30) ? half(0.0) : half(u_xlat32);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_4.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_4.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_4.x, half(1.0));
    u_xlat16_4.x = u_xlat16_4.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(FGlobals._Occlusion);
    u_xlat30 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat30 = floor(u_xlat30);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat30 = u_xlat30 + u_xlat2.x;
    u_xlat30 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat30);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_34 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat30 = u_xlat30 / float(u_xlat16_34);
    u_xlatb22 = u_xlat30>=(-u_xlat30);
    u_xlat30 = fract(abs(u_xlat30));
    u_xlat30 = (u_xlatb22) ? u_xlat30 : (-u_xlat30);
    u_xlat5.x = float(u_xlat16_34) * u_xlat30;
    u_xlat30 = u_xlat5.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat30 = floor(u_xlat30);
    u_xlat5.y = (-u_xlat30);
    u_xlat2.xy = u_xlat2.xy + u_xlat5.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_5.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = fma(u_xlat16_5.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_6.xyz = fma(half3(FGlobals._Metallic), u_xlat16_6.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_34 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_36 = (-u_xlat16_34) + FGlobals._Smoothness;
    u_xlat16_36 = u_xlat16_36 + half(1.0);
    u_xlat16_36 = clamp(u_xlat16_36, 0.0h, 1.0h);
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_36);
    u_xlat30 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat5.xyz = float3(u_xlat30) * input.TEXCOORD1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat32 = u_xlat30;
    u_xlat32 = clamp(u_xlat32, 0.0f, 1.0f);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = fma(u_xlat5.xyz, (-float3(u_xlat30)), u_xlat0.xyz);
    u_xlat30 = dot(u_xlat5.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlat16_8.xyz = half3(float3(u_xlat30) * float3(FGlobals._LightColor0.xyz));
    u_xlat0.x = dot(u_xlat0.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat3.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat3.xz).x;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_9.xyz = half3(float3(u_xlat16_6.xyz) * u_xlat0.xxx);
    u_xlat16_9.xyz = fma(u_xlat16_2.xyz, half3(u_xlat16_34), u_xlat16_9.xyz);
    u_xlat16_34 = half((-u_xlat32) + 1.0);
    u_xlat16_0.x = u_xlat16_34 * u_xlat16_34;
    u_xlat16_0.x = u_xlat16_34 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_34 * u_xlat16_0.x;
    u_xlat16_6.xyz = fma(u_xlat16_0.xxx, u_xlat16_7.xyz, u_xlat16_6.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_9.xyz, u_xlat16_8.xyz, u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_4.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat30 = input.TEXCOORD4;
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat30), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal " {
Keywords { "DIRECTIONAL" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    float2 u_xlat10;
    bool u_xlatb22;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat32;
    half u_xlat16_34;
    half u_xlat16_36;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat10.xy = trunc(u_xlat10.xy);
    u_xlat0.x = u_xlat10.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat10.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat10.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat10.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb30 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb30) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat10.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_1.x = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat0.xyz)));
    u_xlat30 = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb30 = u_xlat30<9.99999975e-06;
    u_xlat30 = (u_xlatb30) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat2.z = u_xlat30 * float(u_xlat16_1.x);
    u_xlat3.x = u_xlat30 * float(u_xlat16_1.z);
    u_xlat2.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat3.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat30 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat30 = sin(u_xlat30);
    u_xlat30 = u_xlat30 * FGlobals._NormalRand.w;
    u_xlat30 = fract(u_xlat30);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat30), float3(u_xlat16_1.xyz));
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * u_xlat2.xyz;
    u_xlat3.z = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb30 = u_xlat3.z<0.00499999989;
    u_xlat32 = u_xlat3.z * 8.29800034;
    u_xlat16_1.x = (u_xlatb30) ? half(0.0) : half(u_xlat32);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_4.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_4.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_4.x, half(1.0));
    u_xlat16_4.x = u_xlat16_4.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(FGlobals._Occlusion);
    u_xlat30 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat30 = floor(u_xlat30);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat30 = u_xlat30 + u_xlat2.x;
    u_xlat30 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat30);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_34 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat30 = u_xlat30 / float(u_xlat16_34);
    u_xlatb22 = u_xlat30>=(-u_xlat30);
    u_xlat30 = fract(abs(u_xlat30));
    u_xlat30 = (u_xlatb22) ? u_xlat30 : (-u_xlat30);
    u_xlat5.x = float(u_xlat16_34) * u_xlat30;
    u_xlat30 = u_xlat5.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat30 = floor(u_xlat30);
    u_xlat5.y = (-u_xlat30);
    u_xlat2.xy = u_xlat2.xy + u_xlat5.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_5.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = fma(u_xlat16_5.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_6.xyz = fma(half3(FGlobals._Metallic), u_xlat16_6.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_34 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_36 = (-u_xlat16_34) + FGlobals._Smoothness;
    u_xlat16_36 = u_xlat16_36 + half(1.0);
    u_xlat16_36 = clamp(u_xlat16_36, 0.0h, 1.0h);
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_36);
    u_xlat30 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat5.xyz = float3(u_xlat30) * input.TEXCOORD1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat32 = u_xlat30;
    u_xlat32 = clamp(u_xlat32, 0.0f, 1.0f);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = fma(u_xlat5.xyz, (-float3(u_xlat30)), u_xlat0.xyz);
    u_xlat30 = dot(u_xlat5.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlat16_8.xyz = half3(float3(u_xlat30) * float3(FGlobals._LightColor0.xyz));
    u_xlat0.x = dot(u_xlat0.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat3.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat3.xz).x;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_9.xyz = half3(float3(u_xlat16_6.xyz) * u_xlat0.xxx);
    u_xlat16_9.xyz = fma(u_xlat16_2.xyz, half3(u_xlat16_34), u_xlat16_9.xyz);
    u_xlat16_34 = half((-u_xlat32) + 1.0);
    u_xlat16_0 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;
    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;
    u_xlat16_6.xyz = fma(half3(u_xlat16_0), u_xlat16_7.xyz, u_xlat16_6.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    output.SV_Target0.xyz = fma(u_xlat16_9.xyz, u_xlat16_8.xyz, u_xlat16_4.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float2 u_xlat2;
    bool u_xlatb2;
    float3 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float3 u_xlat8;
    float3 u_xlat10;
    half3 u_xlat16_10;
    float u_xlat16;
    float2 u_xlat18;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat27;
    bool u_xlatb27;
    half u_xlat16_29;
    half u_xlat16_30;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * FGlobals._NormalRand.w;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat8.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat8.xyz = fma(u_xlat8.xyz, u_xlat2.xxx, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_1.x = dot((-u_xlat10.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat10.xyz)));
    u_xlat2.x = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat3.z = float(u_xlat16_1.x) * u_xlat2.x;
    u_xlat4.x = float(u_xlat16_1.z) * u_xlat2.x;
    u_xlat3.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat4.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat3.xyz = u_xlat3.xyz + (-u_xlat4.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * float3(FGlobals._NormalDiff);
    u_xlat3.xyz = fma(u_xlat3.xyz, u_xlat0.xxx, float3(u_xlat16_1.xyz));
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb2 = u_xlat0.x<0.00499999989;
    u_xlat27 = u_xlat0.x * 8.29800034;
    u_xlat16_1.x = (u_xlatb2) ? half(0.0) : half(u_xlat27);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat3.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_5.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_5.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_5.x, half(1.0));
    u_xlat16_5.x = u_xlat16_5.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_29 = half(u_xlat0.x * u_xlat2.x);
    u_xlat0.x = fma(u_xlat0.x, u_xlat0.x, 1.5);
    u_xlat16_29 = fma((-u_xlat16_29), half(0.280000001), half(1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(u_xlat16_29);
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat10.xyz);
    u_xlat10.x = clamp(u_xlat10.x, 0.0f, 1.0f);
    u_xlat16_29 = half((-u_xlat10.x) + 1.0);
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat10.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat18.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat18.xy = trunc(u_xlat18.xy);
    u_xlat10.x = u_xlat18.x + u_xlat10.x;
    u_xlat10.x = fma(u_xlat18.y, float(FGlobals._AlbedoTileSplitU), u_xlat10.x);
    u_xlat18.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat18.xy));
    u_xlat16_6.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat10.x = u_xlat10.x / float(u_xlat16_6.x);
    u_xlatb27 = u_xlat10.x>=(-u_xlat10.x);
    u_xlat10.x = fract(abs(u_xlat10.x));
    u_xlat10.x = (u_xlatb27) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat4.x = float(u_xlat16_6.x) * u_xlat10.x;
    u_xlat10.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat4.y = (-u_xlat10.x);
    u_xlat10.xy = u_xlat18.xy + u_xlat4.xy;
    u_xlat10.xy = u_xlat10.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_10.xyz = _MainTex.sample(sampler_MainTex, u_xlat10.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = fma(u_xlat16_4.xyz, u_xlat16_10.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_4.xyz;
    u_xlat16_6.xyz = fma(half3(FGlobals._Metallic), u_xlat16_6.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_30 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_7.x = (-u_xlat16_30) + FGlobals._Smoothness;
    u_xlat16_7.x = u_xlat16_7.x + half(1.0);
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0h, 1.0h);
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xxx;
    u_xlat16_7.xyz = fma(half3(u_xlat16_29), u_xlat16_7.xyz, u_xlat16_6.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat8.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat27 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat8.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0f, 1.0f);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat8.x = u_xlat8.x * u_xlat8.x;
    u_xlat24 = max(u_xlat27, 0.319999993);
    u_xlat0.x = u_xlat0.x * u_xlat24;
    u_xlat24 = fma(u_xlat2.x, u_xlat2.x, -1.0);
    u_xlat8.x = fma(u_xlat8.x, u_xlat24, 1.00001001);
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat0.xyw = float3(u_xlat16_6.xyz) * u_xlat0.xxx;
    u_xlat0.xyw = fma(float3(u_xlat16_10.xyz), float3(u_xlat16_30), u_xlat0.xyw);
    u_xlat0.xyw = u_xlat0.xyw * float3(FGlobals._LightColor0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyw, float3(u_xlat16), float3(u_xlat16_5.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float2 u_xlat2;
    bool u_xlatb2;
    float3 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float3 u_xlat8;
    float3 u_xlat10;
    half3 u_xlat16_10;
    float u_xlat16;
    float2 u_xlat18;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat27;
    bool u_xlatb27;
    half u_xlat16_29;
    half u_xlat16_30;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * FGlobals._NormalRand.w;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat8.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat8.xyz = fma(u_xlat8.xyz, u_xlat2.xxx, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_1.x = dot((-u_xlat10.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat10.xyz)));
    u_xlat2.x = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat3.z = float(u_xlat16_1.x) * u_xlat2.x;
    u_xlat4.x = float(u_xlat16_1.z) * u_xlat2.x;
    u_xlat3.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat4.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat3.xyz = u_xlat3.xyz + (-u_xlat4.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * float3(FGlobals._NormalDiff);
    u_xlat3.xyz = fma(u_xlat3.xyz, u_xlat0.xxx, float3(u_xlat16_1.xyz));
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb2 = u_xlat0.x<0.00499999989;
    u_xlat27 = u_xlat0.x * 8.29800034;
    u_xlat16_1.x = (u_xlatb2) ? half(0.0) : half(u_xlat27);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat3.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_5.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_5.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_5.x, half(1.0));
    u_xlat16_5.x = u_xlat16_5.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_29 = half(u_xlat0.x * u_xlat2.x);
    u_xlat0.x = fma(u_xlat0.x, u_xlat0.x, 1.5);
    u_xlat16_29 = fma((-u_xlat16_29), half(0.280000001), half(1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(u_xlat16_29);
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat10.xyz);
    u_xlat10.x = clamp(u_xlat10.x, 0.0f, 1.0f);
    u_xlat16_29 = half((-u_xlat10.x) + 1.0);
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat10.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat18.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat18.xy = trunc(u_xlat18.xy);
    u_xlat10.x = u_xlat18.x + u_xlat10.x;
    u_xlat10.x = fma(u_xlat18.y, float(FGlobals._AlbedoTileSplitU), u_xlat10.x);
    u_xlat18.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat18.xy));
    u_xlat16_6.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat10.x = u_xlat10.x / float(u_xlat16_6.x);
    u_xlatb27 = u_xlat10.x>=(-u_xlat10.x);
    u_xlat10.x = fract(abs(u_xlat10.x));
    u_xlat10.x = (u_xlatb27) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat4.x = float(u_xlat16_6.x) * u_xlat10.x;
    u_xlat10.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat4.y = (-u_xlat10.x);
    u_xlat10.xy = u_xlat18.xy + u_xlat4.xy;
    u_xlat10.xy = u_xlat10.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_10.xyz = _MainTex.sample(sampler_MainTex, u_xlat10.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = fma(u_xlat16_4.xyz, u_xlat16_10.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_4.xyz;
    u_xlat16_6.xyz = fma(half3(FGlobals._Metallic), u_xlat16_6.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_30 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_7.x = (-u_xlat16_30) + FGlobals._Smoothness;
    u_xlat16_7.x = u_xlat16_7.x + half(1.0);
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0h, 1.0h);
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xxx;
    u_xlat16_7.xyz = fma(half3(u_xlat16_29), u_xlat16_7.xyz, u_xlat16_6.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat8.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat27 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat8.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0f, 1.0f);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat8.x = u_xlat8.x * u_xlat8.x;
    u_xlat24 = max(u_xlat27, 0.319999993);
    u_xlat0.x = u_xlat0.x * u_xlat24;
    u_xlat24 = fma(u_xlat2.x, u_xlat2.x, -1.0);
    u_xlat8.x = fma(u_xlat8.x, u_xlat24, 1.00001001);
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat0.xyw = float3(u_xlat16_6.xyz) * u_xlat0.xxx;
    u_xlat0.xyw = fma(float3(u_xlat16_10.xyz), float3(u_xlat16_30), u_xlat0.xyw);
    u_xlat0.xyw = u_xlat0.xyw * float3(FGlobals._LightColor0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyw, float3(u_xlat16), float3(u_xlat16_5.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float2 u_xlat2;
    bool u_xlatb2;
    float3 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float3 u_xlat8;
    float3 u_xlat10;
    half3 u_xlat16_10;
    float u_xlat16;
    float2 u_xlat18;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat27;
    bool u_xlatb27;
    half u_xlat16_29;
    half u_xlat16_30;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * FGlobals._NormalRand.w;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat8.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat8.xyz = fma(u_xlat8.xyz, u_xlat2.xxx, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_1.x = dot((-u_xlat10.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat10.xyz)));
    u_xlat2.x = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat3.z = float(u_xlat16_1.x) * u_xlat2.x;
    u_xlat4.x = float(u_xlat16_1.z) * u_xlat2.x;
    u_xlat3.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat4.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat3.xyz = u_xlat3.xyz + (-u_xlat4.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * float3(FGlobals._NormalDiff);
    u_xlat3.xyz = fma(u_xlat3.xyz, u_xlat0.xxx, float3(u_xlat16_1.xyz));
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb2 = u_xlat0.x<0.00499999989;
    u_xlat27 = u_xlat0.x * 8.29800034;
    u_xlat16_1.x = (u_xlatb2) ? half(0.0) : half(u_xlat27);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat3.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_5.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_5.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_5.x, half(1.0));
    u_xlat16_5.x = u_xlat16_5.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_29 = half(u_xlat0.x * u_xlat2.x);
    u_xlat0.x = fma(u_xlat0.x, u_xlat0.x, 1.5);
    u_xlat16_29 = fma((-u_xlat16_29), half(0.280000001), half(1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(u_xlat16_29);
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat10.xyz);
    u_xlat10.x = clamp(u_xlat10.x, 0.0f, 1.0f);
    u_xlat16_29 = half((-u_xlat10.x) + 1.0);
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat10.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat18.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat18.xy = trunc(u_xlat18.xy);
    u_xlat10.x = u_xlat18.x + u_xlat10.x;
    u_xlat10.x = fma(u_xlat18.y, float(FGlobals._AlbedoTileSplitU), u_xlat10.x);
    u_xlat18.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat18.xy));
    u_xlat16_6.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat10.x = u_xlat10.x / float(u_xlat16_6.x);
    u_xlatb27 = u_xlat10.x>=(-u_xlat10.x);
    u_xlat10.x = fract(abs(u_xlat10.x));
    u_xlat10.x = (u_xlatb27) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat4.x = float(u_xlat16_6.x) * u_xlat10.x;
    u_xlat10.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat4.y = (-u_xlat10.x);
    u_xlat10.xy = u_xlat18.xy + u_xlat4.xy;
    u_xlat10.xy = u_xlat10.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_10.xyz = _MainTex.sample(sampler_MainTex, u_xlat10.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = fma(u_xlat16_4.xyz, u_xlat16_10.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_4.xyz;
    u_xlat16_6.xyz = fma(half3(FGlobals._Metallic), u_xlat16_6.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_30 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_7.x = (-u_xlat16_30) + FGlobals._Smoothness;
    u_xlat16_7.x = u_xlat16_7.x + half(1.0);
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0h, 1.0h);
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xxx;
    u_xlat16_7.xyz = fma(half3(u_xlat16_29), u_xlat16_7.xyz, u_xlat16_6.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat8.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat27 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat8.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0f, 1.0f);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat8.x = u_xlat8.x * u_xlat8.x;
    u_xlat24 = max(u_xlat27, 0.319999993);
    u_xlat0.x = u_xlat0.x * u_xlat24;
    u_xlat24 = fma(u_xlat2.x, u_xlat2.x, -1.0);
    u_xlat8.x = fma(u_xlat8.x, u_xlat24, 1.00001001);
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat0.xyw = float3(u_xlat16_6.xyz) * u_xlat0.xxx;
    u_xlat0.xyw = fma(float3(u_xlat16_10.xyz), float3(u_xlat16_30), u_xlat0.xyw);
    u_xlat0.xyw = u_xlat0.xyw * float3(FGlobals._LightColor0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyw, float3(u_xlat16), float3(u_xlat16_5.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat24 = input.TEXCOORD4;
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat24), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float2 u_xlat2;
    bool u_xlatb2;
    float3 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float3 u_xlat8;
    float3 u_xlat10;
    half3 u_xlat16_10;
    float u_xlat16;
    float2 u_xlat18;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat27;
    bool u_xlatb27;
    half u_xlat16_29;
    half u_xlat16_30;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * FGlobals._NormalRand.w;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat8.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat8.xyz = fma(u_xlat8.xyz, u_xlat2.xxx, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_1.x = dot((-u_xlat10.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat10.xyz)));
    u_xlat2.x = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat3.z = float(u_xlat16_1.x) * u_xlat2.x;
    u_xlat4.x = float(u_xlat16_1.z) * u_xlat2.x;
    u_xlat3.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat4.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat3.xyz = u_xlat3.xyz + (-u_xlat4.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * float3(FGlobals._NormalDiff);
    u_xlat3.xyz = fma(u_xlat3.xyz, u_xlat0.xxx, float3(u_xlat16_1.xyz));
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb2 = u_xlat0.x<0.00499999989;
    u_xlat27 = u_xlat0.x * 8.29800034;
    u_xlat16_1.x = (u_xlatb2) ? half(0.0) : half(u_xlat27);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat3.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_5.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_5.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_5.x, half(1.0));
    u_xlat16_5.x = u_xlat16_5.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_29 = half(u_xlat0.x * u_xlat2.x);
    u_xlat0.x = fma(u_xlat0.x, u_xlat0.x, 1.5);
    u_xlat16_29 = fma((-u_xlat16_29), half(0.280000001), half(1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(u_xlat16_29);
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat10.xyz);
    u_xlat10.x = clamp(u_xlat10.x, 0.0f, 1.0f);
    u_xlat16_29 = half((-u_xlat10.x) + 1.0);
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat10.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat18.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat18.xy = trunc(u_xlat18.xy);
    u_xlat10.x = u_xlat18.x + u_xlat10.x;
    u_xlat10.x = fma(u_xlat18.y, float(FGlobals._AlbedoTileSplitU), u_xlat10.x);
    u_xlat18.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat18.xy));
    u_xlat16_6.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat10.x = u_xlat10.x / float(u_xlat16_6.x);
    u_xlatb27 = u_xlat10.x>=(-u_xlat10.x);
    u_xlat10.x = fract(abs(u_xlat10.x));
    u_xlat10.x = (u_xlatb27) ? u_xlat10.x : (-u_xlat10.x);
    u_xlat4.x = float(u_xlat16_6.x) * u_xlat10.x;
    u_xlat10.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat4.y = (-u_xlat10.x);
    u_xlat10.xy = u_xlat18.xy + u_xlat4.xy;
    u_xlat10.xy = u_xlat10.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_10.xyz = _MainTex.sample(sampler_MainTex, u_xlat10.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = fma(u_xlat16_4.xyz, u_xlat16_10.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_4.xyz;
    u_xlat16_6.xyz = fma(half3(FGlobals._Metallic), u_xlat16_6.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_30 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_7.x = (-u_xlat16_30) + FGlobals._Smoothness;
    u_xlat16_7.x = u_xlat16_7.x + half(1.0);
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0h, 1.0h);
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xxx;
    u_xlat16_7.xyz = fma(half3(u_xlat16_29), u_xlat16_7.xyz, u_xlat16_6.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat8.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat27 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat8.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0f, 1.0f);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat8.xyz);
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat8.x = u_xlat8.x * u_xlat8.x;
    u_xlat24 = max(u_xlat27, 0.319999993);
    u_xlat0.x = u_xlat0.x * u_xlat24;
    u_xlat24 = fma(u_xlat2.x, u_xlat2.x, -1.0);
    u_xlat8.x = fma(u_xlat8.x, u_xlat24, 1.00001001);
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat0.xyw = float3(u_xlat16_6.xyz) * u_xlat0.xxx;
    u_xlat0.xyw = fma(float3(u_xlat16_10.xyz), float3(u_xlat16_30), u_xlat0.xyw);
    u_xlat0.xyw = u_xlat0.xyw * float3(FGlobals._LightColor0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyw, float3(u_xlat16), float3(u_xlat16_5.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat24 = input.TEXCOORD4;
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat24), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    float2 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    float2 u_xlat11;
    bool u_xlatb24;
    float u_xlat33;
    bool u_xlatb33;
    half u_xlat16_34;
    float u_xlat35;
    half u_xlat16_36;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat11.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat11.xy = trunc(u_xlat11.xy);
    u_xlat0.x = u_xlat11.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat11.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat11.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat11.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb33 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb33) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat11.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * half3(FGlobals._Occlusion);
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_34 = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_34 = u_xlat16_34 + u_xlat16_34;
    u_xlat16_3.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_34)), (-u_xlat0.xyz)));
    u_xlat33 = dot(u_xlat16_3.zxy, (-u_xlat16_3.xyz));
    u_xlatb33 = u_xlat33<9.99999975e-06;
    u_xlat33 = (u_xlatb33) ? float(u_xlat16_3.z) : (-float(u_xlat16_3.z));
    u_xlat2.z = u_xlat33 * float(u_xlat16_3.x);
    u_xlat4.x = u_xlat33 * float(u_xlat16_3.z);
    u_xlat2.xy = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.yz);
    u_xlat4.yz = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.xy);
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat2.xyz = float3(u_xlat33) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat33 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat33 = sin(u_xlat33);
    u_xlat33 = u_xlat33 * FGlobals._NormalRand.w;
    u_xlat33 = fract(u_xlat33);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat33), float3(u_xlat16_3.xyz));
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat2.xyz = float3(u_xlat33) * u_xlat2.xyz;
    u_xlat4.z = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb33 = u_xlat4.z<0.00499999989;
    u_xlat35 = u_xlat4.z * 8.29800034;
    u_xlat16_34 = (u_xlatb33) ? half(0.0) : half(u_xlat35);
    u_xlat16_2 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_34)));
    u_xlat16_34 = u_xlat16_2.w + half(-1.0);
    u_xlat16_34 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_34, half(1.0));
    u_xlat16_34 = u_xlat16_34 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat16_2.xyz * half3(u_xlat16_34);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(FGlobals._Occlusion);
    u_xlat33 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat33 = floor(u_xlat33);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat33 = u_xlat33 + u_xlat2.x;
    u_xlat33 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat33);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_34 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat33 = u_xlat33 / float(u_xlat16_34);
    u_xlatb24 = u_xlat33>=(-u_xlat33);
    u_xlat33 = fract(abs(u_xlat33));
    u_xlat33 = (u_xlatb24) ? u_xlat33 : (-u_xlat33);
    u_xlat5.x = float(u_xlat16_34) * u_xlat33;
    u_xlat33 = u_xlat5.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat33 = floor(u_xlat33);
    u_xlat5.y = (-u_xlat33);
    u_xlat2.xy = u_xlat2.xy + u_xlat5.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_5.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = fma(u_xlat16_5.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_6.xyz = fma(half3(FGlobals._Metallic), u_xlat16_6.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_34 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_36 = (-u_xlat16_34) + FGlobals._Smoothness;
    u_xlat16_7.xyz = half3(u_xlat16_34) * u_xlat16_2.xyz;
    u_xlat16_34 = u_xlat16_36 + half(1.0);
    u_xlat16_34 = clamp(u_xlat16_34, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_34);
    u_xlat33 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat2.xyz = float3(u_xlat33) * input.TEXCOORD1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat35 = u_xlat33;
    u_xlat35 = clamp(u_xlat35, 0.0f, 1.0f);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = fma(u_xlat2.xyz, (-float3(u_xlat33)), u_xlat0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat16_9.xyz = half3(float3(u_xlat33) * float3(FGlobals._LightColor0.xyz));
    u_xlat0.x = dot(u_xlat0.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat4.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat4.xz).x;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_10.xyz = half3(fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_7.xyz)));
    u_xlat16_34 = half((-u_xlat35) + 1.0);
    u_xlat16_0.x = u_xlat16_34 * u_xlat16_34;
    u_xlat16_0.x = u_xlat16_34 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_34 * u_xlat16_0.x;
    u_xlat16_6.xyz = fma(u_xlat16_0.xxx, u_xlat16_8.xyz, u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_7.xyz, u_xlat16_3.xyz);
    output.SV_Target0.xyz = fma(u_xlat16_10.xyz, u_xlat16_9.xyz, u_xlat16_1.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float2 u_xlat7;
    half u_xlat16_8;
    float u_xlat9;
    float u_xlat16;
    float u_xlat21;
    bool u_xlatb21;
    half u_xlat16_22;
    float u_xlat23;
    half u_xlat16_25;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat7.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat7.xy = trunc(u_xlat7.xy);
    u_xlat0.x = u_xlat7.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat7.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat7.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb21 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb21) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat7.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * half3(FGlobals._Occlusion);
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat7.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat7.xy = trunc(u_xlat7.xy);
    u_xlat0.x = u_xlat7.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat7.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat7.xy));
    u_xlat16_22 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_22);
    u_xlatb21 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb21) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_22) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat7.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_2.xyz, u_xlat16_0.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_4.xyz = fma(half3(FGlobals._Metallic), u_xlat16_4.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_22 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_5.xyz = half3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat16_22 = (-u_xlat16_22) + FGlobals._Smoothness;
    u_xlat16_22 = u_xlat16_22 + half(1.0);
    u_xlat16_22 = clamp(u_xlat16_22, 0.0h, 1.0h);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + half3(u_xlat16_22);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = fma(u_xlat0.xyz, float3(u_xlat21), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat2.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0f, 1.0f);
    u_xlat21 = max(u_xlat21, 0.319999993);
    u_xlat23 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat3.x = fma(u_xlat23, u_xlat23, 1.5);
    u_xlat21 = u_xlat21 * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat9 = u_xlat23 * u_xlat23;
    u_xlat16 = fma(u_xlat9, u_xlat9, -1.0);
    u_xlat2.x = fma(u_xlat2.x, u_xlat16, 1.00001001);
    u_xlat21 = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat9 / u_xlat21;
    u_xlat16_22 = half(u_xlat23 * u_xlat9);
    u_xlat16_22 = fma((-u_xlat16_22), half(0.280000001), half(1.0));
    u_xlat21 = u_xlat21 + -9.99999975e-05;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat21 = min(u_xlat21, 100.0);
    u_xlat2.xyz = fma(float3(u_xlat21), float3(u_xlat16_4.xyz), float3(u_xlat16_5.xyz));
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._LightColor0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat21 = clamp(u_xlat21, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat16_25 = half((-u_xlat3.x) + 1.0);
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_4.xyz = fma(half3(u_xlat16_25), u_xlat16_6.xyz, u_xlat16_4.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat21), float3(u_xlat16_1.xyz));
    u_xlatb21 = u_xlat23<0.00499999989;
    u_xlat23 = u_xlat23 * 8.29800034;
    u_xlat16_1.x = (u_xlatb21) ? half(0.0) : half(u_xlat23);
    u_xlat16_8 = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
    u_xlat16_5.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_8)), (-u_xlat0.xyz)));
    u_xlat0.x = dot(u_xlat16_5.zxy, (-u_xlat16_5.xyz));
    u_xlatb0 = u_xlat0.x<9.99999975e-06;
    u_xlat0.x = (u_xlatb0) ? float(u_xlat16_5.z) : (-float(u_xlat16_5.z));
    u_xlat3.z = u_xlat0.x * float(u_xlat16_5.x);
    u_xlat0.x = u_xlat0.x * float(u_xlat16_5.z);
    u_xlat3.xy = (-float2(u_xlat16_5.xy)) * float2(u_xlat16_5.yz);
    u_xlat0.yz = (-float2(u_xlat16_5.xy)) * float2(u_xlat16_5.xy);
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * float3(FGlobals._NormalDiff);
    u_xlat21 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat21 = sin(u_xlat21);
    u_xlat21 = u_xlat21 * FGlobals._NormalRand.w;
    u_xlat21 = fract(u_xlat21);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), float3(u_xlat16_5.xyz));
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat0.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_22);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_4.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float2 u_xlat7;
    half u_xlat16_8;
    float u_xlat9;
    float u_xlat16;
    float u_xlat21;
    bool u_xlatb21;
    half u_xlat16_22;
    float u_xlat23;
    half u_xlat16_25;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat7.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat7.xy = trunc(u_xlat7.xy);
    u_xlat0.x = u_xlat7.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat7.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat7.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb21 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb21) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat7.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * half3(FGlobals._Occlusion);
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat7.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat7.xy = trunc(u_xlat7.xy);
    u_xlat0.x = u_xlat7.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat7.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat7.xy));
    u_xlat16_22 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_22);
    u_xlatb21 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb21) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_22) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat7.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_2.xyz, u_xlat16_0.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_4.xyz = fma(half3(FGlobals._Metallic), u_xlat16_4.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_22 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_5.xyz = half3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat16_22 = (-u_xlat16_22) + FGlobals._Smoothness;
    u_xlat16_22 = u_xlat16_22 + half(1.0);
    u_xlat16_22 = clamp(u_xlat16_22, 0.0h, 1.0h);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + half3(u_xlat16_22);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = fma(u_xlat0.xyz, float3(u_xlat21), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat2.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0f, 1.0f);
    u_xlat21 = max(u_xlat21, 0.319999993);
    u_xlat23 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat3.x = fma(u_xlat23, u_xlat23, 1.5);
    u_xlat21 = u_xlat21 * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat9 = u_xlat23 * u_xlat23;
    u_xlat16 = fma(u_xlat9, u_xlat9, -1.0);
    u_xlat2.x = fma(u_xlat2.x, u_xlat16, 1.00001001);
    u_xlat21 = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat9 / u_xlat21;
    u_xlat16_22 = half(u_xlat23 * u_xlat9);
    u_xlat16_22 = fma((-u_xlat16_22), half(0.280000001), half(1.0));
    u_xlat21 = u_xlat21 + -9.99999975e-05;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat21 = min(u_xlat21, 100.0);
    u_xlat2.xyz = fma(float3(u_xlat21), float3(u_xlat16_4.xyz), float3(u_xlat16_5.xyz));
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._LightColor0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat21 = clamp(u_xlat21, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat16_25 = half((-u_xlat3.x) + 1.0);
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_4.xyz = fma(half3(u_xlat16_25), u_xlat16_6.xyz, u_xlat16_4.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat21), float3(u_xlat16_1.xyz));
    u_xlatb21 = u_xlat23<0.00499999989;
    u_xlat23 = u_xlat23 * 8.29800034;
    u_xlat16_1.x = (u_xlatb21) ? half(0.0) : half(u_xlat23);
    u_xlat16_8 = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
    u_xlat16_5.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_8)), (-u_xlat0.xyz)));
    u_xlat0.x = dot(u_xlat16_5.zxy, (-u_xlat16_5.xyz));
    u_xlatb0 = u_xlat0.x<9.99999975e-06;
    u_xlat0.x = (u_xlatb0) ? float(u_xlat16_5.z) : (-float(u_xlat16_5.z));
    u_xlat3.z = u_xlat0.x * float(u_xlat16_5.x);
    u_xlat0.x = u_xlat0.x * float(u_xlat16_5.z);
    u_xlat3.xy = (-float2(u_xlat16_5.xy)) * float2(u_xlat16_5.yz);
    u_xlat0.yz = (-float2(u_xlat16_5.xy)) * float2(u_xlat16_5.xy);
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * float3(FGlobals._NormalDiff);
    u_xlat21 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat21 = sin(u_xlat21);
    u_xlat21 = u_xlat21 * FGlobals._NormalRand.w;
    u_xlat21 = fract(u_xlat21);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), float3(u_xlat16_5.xyz));
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat0.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_22);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_4.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    float2 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    float2 u_xlat11;
    bool u_xlatb24;
    float u_xlat33;
    bool u_xlatb33;
    half u_xlat16_34;
    float u_xlat35;
    half u_xlat16_36;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat11.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat11.xy = trunc(u_xlat11.xy);
    u_xlat0.x = u_xlat11.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat11.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat11.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat11.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb33 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb33) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat11.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * half3(FGlobals._Occlusion);
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_34 = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_34 = u_xlat16_34 + u_xlat16_34;
    u_xlat16_3.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_34)), (-u_xlat0.xyz)));
    u_xlat33 = dot(u_xlat16_3.zxy, (-u_xlat16_3.xyz));
    u_xlatb33 = u_xlat33<9.99999975e-06;
    u_xlat33 = (u_xlatb33) ? float(u_xlat16_3.z) : (-float(u_xlat16_3.z));
    u_xlat2.z = u_xlat33 * float(u_xlat16_3.x);
    u_xlat4.x = u_xlat33 * float(u_xlat16_3.z);
    u_xlat2.xy = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.yz);
    u_xlat4.yz = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.xy);
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat2.xyz = float3(u_xlat33) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat33 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat33 = sin(u_xlat33);
    u_xlat33 = u_xlat33 * FGlobals._NormalRand.w;
    u_xlat33 = fract(u_xlat33);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat33), float3(u_xlat16_3.xyz));
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat2.xyz = float3(u_xlat33) * u_xlat2.xyz;
    u_xlat4.z = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb33 = u_xlat4.z<0.00499999989;
    u_xlat35 = u_xlat4.z * 8.29800034;
    u_xlat16_34 = (u_xlatb33) ? half(0.0) : half(u_xlat35);
    u_xlat16_2 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_34)));
    u_xlat16_34 = u_xlat16_2.w + half(-1.0);
    u_xlat16_34 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_34, half(1.0));
    u_xlat16_34 = u_xlat16_34 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat16_2.xyz * half3(u_xlat16_34);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(FGlobals._Occlusion);
    u_xlat33 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat33 = floor(u_xlat33);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat33 = u_xlat33 + u_xlat2.x;
    u_xlat33 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat33);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_34 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat33 = u_xlat33 / float(u_xlat16_34);
    u_xlatb24 = u_xlat33>=(-u_xlat33);
    u_xlat33 = fract(abs(u_xlat33));
    u_xlat33 = (u_xlatb24) ? u_xlat33 : (-u_xlat33);
    u_xlat5.x = float(u_xlat16_34) * u_xlat33;
    u_xlat33 = u_xlat5.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat33 = floor(u_xlat33);
    u_xlat5.y = (-u_xlat33);
    u_xlat2.xy = u_xlat2.xy + u_xlat5.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_5.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = fma(u_xlat16_5.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_6.xyz = fma(half3(FGlobals._Metallic), u_xlat16_6.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_34 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_36 = (-u_xlat16_34) + FGlobals._Smoothness;
    u_xlat16_7.xyz = half3(u_xlat16_34) * u_xlat16_2.xyz;
    u_xlat16_34 = u_xlat16_36 + half(1.0);
    u_xlat16_34 = clamp(u_xlat16_34, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_34);
    u_xlat33 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat2.xyz = float3(u_xlat33) * input.TEXCOORD1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat35 = u_xlat33;
    u_xlat35 = clamp(u_xlat35, 0.0f, 1.0f);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = fma(u_xlat2.xyz, (-float3(u_xlat33)), u_xlat0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat16_9.xyz = half3(float3(u_xlat33) * float3(FGlobals._LightColor0.xyz));
    u_xlat0.x = dot(u_xlat0.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat4.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat4.xz).x;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_10.xyz = half3(fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_7.xyz)));
    u_xlat16_34 = half((-u_xlat35) + 1.0);
    u_xlat16_0.x = u_xlat16_34 * u_xlat16_34;
    u_xlat16_0.x = u_xlat16_34 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_34 * u_xlat16_0.x;
    u_xlat16_6.xyz = fma(u_xlat16_0.xxx, u_xlat16_8.xyz, u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_7.xyz, u_xlat16_3.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_10.xyz, u_xlat16_9.xyz, u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat33 = input.TEXCOORD4;
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat33), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler samplerunity_NHxRoughness [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_TransparencyLM [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    float2 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    float2 u_xlat10;
    bool u_xlatb22;
    float u_xlat30;
    bool u_xlatb30;
    half u_xlat16_31;
    float u_xlat32;
    half u_xlat16_33;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat10.xy = trunc(u_xlat10.xy);
    u_xlat0.x = u_xlat10.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat10.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat10.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat10.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb30 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb30) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat10.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * half3(FGlobals._Occlusion);
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_31 = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_3.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_31)), (-u_xlat0.xyz)));
    u_xlat30 = dot(u_xlat16_3.zxy, (-u_xlat16_3.xyz));
    u_xlatb30 = u_xlat30<9.99999975e-06;
    u_xlat30 = (u_xlatb30) ? float(u_xlat16_3.z) : (-float(u_xlat16_3.z));
    u_xlat2.z = u_xlat30 * float(u_xlat16_3.x);
    u_xlat4.x = u_xlat30 * float(u_xlat16_3.z);
    u_xlat2.xy = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.yz);
    u_xlat4.yz = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.xy);
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat30 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat30 = sin(u_xlat30);
    u_xlat30 = u_xlat30 * FGlobals._NormalRand.w;
    u_xlat30 = fract(u_xlat30);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat30), float3(u_xlat16_3.xyz));
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * u_xlat2.xyz;
    u_xlat4.z = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb30 = u_xlat4.z<0.00499999989;
    u_xlat32 = u_xlat4.z * 8.29800034;
    u_xlat16_31 = (u_xlatb30) ? half(0.0) : half(u_xlat32);
    u_xlat16_2 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_31)));
    u_xlat16_31 = u_xlat16_2.w + half(-1.0);
    u_xlat16_31 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_31, half(1.0));
    u_xlat16_31 = u_xlat16_31 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat16_2.xyz * half3(u_xlat16_31);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(FGlobals._Occlusion);
    u_xlat30 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat30 = floor(u_xlat30);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat30 = u_xlat30 + u_xlat2.x;
    u_xlat30 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat30);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_31 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat30 = u_xlat30 / float(u_xlat16_31);
    u_xlatb22 = u_xlat30>=(-u_xlat30);
    u_xlat30 = fract(abs(u_xlat30));
    u_xlat30 = (u_xlatb22) ? u_xlat30 : (-u_xlat30);
    u_xlat5.x = float(u_xlat16_31) * u_xlat30;
    u_xlat30 = u_xlat5.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat30 = floor(u_xlat30);
    u_xlat5.y = (-u_xlat30);
    u_xlat2.xy = u_xlat2.xy + u_xlat5.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_5.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = fma(u_xlat16_5.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_6.xyz = fma(half3(FGlobals._Metallic), u_xlat16_6.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_31 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_33 = (-u_xlat16_31) + FGlobals._Smoothness;
    u_xlat16_7.xyz = half3(u_xlat16_31) * u_xlat16_2.xyz;
    u_xlat16_31 = u_xlat16_33 + half(1.0);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_31);
    u_xlat30 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * input.TEXCOORD1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat32 = u_xlat30;
    u_xlat32 = clamp(u_xlat32, 0.0f, 1.0f);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = fma(u_xlat2.xyz, (-float3(u_xlat30)), u_xlat0.xyz);
    u_xlat30 = dot(u_xlat2.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat0.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat4.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat4.xz).x;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_9.xyz = half3(fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_7.xyz)));
    u_xlat16_31 = half((-u_xlat32) + 1.0);
    u_xlat16_0.x = u_xlat16_31 * u_xlat16_31;
    u_xlat16_0.x = u_xlat16_31 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_31 * u_xlat16_0.x;
    u_xlat16_6.xyz = fma(u_xlat16_0.xxx, u_xlat16_8.xyz, u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_7.xyz, u_xlat16_3.xyz);
    u_xlat16_2 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_31 = dot(u_xlat16_2, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_3.xyz = half3(u_xlat16_31) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = half3(float3(u_xlat30) * float3(u_xlat16_3.xyz));
    output.SV_Target0.xyz = fma(u_xlat16_9.xyz, u_xlat16_3.xyz, u_xlat16_1.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half4 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float2 u_xlat8;
    half u_xlat16_9;
    float u_xlat10;
    float u_xlat18;
    float u_xlat24;
    bool u_xlatb24;
    half u_xlat16_25;
    float u_xlat26;
    half u_xlat16_28;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * half3(FGlobals._Occlusion);
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat8.xy));
    u_xlat16_25 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_25);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_25) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_2.xyz, u_xlat16_0.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_4.xyz = fma(half3(FGlobals._Metallic), u_xlat16_4.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_25 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_5.xyz = half3(u_xlat16_25) * u_xlat16_3.xyz;
    u_xlat16_25 = (-u_xlat16_25) + FGlobals._Smoothness;
    u_xlat16_25 = u_xlat16_25 + half(1.0);
    u_xlat16_25 = clamp(u_xlat16_25, 0.0h, 1.0h);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + half3(u_xlat16_25);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat2.xyz = fma(u_xlat0.xyz, float3(u_xlat24), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat2.xyz = float3(u_xlat24) * u_xlat2.xyz;
    u_xlat24 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat2.xyz);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat24 = max(u_xlat24, 0.319999993);
    u_xlat26 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat3.x = fma(u_xlat26, u_xlat26, 1.5);
    u_xlat24 = u_xlat24 * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat10 = u_xlat26 * u_xlat26;
    u_xlat18 = fma(u_xlat10, u_xlat10, -1.0);
    u_xlat2.x = fma(u_xlat2.x, u_xlat18, 1.00001001);
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat24 = u_xlat10 / u_xlat24;
    u_xlat16_25 = half(u_xlat26 * u_xlat10);
    u_xlat16_25 = fma((-u_xlat16_25), half(0.280000001), half(1.0));
    u_xlat24 = u_xlat24 + -9.99999975e-05;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = min(u_xlat24, 100.0);
    u_xlat2.xyz = fma(float3(u_xlat24), float3(u_xlat16_4.xyz), float3(u_xlat16_5.xyz));
    u_xlat16_5 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_28 = dot(u_xlat16_5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_7.xyz = half3(u_xlat16_28) * FGlobals._LightColor0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(u_xlat16_7.xyz);
    u_xlat24 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat16_28 = half((-u_xlat3.x) + 1.0);
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_4.xyz = fma(half3(u_xlat16_28), u_xlat16_6.xyz, u_xlat16_4.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat24), float3(u_xlat16_1.xyz));
    u_xlatb24 = u_xlat26<0.00499999989;
    u_xlat26 = u_xlat26 * 8.29800034;
    u_xlat16_1.x = (u_xlatb24) ? half(0.0) : half(u_xlat26);
    u_xlat16_9 = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_6.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_9)), (-u_xlat0.xyz)));
    u_xlat0.x = dot(u_xlat16_6.zxy, (-u_xlat16_6.xyz));
    u_xlatb0 = u_xlat0.x<9.99999975e-06;
    u_xlat0.x = (u_xlatb0) ? float(u_xlat16_6.z) : (-float(u_xlat16_6.z));
    u_xlat3.z = u_xlat0.x * float(u_xlat16_6.x);
    u_xlat0.x = u_xlat0.x * float(u_xlat16_6.z);
    u_xlat3.xy = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.yz);
    u_xlat0.yz = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.xy);
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * float3(FGlobals._NormalDiff);
    u_xlat24 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat24 = sin(u_xlat24);
    u_xlat24 = u_xlat24 * FGlobals._NormalRand.w;
    u_xlat24 = fract(u_xlat24);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), float3(u_xlat16_6.xyz));
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat0.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_25);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_4.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half4 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float2 u_xlat8;
    half u_xlat16_9;
    float u_xlat10;
    float u_xlat18;
    float u_xlat24;
    bool u_xlatb24;
    half u_xlat16_25;
    float u_xlat26;
    half u_xlat16_28;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * half3(FGlobals._Occlusion);
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat8.xy));
    u_xlat16_25 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_25);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_25) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_2.xyz, u_xlat16_0.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_4.xyz = fma(half3(FGlobals._Metallic), u_xlat16_4.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_25 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_5.xyz = half3(u_xlat16_25) * u_xlat16_3.xyz;
    u_xlat16_25 = (-u_xlat16_25) + FGlobals._Smoothness;
    u_xlat16_25 = u_xlat16_25 + half(1.0);
    u_xlat16_25 = clamp(u_xlat16_25, 0.0h, 1.0h);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + half3(u_xlat16_25);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat2.xyz = fma(u_xlat0.xyz, float3(u_xlat24), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat2.xyz = float3(u_xlat24) * u_xlat2.xyz;
    u_xlat24 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat2.xyz);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat24 = max(u_xlat24, 0.319999993);
    u_xlat26 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat3.x = fma(u_xlat26, u_xlat26, 1.5);
    u_xlat24 = u_xlat24 * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat10 = u_xlat26 * u_xlat26;
    u_xlat18 = fma(u_xlat10, u_xlat10, -1.0);
    u_xlat2.x = fma(u_xlat2.x, u_xlat18, 1.00001001);
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat24 = u_xlat10 / u_xlat24;
    u_xlat16_25 = half(u_xlat26 * u_xlat10);
    u_xlat16_25 = fma((-u_xlat16_25), half(0.280000001), half(1.0));
    u_xlat24 = u_xlat24 + -9.99999975e-05;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = min(u_xlat24, 100.0);
    u_xlat2.xyz = fma(float3(u_xlat24), float3(u_xlat16_4.xyz), float3(u_xlat16_5.xyz));
    u_xlat16_5 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_28 = dot(u_xlat16_5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_7.xyz = half3(u_xlat16_28) * FGlobals._LightColor0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(u_xlat16_7.xyz);
    u_xlat24 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat16_28 = half((-u_xlat3.x) + 1.0);
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_4.xyz = fma(half3(u_xlat16_28), u_xlat16_6.xyz, u_xlat16_4.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat24), float3(u_xlat16_1.xyz));
    u_xlatb24 = u_xlat26<0.00499999989;
    u_xlat26 = u_xlat26 * 8.29800034;
    u_xlat16_1.x = (u_xlatb24) ? half(0.0) : half(u_xlat26);
    u_xlat16_9 = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_6.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_9)), (-u_xlat0.xyz)));
    u_xlat0.x = dot(u_xlat16_6.zxy, (-u_xlat16_6.xyz));
    u_xlatb0 = u_xlat0.x<9.99999975e-06;
    u_xlat0.x = (u_xlatb0) ? float(u_xlat16_6.z) : (-float(u_xlat16_6.z));
    u_xlat3.z = u_xlat0.x * float(u_xlat16_6.x);
    u_xlat0.x = u_xlat0.x * float(u_xlat16_6.z);
    u_xlat3.xy = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.yz);
    u_xlat0.yz = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.xy);
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * float3(FGlobals._NormalDiff);
    u_xlat24 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat24 = sin(u_xlat24);
    u_xlat24 = u_xlat24 * FGlobals._NormalRand.w;
    u_xlat24 = fract(u_xlat24);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), float3(u_xlat16_6.xyz));
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat0.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_25);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_4.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float2 u_xlat7;
    half u_xlat16_8;
    float u_xlat9;
    float u_xlat16;
    float u_xlat21;
    bool u_xlatb21;
    half u_xlat16_22;
    float u_xlat23;
    half u_xlat16_25;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat7.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat7.xy = trunc(u_xlat7.xy);
    u_xlat0.x = u_xlat7.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat7.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat7.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb21 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb21) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat7.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * half3(FGlobals._Occlusion);
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat7.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat7.xy = trunc(u_xlat7.xy);
    u_xlat0.x = u_xlat7.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat7.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat7.xy));
    u_xlat16_22 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_22);
    u_xlatb21 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb21) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_22) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat7.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_2.xyz, u_xlat16_0.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_4.xyz = fma(half3(FGlobals._Metallic), u_xlat16_4.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_22 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_5.xyz = half3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat16_22 = (-u_xlat16_22) + FGlobals._Smoothness;
    u_xlat16_22 = u_xlat16_22 + half(1.0);
    u_xlat16_22 = clamp(u_xlat16_22, 0.0h, 1.0h);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + half3(u_xlat16_22);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = fma(u_xlat0.xyz, float3(u_xlat21), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat2.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0f, 1.0f);
    u_xlat21 = max(u_xlat21, 0.319999993);
    u_xlat23 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat3.x = fma(u_xlat23, u_xlat23, 1.5);
    u_xlat21 = u_xlat21 * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat9 = u_xlat23 * u_xlat23;
    u_xlat16 = fma(u_xlat9, u_xlat9, -1.0);
    u_xlat2.x = fma(u_xlat2.x, u_xlat16, 1.00001001);
    u_xlat21 = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat9 / u_xlat21;
    u_xlat16_22 = half(u_xlat23 * u_xlat9);
    u_xlat16_22 = fma((-u_xlat16_22), half(0.280000001), half(1.0));
    u_xlat21 = u_xlat21 + -9.99999975e-05;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat21 = min(u_xlat21, 100.0);
    u_xlat2.xyz = fma(float3(u_xlat21), float3(u_xlat16_4.xyz), float3(u_xlat16_5.xyz));
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._LightColor0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat21 = clamp(u_xlat21, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat16_25 = half((-u_xlat3.x) + 1.0);
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_4.xyz = fma(half3(u_xlat16_25), u_xlat16_6.xyz, u_xlat16_4.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat21), float3(u_xlat16_1.xyz));
    u_xlatb21 = u_xlat23<0.00499999989;
    u_xlat23 = u_xlat23 * 8.29800034;
    u_xlat16_1.x = (u_xlatb21) ? half(0.0) : half(u_xlat23);
    u_xlat16_8 = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
    u_xlat16_5.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_8)), (-u_xlat0.xyz)));
    u_xlat0.x = dot(u_xlat16_5.zxy, (-u_xlat16_5.xyz));
    u_xlatb0 = u_xlat0.x<9.99999975e-06;
    u_xlat0.x = (u_xlatb0) ? float(u_xlat16_5.z) : (-float(u_xlat16_5.z));
    u_xlat3.z = u_xlat0.x * float(u_xlat16_5.x);
    u_xlat0.x = u_xlat0.x * float(u_xlat16_5.z);
    u_xlat3.xy = (-float2(u_xlat16_5.xy)) * float2(u_xlat16_5.yz);
    u_xlat0.yz = (-float2(u_xlat16_5.xy)) * float2(u_xlat16_5.xy);
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * float3(FGlobals._NormalDiff);
    u_xlat21 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat21 = sin(u_xlat21);
    u_xlat21 = u_xlat21 * FGlobals._NormalRand.w;
    u_xlat21 = fract(u_xlat21);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), float3(u_xlat16_5.xyz));
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat0.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_22);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_4.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat21 = input.TEXCOORD4;
    u_xlat21 = clamp(u_xlat21, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat21), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float2 u_xlat7;
    half u_xlat16_8;
    float u_xlat9;
    float u_xlat16;
    float u_xlat21;
    bool u_xlatb21;
    half u_xlat16_22;
    float u_xlat23;
    half u_xlat16_25;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat7.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat7.xy = trunc(u_xlat7.xy);
    u_xlat0.x = u_xlat7.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat7.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat7.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb21 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb21) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat7.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * half3(FGlobals._Occlusion);
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat7.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat7.xy = trunc(u_xlat7.xy);
    u_xlat0.x = u_xlat7.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat7.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat7.xy));
    u_xlat16_22 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_22);
    u_xlatb21 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb21) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_22) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat7.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_2.xyz, u_xlat16_0.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_4.xyz = fma(half3(FGlobals._Metallic), u_xlat16_4.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_22 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_5.xyz = half3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat16_22 = (-u_xlat16_22) + FGlobals._Smoothness;
    u_xlat16_22 = u_xlat16_22 + half(1.0);
    u_xlat16_22 = clamp(u_xlat16_22, 0.0h, 1.0h);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + half3(u_xlat16_22);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = fma(u_xlat0.xyz, float3(u_xlat21), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat2.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0f, 1.0f);
    u_xlat21 = max(u_xlat21, 0.319999993);
    u_xlat23 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat3.x = fma(u_xlat23, u_xlat23, 1.5);
    u_xlat21 = u_xlat21 * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat9 = u_xlat23 * u_xlat23;
    u_xlat16 = fma(u_xlat9, u_xlat9, -1.0);
    u_xlat2.x = fma(u_xlat2.x, u_xlat16, 1.00001001);
    u_xlat21 = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat9 / u_xlat21;
    u_xlat16_22 = half(u_xlat23 * u_xlat9);
    u_xlat16_22 = fma((-u_xlat16_22), half(0.280000001), half(1.0));
    u_xlat21 = u_xlat21 + -9.99999975e-05;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat21 = min(u_xlat21, 100.0);
    u_xlat2.xyz = fma(float3(u_xlat21), float3(u_xlat16_4.xyz), float3(u_xlat16_5.xyz));
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._LightColor0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat21 = clamp(u_xlat21, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat16_25 = half((-u_xlat3.x) + 1.0);
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_4.xyz = fma(half3(u_xlat16_25), u_xlat16_6.xyz, u_xlat16_4.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat21), float3(u_xlat16_1.xyz));
    u_xlatb21 = u_xlat23<0.00499999989;
    u_xlat23 = u_xlat23 * 8.29800034;
    u_xlat16_1.x = (u_xlatb21) ? half(0.0) : half(u_xlat23);
    u_xlat16_8 = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
    u_xlat16_5.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_8)), (-u_xlat0.xyz)));
    u_xlat0.x = dot(u_xlat16_5.zxy, (-u_xlat16_5.xyz));
    u_xlatb0 = u_xlat0.x<9.99999975e-06;
    u_xlat0.x = (u_xlatb0) ? float(u_xlat16_5.z) : (-float(u_xlat16_5.z));
    u_xlat3.z = u_xlat0.x * float(u_xlat16_5.x);
    u_xlat0.x = u_xlat0.x * float(u_xlat16_5.z);
    u_xlat3.xy = (-float2(u_xlat16_5.xy)) * float2(u_xlat16_5.yz);
    u_xlat0.yz = (-float2(u_xlat16_5.xy)) * float2(u_xlat16_5.xy);
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * float3(FGlobals._NormalDiff);
    u_xlat21 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat21 = sin(u_xlat21);
    u_xlat21 = u_xlat21 * FGlobals._NormalRand.w;
    u_xlat21 = fract(u_xlat21);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), float3(u_xlat16_5.xyz));
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat0.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_22);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_4.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat21 = input.TEXCOORD4;
    u_xlat21 = clamp(u_xlat21, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat21), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler samplerunity_NHxRoughness [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_TransparencyLM [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    float2 u_xlat11;
    bool u_xlatb24;
    float u_xlat33;
    bool u_xlatb33;
    float u_xlat35;
    half u_xlat16_37;
    half u_xlat16_39;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat11.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat11.xy = trunc(u_xlat11.xy);
    u_xlat0.x = u_xlat11.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat11.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat11.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat11.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb33 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb33) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat11.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_1.x = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat0.xyz)));
    u_xlat33 = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb33 = u_xlat33<9.99999975e-06;
    u_xlat33 = (u_xlatb33) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat2.z = u_xlat33 * float(u_xlat16_1.x);
    u_xlat3.x = u_xlat33 * float(u_xlat16_1.z);
    u_xlat2.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat3.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat2.xyz = float3(u_xlat33) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat33 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat33 = sin(u_xlat33);
    u_xlat33 = u_xlat33 * FGlobals._NormalRand.w;
    u_xlat33 = fract(u_xlat33);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat33), float3(u_xlat16_1.xyz));
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat2.xyz = float3(u_xlat33) * u_xlat2.xyz;
    u_xlat3.z = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb33 = u_xlat3.z<0.00499999989;
    u_xlat35 = u_xlat3.z * 8.29800034;
    u_xlat16_1.x = (u_xlatb33) ? half(0.0) : half(u_xlat35);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_4.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_4.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_4.x, half(1.0));
    u_xlat16_4.x = u_xlat16_4.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(FGlobals._Occlusion);
    u_xlat33 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat33 = floor(u_xlat33);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat33 = u_xlat33 + u_xlat2.x;
    u_xlat33 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat33);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_37 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat33 = u_xlat33 / float(u_xlat16_37);
    u_xlatb24 = u_xlat33>=(-u_xlat33);
    u_xlat33 = fract(abs(u_xlat33));
    u_xlat33 = (u_xlatb24) ? u_xlat33 : (-u_xlat33);
    u_xlat5.x = float(u_xlat16_37) * u_xlat33;
    u_xlat33 = u_xlat5.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat33 = floor(u_xlat33);
    u_xlat5.y = (-u_xlat33);
    u_xlat2.xy = u_xlat2.xy + u_xlat5.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_5.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = fma(u_xlat16_5.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_6.xyz = fma(half3(FGlobals._Metallic), u_xlat16_6.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_37 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_39 = (-u_xlat16_37) + FGlobals._Smoothness;
    u_xlat16_7.xyz = u_xlat16_2.xyz * half3(u_xlat16_37);
    u_xlat16_37 = u_xlat16_39 + half(1.0);
    u_xlat16_37 = clamp(u_xlat16_37, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_37);
    u_xlat33 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat2.xyz = float3(u_xlat33) * input.TEXCOORD1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat35 = u_xlat33;
    u_xlat35 = clamp(u_xlat35, 0.0f, 1.0f);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = fma(u_xlat2.xyz, (-float3(u_xlat33)), u_xlat0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat16_9.xyz = half3(float3(u_xlat33) * float3(FGlobals._LightColor0.xyz));
    u_xlat0.x = dot(u_xlat0.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat3.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat3.xz).x;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_10.xyz = half3(fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_7.xyz)));
    u_xlat16_37 = half((-u_xlat35) + 1.0);
    u_xlat16_0.x = u_xlat16_37 * u_xlat16_37;
    u_xlat16_0.x = u_xlat16_37 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_37 * u_xlat16_0.x;
    u_xlat16_6.xyz = fma(u_xlat16_0.xxx, u_xlat16_8.xyz, u_xlat16_6.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_6.xyz = u_xlat16_6.xyz * half3(FGlobals._Occlusion);
    u_xlat16_4.xyz = fma(u_xlat16_6.xyz, u_xlat16_7.xyz, u_xlat16_4.xyz);
    output.SV_Target0.xyz = fma(u_xlat16_10.xyz, u_xlat16_9.xyz, u_xlat16_4.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float2 u_xlat2;
    bool u_xlatb2;
    float3 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    float3 u_xlat11;
    half3 u_xlat16_11;
    float3 u_xlat13;
    float2 u_xlat22;
    float u_xlat33;
    bool u_xlatb33;
    float u_xlat36;
    half u_xlat16_38;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat11.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat11.xy = trunc(u_xlat11.xy);
    u_xlat0.x = u_xlat11.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat11.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat11.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat11.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb33 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb33) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat11.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * FGlobals._NormalRand.w;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat11.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat13.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat11.xyz = fma(u_xlat11.xyz, u_xlat2.xxx, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_1.x = dot((-u_xlat13.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat13.xyz)));
    u_xlat2.x = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat3.z = float(u_xlat16_1.x) * u_xlat2.x;
    u_xlat4.x = float(u_xlat16_1.z) * u_xlat2.x;
    u_xlat3.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat4.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat3.xyz = u_xlat3.xyz + (-u_xlat4.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * float3(FGlobals._NormalDiff);
    u_xlat3.xyz = fma(u_xlat3.xyz, u_xlat0.xxx, float3(u_xlat16_1.xyz));
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb2 = u_xlat0.x<0.00499999989;
    u_xlat36 = u_xlat0.x * 8.29800034;
    u_xlat16_1.x = (u_xlatb2) ? half(0.0) : half(u_xlat36);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat3.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_5.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_5.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_5.x, half(1.0));
    u_xlat16_5.x = u_xlat16_5.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_38 = half(u_xlat0.x * u_xlat2.x);
    u_xlat0.x = fma(u_xlat0.x, u_xlat0.x, 1.5);
    u_xlat16_38 = fma((-u_xlat16_38), half(0.280000001), half(1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(u_xlat16_38);
    u_xlat3.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat3.x = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat11.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat3.x = max(u_xlat3.x, 0.319999993);
    u_xlat0.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
    u_xlat11.x = clamp(u_xlat11.x, 0.0f, 1.0f);
    u_xlat11.x = u_xlat11.x * u_xlat11.x;
    u_xlat22.x = fma(u_xlat2.x, u_xlat2.x, -1.0);
    u_xlat11.x = fma(u_xlat11.x, u_xlat22.x, 1.00001001);
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat11.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat22.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat22.xy = trunc(u_xlat22.xy);
    u_xlat11.x = u_xlat22.x + u_xlat11.x;
    u_xlat11.x = fma(u_xlat22.y, float(FGlobals._AlbedoTileSplitU), u_xlat11.x);
    u_xlat22.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat22.xy));
    u_xlat16_38 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat11.x = u_xlat11.x / float(u_xlat16_38);
    u_xlatb2 = u_xlat11.x>=(-u_xlat11.x);
    u_xlat11.x = fract(abs(u_xlat11.x));
    u_xlat11.x = (u_xlatb2) ? u_xlat11.x : (-u_xlat11.x);
    u_xlat4.x = float(u_xlat16_38) * u_xlat11.x;
    u_xlat11.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat4.y = (-u_xlat11.x);
    u_xlat11.xy = u_xlat22.xy + u_xlat4.xy;
    u_xlat11.xy = u_xlat11.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_11.xyz = _MainTex.sample(sampler_MainTex, u_xlat11.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_4.xyz;
    u_xlat16_7.xyz = fma(u_xlat16_4.xyz, u_xlat16_11.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_7.xyz = fma(half3(FGlobals._Metallic), u_xlat16_7.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_38 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_8.xyz = half3(u_xlat16_38) * u_xlat16_6.xyz;
    u_xlat16_38 = (-u_xlat16_38) + FGlobals._Smoothness;
    u_xlat16_38 = u_xlat16_38 + half(1.0);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0h, 1.0h);
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + half3(u_xlat16_38);
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_7.xyz), float3(u_xlat16_8.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(FGlobals._LightColor0.xyz);
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_4.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_10.xyz = u_xlat16_10.xyz * half3(FGlobals._Occlusion);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat33 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat13.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16_38 = half((-u_xlat2.x) + 1.0);
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_7.xyz = fma(half3(u_xlat16_38), u_xlat16_9.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat33), float3(u_xlat16_8.xyz));
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_7.xyz), u_xlat0.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float2 u_xlat2;
    bool u_xlatb2;
    float3 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    float3 u_xlat11;
    half3 u_xlat16_11;
    float3 u_xlat13;
    float2 u_xlat22;
    float u_xlat33;
    bool u_xlatb33;
    float u_xlat36;
    half u_xlat16_38;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat11.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat11.xy = trunc(u_xlat11.xy);
    u_xlat0.x = u_xlat11.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat11.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat11.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat11.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb33 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb33) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat11.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * FGlobals._NormalRand.w;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat11.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat13.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat11.xyz = fma(u_xlat11.xyz, u_xlat2.xxx, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_1.x = dot((-u_xlat13.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat13.xyz)));
    u_xlat2.x = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat3.z = float(u_xlat16_1.x) * u_xlat2.x;
    u_xlat4.x = float(u_xlat16_1.z) * u_xlat2.x;
    u_xlat3.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat4.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat3.xyz = u_xlat3.xyz + (-u_xlat4.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * float3(FGlobals._NormalDiff);
    u_xlat3.xyz = fma(u_xlat3.xyz, u_xlat0.xxx, float3(u_xlat16_1.xyz));
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb2 = u_xlat0.x<0.00499999989;
    u_xlat36 = u_xlat0.x * 8.29800034;
    u_xlat16_1.x = (u_xlatb2) ? half(0.0) : half(u_xlat36);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat3.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_5.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_5.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_5.x, half(1.0));
    u_xlat16_5.x = u_xlat16_5.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_38 = half(u_xlat0.x * u_xlat2.x);
    u_xlat0.x = fma(u_xlat0.x, u_xlat0.x, 1.5);
    u_xlat16_38 = fma((-u_xlat16_38), half(0.280000001), half(1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(u_xlat16_38);
    u_xlat3.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat3.x = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat11.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat3.x = max(u_xlat3.x, 0.319999993);
    u_xlat0.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
    u_xlat11.x = clamp(u_xlat11.x, 0.0f, 1.0f);
    u_xlat11.x = u_xlat11.x * u_xlat11.x;
    u_xlat22.x = fma(u_xlat2.x, u_xlat2.x, -1.0);
    u_xlat11.x = fma(u_xlat11.x, u_xlat22.x, 1.00001001);
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat11.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat22.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat22.xy = trunc(u_xlat22.xy);
    u_xlat11.x = u_xlat22.x + u_xlat11.x;
    u_xlat11.x = fma(u_xlat22.y, float(FGlobals._AlbedoTileSplitU), u_xlat11.x);
    u_xlat22.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat22.xy));
    u_xlat16_38 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat11.x = u_xlat11.x / float(u_xlat16_38);
    u_xlatb2 = u_xlat11.x>=(-u_xlat11.x);
    u_xlat11.x = fract(abs(u_xlat11.x));
    u_xlat11.x = (u_xlatb2) ? u_xlat11.x : (-u_xlat11.x);
    u_xlat4.x = float(u_xlat16_38) * u_xlat11.x;
    u_xlat11.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat4.y = (-u_xlat11.x);
    u_xlat11.xy = u_xlat22.xy + u_xlat4.xy;
    u_xlat11.xy = u_xlat11.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_11.xyz = _MainTex.sample(sampler_MainTex, u_xlat11.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_4.xyz;
    u_xlat16_7.xyz = fma(u_xlat16_4.xyz, u_xlat16_11.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_7.xyz = fma(half3(FGlobals._Metallic), u_xlat16_7.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_38 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_8.xyz = half3(u_xlat16_38) * u_xlat16_6.xyz;
    u_xlat16_38 = (-u_xlat16_38) + FGlobals._Smoothness;
    u_xlat16_38 = u_xlat16_38 + half(1.0);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0h, 1.0h);
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + half3(u_xlat16_38);
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_7.xyz), float3(u_xlat16_8.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(FGlobals._LightColor0.xyz);
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_4.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_10.xyz = u_xlat16_10.xyz * half3(FGlobals._Occlusion);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat33 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat13.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16_38 = half((-u_xlat2.x) + 1.0);
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_7.xyz = fma(half3(u_xlat16_38), u_xlat16_9.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat33), float3(u_xlat16_8.xyz));
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_7.xyz), u_xlat0.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler samplerunity_NHxRoughness [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_TransparencyLM [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    float2 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    float2 u_xlat10;
    bool u_xlatb22;
    float u_xlat30;
    bool u_xlatb30;
    half u_xlat16_31;
    float u_xlat32;
    half u_xlat16_33;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat10.xy = trunc(u_xlat10.xy);
    u_xlat0.x = u_xlat10.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat10.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat10.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat10.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb30 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb30) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat10.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * half3(FGlobals._Occlusion);
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_31 = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_3.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_31)), (-u_xlat0.xyz)));
    u_xlat30 = dot(u_xlat16_3.zxy, (-u_xlat16_3.xyz));
    u_xlatb30 = u_xlat30<9.99999975e-06;
    u_xlat30 = (u_xlatb30) ? float(u_xlat16_3.z) : (-float(u_xlat16_3.z));
    u_xlat2.z = u_xlat30 * float(u_xlat16_3.x);
    u_xlat4.x = u_xlat30 * float(u_xlat16_3.z);
    u_xlat2.xy = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.yz);
    u_xlat4.yz = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.xy);
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat30 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat30 = sin(u_xlat30);
    u_xlat30 = u_xlat30 * FGlobals._NormalRand.w;
    u_xlat30 = fract(u_xlat30);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat30), float3(u_xlat16_3.xyz));
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * u_xlat2.xyz;
    u_xlat4.z = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb30 = u_xlat4.z<0.00499999989;
    u_xlat32 = u_xlat4.z * 8.29800034;
    u_xlat16_31 = (u_xlatb30) ? half(0.0) : half(u_xlat32);
    u_xlat16_2 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_31)));
    u_xlat16_31 = u_xlat16_2.w + half(-1.0);
    u_xlat16_31 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_31, half(1.0));
    u_xlat16_31 = u_xlat16_31 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat16_2.xyz * half3(u_xlat16_31);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(FGlobals._Occlusion);
    u_xlat30 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat30 = floor(u_xlat30);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat30 = u_xlat30 + u_xlat2.x;
    u_xlat30 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat30);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_31 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat30 = u_xlat30 / float(u_xlat16_31);
    u_xlatb22 = u_xlat30>=(-u_xlat30);
    u_xlat30 = fract(abs(u_xlat30));
    u_xlat30 = (u_xlatb22) ? u_xlat30 : (-u_xlat30);
    u_xlat5.x = float(u_xlat16_31) * u_xlat30;
    u_xlat30 = u_xlat5.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat30 = floor(u_xlat30);
    u_xlat5.y = (-u_xlat30);
    u_xlat2.xy = u_xlat2.xy + u_xlat5.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_5.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = fma(u_xlat16_5.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_6.xyz = fma(half3(FGlobals._Metallic), u_xlat16_6.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_31 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_33 = (-u_xlat16_31) + FGlobals._Smoothness;
    u_xlat16_7.xyz = half3(u_xlat16_31) * u_xlat16_2.xyz;
    u_xlat16_31 = u_xlat16_33 + half(1.0);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_31);
    u_xlat30 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * input.TEXCOORD1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat32 = u_xlat30;
    u_xlat32 = clamp(u_xlat32, 0.0f, 1.0f);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = fma(u_xlat2.xyz, (-float3(u_xlat30)), u_xlat0.xyz);
    u_xlat30 = dot(u_xlat2.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat0.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat4.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat4.xz).x;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_9.xyz = half3(fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_7.xyz)));
    u_xlat16_31 = half((-u_xlat32) + 1.0);
    u_xlat16_0.x = u_xlat16_31 * u_xlat16_31;
    u_xlat16_0.x = u_xlat16_31 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_31 * u_xlat16_0.x;
    u_xlat16_6.xyz = fma(u_xlat16_0.xxx, u_xlat16_8.xyz, u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_7.xyz, u_xlat16_3.xyz);
    u_xlat16_2 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_31 = dot(u_xlat16_2, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_3.xyz = half3(u_xlat16_31) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = half3(float3(u_xlat30) * float3(u_xlat16_3.xyz));
    u_xlat16_1.xyz = fma(u_xlat16_9.xyz, u_xlat16_3.xyz, u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat30 = input.TEXCOORD4;
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat30), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler samplerunity_NHxRoughness [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_TransparencyLM [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float3 u_xlat5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    half3 u_xlat16_11;
    float2 u_xlat12;
    bool u_xlatb28;
    bool u_xlatb36;
    half u_xlat16_37;
    float u_xlat38;
    bool u_xlatb38;
    half u_xlat16_39;
    float u_xlat40;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat12.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat12.xy = trunc(u_xlat12.xy);
    u_xlat0.x = u_xlat12.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat12.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat12.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat12.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb36 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb36) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat12.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat2.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat38 = rsqrt(u_xlat38);
    u_xlat2.xyz = float3(u_xlat38) * u_xlat2.xyz;
    u_xlat16_37 = dot((-u_xlat2.xyz), input.TEXCOORD1.xyz);
    u_xlat16_37 = u_xlat16_37 + u_xlat16_37;
    u_xlat16_3.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_37)), (-u_xlat2.xyz)));
    u_xlat38 = dot(u_xlat16_3.zxy, (-u_xlat16_3.xyz));
    u_xlatb38 = u_xlat38<9.99999975e-06;
    u_xlat38 = (u_xlatb38) ? float(u_xlat16_3.z) : (-float(u_xlat16_3.z));
    u_xlat4.z = u_xlat38 * float(u_xlat16_3.x);
    u_xlat5.x = u_xlat38 * float(u_xlat16_3.z);
    u_xlat4.xy = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.yz);
    u_xlat5.yz = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.xy);
    u_xlat4.xyz = u_xlat4.xyz + (-u_xlat5.xyz);
    u_xlat38 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat38 = rsqrt(u_xlat38);
    u_xlat4.xyz = float3(u_xlat38) * u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz * float3(FGlobals._NormalDiff);
    u_xlat38 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat38 = sin(u_xlat38);
    u_xlat38 = u_xlat38 * FGlobals._NormalRand.w;
    u_xlat38 = fract(u_xlat38);
    u_xlat4.xyz = fma(u_xlat4.xyz, float3(u_xlat38), float3(u_xlat16_3.xyz));
    u_xlat38 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat38 = rsqrt(u_xlat38);
    u_xlat4.xyz = float3(u_xlat38) * u_xlat4.xyz;
    u_xlat5.z = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb38 = u_xlat5.z<0.00499999989;
    u_xlat40 = u_xlat5.z * 8.29800034;
    u_xlat16_37 = (u_xlatb38) ? half(0.0) : half(u_xlat40);
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat4.xyz, bias(float(u_xlat16_37)));
    u_xlat16_37 = u_xlat16_0.w + half(-1.0);
    u_xlat16_37 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_37, half(1.0));
    u_xlat16_37 = u_xlat16_37 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat16_0.xyz * half3(u_xlat16_37);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(FGlobals._Occlusion);
    u_xlat38 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat38 = floor(u_xlat38);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat38 = u_xlat38 + u_xlat4.x;
    u_xlat38 = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat38);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_37 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat38 = u_xlat38 / float(u_xlat16_37);
    u_xlatb28 = u_xlat38>=(-u_xlat38);
    u_xlat38 = fract(abs(u_xlat38));
    u_xlat38 = (u_xlatb28) ? u_xlat38 : (-u_xlat38);
    u_xlat6.x = float(u_xlat16_37) * u_xlat38;
    u_xlat38 = u_xlat6.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat38 = floor(u_xlat38);
    u_xlat6.y = (-u_xlat38);
    u_xlat4.xy = u_xlat4.xy + u_xlat6.xy;
    u_xlat4.xy = u_xlat4.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_7.xyz = fma(u_xlat16_6.xyz, u_xlat16_4.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlat16_7.xyz = fma(half3(FGlobals._Metallic), u_xlat16_7.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_37 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_39 = (-u_xlat16_37) + FGlobals._Smoothness;
    u_xlat16_8.xyz = half3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_37 = u_xlat16_39 + half(1.0);
    u_xlat16_37 = clamp(u_xlat16_37, 0.0h, 1.0h);
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + half3(u_xlat16_37);
    u_xlat38 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat38 = rsqrt(u_xlat38);
    u_xlat4.xyz = float3(u_xlat38) * input.TEXCOORD1.xyz;
    u_xlat38 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat40 = u_xlat38;
    u_xlat40 = clamp(u_xlat40, 0.0f, 1.0f);
    u_xlat38 = u_xlat38 + u_xlat38;
    u_xlat2.xyz = fma(u_xlat4.xyz, (-float3(u_xlat38)), u_xlat2.xyz);
    u_xlat38 = dot(u_xlat4.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat38 = clamp(u_xlat38, 0.0f, 1.0f);
    u_xlat16_10.xyz = half3(float3(u_xlat38) * float3(FGlobals._LightColor0.xyz));
    u_xlat2.x = dot(u_xlat2.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat5.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat5.xz).x;
    u_xlat2.x = u_xlat2.x * 16.0;
    u_xlat16_11.xyz = half3(fma(u_xlat2.xxx, float3(u_xlat16_7.xyz), float3(u_xlat16_8.xyz)));
    u_xlat16_37 = half((-u_xlat40) + 1.0);
    u_xlat16_2.x = u_xlat16_37 * u_xlat16_37;
    u_xlat16_2.x = u_xlat16_37 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_37 * u_xlat16_2.x;
    u_xlat16_7.xyz = fma(u_xlat16_2.xxx, u_xlat16_9.xyz, u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_8.xyz, u_xlat16_3.xyz);
    output.SV_Target0.xyz = fma(u_xlat16_11.xyz, u_xlat16_10.xyz, u_xlat16_1.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float2 u_xlat8;
    half u_xlat16_9;
    float2 u_xlat10;
    float u_xlat12;
    float u_xlat20;
    bool u_xlatb24;
    half u_xlat16_25;
    float u_xlat26;
    bool u_xlatb26;
    half u_xlat16_27;
    float u_xlat28;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat10.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat10.xy = trunc(u_xlat10.xy);
    u_xlat2.x = u_xlat10.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat10.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat10.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat10.xy));
    u_xlat16_25 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_25);
    u_xlatb26 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb26) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_25) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat10.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = fma(u_xlat16_4.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_3.xyz = fma(half3(FGlobals._Metallic), u_xlat16_3.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_25 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_6.xyz = half3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_25 = (-u_xlat16_25) + FGlobals._Smoothness;
    u_xlat16_25 = u_xlat16_25 + half(1.0);
    u_xlat16_25 = clamp(u_xlat16_25, 0.0h, 1.0h);
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + half3(u_xlat16_25);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz;
    u_xlat2.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = float3(u_xlat26) * u_xlat4.xyz;
    u_xlat26 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat4.xyz);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat26 = max(u_xlat26, 0.319999993);
    u_xlat28 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat5.x = fma(u_xlat28, u_xlat28, 1.5);
    u_xlat26 = u_xlat26 * u_xlat5.x;
    u_xlat5.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat5.x = rsqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * input.TEXCOORD1.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat12 = u_xlat28 * u_xlat28;
    u_xlat20 = fma(u_xlat12, u_xlat12, -1.0);
    u_xlat4.x = fma(u_xlat4.x, u_xlat20, 1.00001001);
    u_xlat26 = u_xlat26 * u_xlat4.x;
    u_xlat26 = u_xlat12 / u_xlat26;
    u_xlat16_25 = half(u_xlat28 * u_xlat12);
    u_xlat16_25 = fma((-u_xlat16_25), half(0.280000001), half(1.0));
    u_xlat26 = u_xlat26 + -9.99999975e-05;
    u_xlat26 = max(u_xlat26, 0.0);
    u_xlat26 = min(u_xlat26, 100.0);
    u_xlat4.xyz = fma(float3(u_xlat26), float3(u_xlat16_3.xyz), float3(u_xlat16_6.xyz));
    u_xlat4.xyz = u_xlat4.xyz * float3(FGlobals._LightColor0.xyz);
    u_xlat26 = dot(u_xlat5.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
    u_xlat16_27 = half((-u_xlat5.x) + 1.0);
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_3.xyz = fma(half3(u_xlat16_27), u_xlat16_7.xyz, u_xlat16_3.xyz);
    u_xlat4.xyz = fma(u_xlat4.xyz, float3(u_xlat26), float3(u_xlat16_1.xyz));
    u_xlatb26 = u_xlat28<0.00499999989;
    u_xlat28 = u_xlat28 * 8.29800034;
    u_xlat16_1.x = (u_xlatb26) ? half(0.0) : half(u_xlat28);
    u_xlat16_9 = dot((-u_xlat2.xyz), input.TEXCOORD1.xyz);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_6.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_9)), (-u_xlat2.xyz)));
    u_xlat2.x = dot(u_xlat16_6.zxy, (-u_xlat16_6.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_6.z) : (-float(u_xlat16_6.z));
    u_xlat5.z = u_xlat2.x * float(u_xlat16_6.x);
    u_xlat2.x = u_xlat2.x * float(u_xlat16_6.z);
    u_xlat5.xy = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.yz);
    u_xlat2.yz = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.xy);
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat26 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat26 = sin(u_xlat26);
    u_xlat26 = u_xlat26 * FGlobals._NormalRand.w;
    u_xlat26 = fract(u_xlat26);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(u_xlat16_6.xyz));
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_25);
    u_xlat2.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_3.xyz), u_xlat4.xyz);
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float2 u_xlat8;
    half u_xlat16_9;
    float2 u_xlat10;
    float u_xlat12;
    float u_xlat20;
    bool u_xlatb24;
    half u_xlat16_25;
    float u_xlat26;
    bool u_xlatb26;
    half u_xlat16_27;
    float u_xlat28;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat10.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat10.xy = trunc(u_xlat10.xy);
    u_xlat2.x = u_xlat10.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat10.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat10.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat10.xy));
    u_xlat16_25 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_25);
    u_xlatb26 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb26) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_25) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat10.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = fma(u_xlat16_4.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_3.xyz = fma(half3(FGlobals._Metallic), u_xlat16_3.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_25 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_6.xyz = half3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_25 = (-u_xlat16_25) + FGlobals._Smoothness;
    u_xlat16_25 = u_xlat16_25 + half(1.0);
    u_xlat16_25 = clamp(u_xlat16_25, 0.0h, 1.0h);
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + half3(u_xlat16_25);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz;
    u_xlat2.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = float3(u_xlat26) * u_xlat4.xyz;
    u_xlat26 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat4.xyz);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat26 = max(u_xlat26, 0.319999993);
    u_xlat28 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat5.x = fma(u_xlat28, u_xlat28, 1.5);
    u_xlat26 = u_xlat26 * u_xlat5.x;
    u_xlat5.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat5.x = rsqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * input.TEXCOORD1.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat12 = u_xlat28 * u_xlat28;
    u_xlat20 = fma(u_xlat12, u_xlat12, -1.0);
    u_xlat4.x = fma(u_xlat4.x, u_xlat20, 1.00001001);
    u_xlat26 = u_xlat26 * u_xlat4.x;
    u_xlat26 = u_xlat12 / u_xlat26;
    u_xlat16_25 = half(u_xlat28 * u_xlat12);
    u_xlat16_25 = fma((-u_xlat16_25), half(0.280000001), half(1.0));
    u_xlat26 = u_xlat26 + -9.99999975e-05;
    u_xlat26 = max(u_xlat26, 0.0);
    u_xlat26 = min(u_xlat26, 100.0);
    u_xlat4.xyz = fma(float3(u_xlat26), float3(u_xlat16_3.xyz), float3(u_xlat16_6.xyz));
    u_xlat4.xyz = u_xlat4.xyz * float3(FGlobals._LightColor0.xyz);
    u_xlat26 = dot(u_xlat5.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
    u_xlat16_27 = half((-u_xlat5.x) + 1.0);
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_3.xyz = fma(half3(u_xlat16_27), u_xlat16_7.xyz, u_xlat16_3.xyz);
    u_xlat4.xyz = fma(u_xlat4.xyz, float3(u_xlat26), float3(u_xlat16_1.xyz));
    u_xlatb26 = u_xlat28<0.00499999989;
    u_xlat28 = u_xlat28 * 8.29800034;
    u_xlat16_1.x = (u_xlatb26) ? half(0.0) : half(u_xlat28);
    u_xlat16_9 = dot((-u_xlat2.xyz), input.TEXCOORD1.xyz);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_6.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_9)), (-u_xlat2.xyz)));
    u_xlat2.x = dot(u_xlat16_6.zxy, (-u_xlat16_6.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_6.z) : (-float(u_xlat16_6.z));
    u_xlat5.z = u_xlat2.x * float(u_xlat16_6.x);
    u_xlat2.x = u_xlat2.x * float(u_xlat16_6.z);
    u_xlat5.xy = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.yz);
    u_xlat2.yz = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.xy);
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat26 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat26 = sin(u_xlat26);
    u_xlat26 = u_xlat26 * FGlobals._NormalRand.w;
    u_xlat26 = fract(u_xlat26);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(u_xlat16_6.xyz));
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_25);
    u_xlat2.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_3.xyz), u_xlat4.xyz);
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half4 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float2 u_xlat8;
    half u_xlat16_9;
    float u_xlat10;
    float u_xlat18;
    float u_xlat24;
    bool u_xlatb24;
    half u_xlat16_25;
    float u_xlat26;
    half u_xlat16_28;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * half3(FGlobals._Occlusion);
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat8.xy));
    u_xlat16_25 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_25);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_25) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_2.xyz, u_xlat16_0.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_4.xyz = fma(half3(FGlobals._Metallic), u_xlat16_4.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_25 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_5.xyz = half3(u_xlat16_25) * u_xlat16_3.xyz;
    u_xlat16_25 = (-u_xlat16_25) + FGlobals._Smoothness;
    u_xlat16_25 = u_xlat16_25 + half(1.0);
    u_xlat16_25 = clamp(u_xlat16_25, 0.0h, 1.0h);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + half3(u_xlat16_25);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat2.xyz = fma(u_xlat0.xyz, float3(u_xlat24), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat2.xyz = float3(u_xlat24) * u_xlat2.xyz;
    u_xlat24 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat2.xyz);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat24 = max(u_xlat24, 0.319999993);
    u_xlat26 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat3.x = fma(u_xlat26, u_xlat26, 1.5);
    u_xlat24 = u_xlat24 * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat10 = u_xlat26 * u_xlat26;
    u_xlat18 = fma(u_xlat10, u_xlat10, -1.0);
    u_xlat2.x = fma(u_xlat2.x, u_xlat18, 1.00001001);
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat24 = u_xlat10 / u_xlat24;
    u_xlat16_25 = half(u_xlat26 * u_xlat10);
    u_xlat16_25 = fma((-u_xlat16_25), half(0.280000001), half(1.0));
    u_xlat24 = u_xlat24 + -9.99999975e-05;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = min(u_xlat24, 100.0);
    u_xlat2.xyz = fma(float3(u_xlat24), float3(u_xlat16_4.xyz), float3(u_xlat16_5.xyz));
    u_xlat16_5 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_28 = dot(u_xlat16_5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_7.xyz = half3(u_xlat16_28) * FGlobals._LightColor0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(u_xlat16_7.xyz);
    u_xlat24 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat16_28 = half((-u_xlat3.x) + 1.0);
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_4.xyz = fma(half3(u_xlat16_28), u_xlat16_6.xyz, u_xlat16_4.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat24), float3(u_xlat16_1.xyz));
    u_xlatb24 = u_xlat26<0.00499999989;
    u_xlat26 = u_xlat26 * 8.29800034;
    u_xlat16_1.x = (u_xlatb24) ? half(0.0) : half(u_xlat26);
    u_xlat16_9 = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_6.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_9)), (-u_xlat0.xyz)));
    u_xlat0.x = dot(u_xlat16_6.zxy, (-u_xlat16_6.xyz));
    u_xlatb0 = u_xlat0.x<9.99999975e-06;
    u_xlat0.x = (u_xlatb0) ? float(u_xlat16_6.z) : (-float(u_xlat16_6.z));
    u_xlat3.z = u_xlat0.x * float(u_xlat16_6.x);
    u_xlat0.x = u_xlat0.x * float(u_xlat16_6.z);
    u_xlat3.xy = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.yz);
    u_xlat0.yz = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.xy);
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * float3(FGlobals._NormalDiff);
    u_xlat24 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat24 = sin(u_xlat24);
    u_xlat24 = u_xlat24 * FGlobals._NormalRand.w;
    u_xlat24 = fract(u_xlat24);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), float3(u_xlat16_6.xyz));
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat0.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_25);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_4.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat24 = input.TEXCOORD4;
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat24), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half4 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float2 u_xlat8;
    half u_xlat16_9;
    float u_xlat10;
    float u_xlat18;
    float u_xlat24;
    bool u_xlatb24;
    half u_xlat16_25;
    float u_xlat26;
    half u_xlat16_28;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * half3(FGlobals._Occlusion);
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat8.xy));
    u_xlat16_25 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_25);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_25) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_2.xyz, u_xlat16_0.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_4.xyz = fma(half3(FGlobals._Metallic), u_xlat16_4.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_25 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_5.xyz = half3(u_xlat16_25) * u_xlat16_3.xyz;
    u_xlat16_25 = (-u_xlat16_25) + FGlobals._Smoothness;
    u_xlat16_25 = u_xlat16_25 + half(1.0);
    u_xlat16_25 = clamp(u_xlat16_25, 0.0h, 1.0h);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + half3(u_xlat16_25);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat2.xyz = fma(u_xlat0.xyz, float3(u_xlat24), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat2.xyz = float3(u_xlat24) * u_xlat2.xyz;
    u_xlat24 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat2.xyz);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat24 = max(u_xlat24, 0.319999993);
    u_xlat26 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat3.x = fma(u_xlat26, u_xlat26, 1.5);
    u_xlat24 = u_xlat24 * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat10 = u_xlat26 * u_xlat26;
    u_xlat18 = fma(u_xlat10, u_xlat10, -1.0);
    u_xlat2.x = fma(u_xlat2.x, u_xlat18, 1.00001001);
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat24 = u_xlat10 / u_xlat24;
    u_xlat16_25 = half(u_xlat26 * u_xlat10);
    u_xlat16_25 = fma((-u_xlat16_25), half(0.280000001), half(1.0));
    u_xlat24 = u_xlat24 + -9.99999975e-05;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = min(u_xlat24, 100.0);
    u_xlat2.xyz = fma(float3(u_xlat24), float3(u_xlat16_4.xyz), float3(u_xlat16_5.xyz));
    u_xlat16_5 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_28 = dot(u_xlat16_5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_7.xyz = half3(u_xlat16_28) * FGlobals._LightColor0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(u_xlat16_7.xyz);
    u_xlat24 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat16_28 = half((-u_xlat3.x) + 1.0);
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_4.xyz = fma(half3(u_xlat16_28), u_xlat16_6.xyz, u_xlat16_4.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat24), float3(u_xlat16_1.xyz));
    u_xlatb24 = u_xlat26<0.00499999989;
    u_xlat26 = u_xlat26 * 8.29800034;
    u_xlat16_1.x = (u_xlatb24) ? half(0.0) : half(u_xlat26);
    u_xlat16_9 = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_6.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_9)), (-u_xlat0.xyz)));
    u_xlat0.x = dot(u_xlat16_6.zxy, (-u_xlat16_6.xyz));
    u_xlatb0 = u_xlat0.x<9.99999975e-06;
    u_xlat0.x = (u_xlatb0) ? float(u_xlat16_6.z) : (-float(u_xlat16_6.z));
    u_xlat3.z = u_xlat0.x * float(u_xlat16_6.x);
    u_xlat0.x = u_xlat0.x * float(u_xlat16_6.z);
    u_xlat3.xy = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.yz);
    u_xlat0.yz = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.xy);
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * float3(FGlobals._NormalDiff);
    u_xlat24 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat24 = sin(u_xlat24);
    u_xlat24 = u_xlat24 * FGlobals._NormalRand.w;
    u_xlat24 = fract(u_xlat24);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), float3(u_xlat16_6.xyz));
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat0.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_25);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_4.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat24 = input.TEXCOORD4;
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat24), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler samplerunity_SpecCube0 [[ sampler (2) ]],
    sampler samplerunity_NHxRoughness [[ sampler (3) ]],
    sampler sampler_MainTex [[ sampler (4) ]],
    sampler sampler_TransparencyLM [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(4) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    float2 u_xlat10;
    bool u_xlatb22;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat32;
    half u_xlat16_34;
    half u_xlat16_36;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat10.xy = trunc(u_xlat10.xy);
    u_xlat0.x = u_xlat10.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat10.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat10.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat10.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb30 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb30) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat10.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_1.x = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat0.xyz)));
    u_xlat30 = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb30 = u_xlat30<9.99999975e-06;
    u_xlat30 = (u_xlatb30) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat2.z = u_xlat30 * float(u_xlat16_1.x);
    u_xlat3.x = u_xlat30 * float(u_xlat16_1.z);
    u_xlat2.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat3.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat30 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat30 = sin(u_xlat30);
    u_xlat30 = u_xlat30 * FGlobals._NormalRand.w;
    u_xlat30 = fract(u_xlat30);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat30), float3(u_xlat16_1.xyz));
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * u_xlat2.xyz;
    u_xlat3.z = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb30 = u_xlat3.z<0.00499999989;
    u_xlat32 = u_xlat3.z * 8.29800034;
    u_xlat16_1.x = (u_xlatb30) ? half(0.0) : half(u_xlat32);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_4.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_4.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_4.x, half(1.0));
    u_xlat16_4.x = u_xlat16_4.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(FGlobals._Occlusion);
    u_xlat30 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat30 = floor(u_xlat30);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat30 = u_xlat30 + u_xlat2.x;
    u_xlat30 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat30);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_34 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat30 = u_xlat30 / float(u_xlat16_34);
    u_xlatb22 = u_xlat30>=(-u_xlat30);
    u_xlat30 = fract(abs(u_xlat30));
    u_xlat30 = (u_xlatb22) ? u_xlat30 : (-u_xlat30);
    u_xlat5.x = float(u_xlat16_34) * u_xlat30;
    u_xlat30 = u_xlat5.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat30 = floor(u_xlat30);
    u_xlat5.y = (-u_xlat30);
    u_xlat2.xy = u_xlat2.xy + u_xlat5.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_5.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = fma(u_xlat16_5.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_6.xyz = fma(half3(FGlobals._Metallic), u_xlat16_6.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_34 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_36 = (-u_xlat16_34) + FGlobals._Smoothness;
    u_xlat16_7.xyz = u_xlat16_2.xyz * half3(u_xlat16_34);
    u_xlat16_34 = u_xlat16_36 + half(1.0);
    u_xlat16_34 = clamp(u_xlat16_34, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_34);
    u_xlat30 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * input.TEXCOORD1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat32 = u_xlat30;
    u_xlat32 = clamp(u_xlat32, 0.0f, 1.0f);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = fma(u_xlat2.xyz, (-float3(u_xlat30)), u_xlat0.xyz);
    u_xlat30 = dot(u_xlat2.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat0.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat3.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat3.xz).x;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_9.xyz = half3(fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_7.xyz)));
    u_xlat16_34 = half((-u_xlat32) + 1.0);
    u_xlat16_0.x = u_xlat16_34 * u_xlat16_34;
    u_xlat16_0.x = u_xlat16_34 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_34 * u_xlat16_0.x;
    u_xlat16_6.xyz = fma(u_xlat16_0.xxx, u_xlat16_8.xyz, u_xlat16_6.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_6.xyz = u_xlat16_6.xyz * half3(FGlobals._Occlusion);
    u_xlat16_4.xyz = fma(u_xlat16_6.xyz, u_xlat16_7.xyz, u_xlat16_4.xyz);
    u_xlat16_1 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_34 = dot(u_xlat16_1, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_34 = clamp(u_xlat16_34, 0.0h, 1.0h);
    u_xlat16_6.xyz = half3(u_xlat16_34) * FGlobals._LightColor0.xyz;
    u_xlat16_6.xyz = half3(float3(u_xlat30) * float3(u_xlat16_6.xyz));
    output.SV_Target0.xyz = fma(u_xlat16_9.xyz, u_xlat16_6.xyz, u_xlat16_4.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler samplerunity_SpecCube0 [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_TransparencyLM [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float2 u_xlat2;
    bool u_xlatb2;
    float3 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    float3 u_xlat11;
    half3 u_xlat16_11;
    float3 u_xlat13;
    float2 u_xlat22;
    float u_xlat33;
    bool u_xlatb33;
    float u_xlat36;
    half u_xlat16_38;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat11.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat11.xy = trunc(u_xlat11.xy);
    u_xlat0.x = u_xlat11.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat11.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat11.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat11.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb33 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb33) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat11.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * FGlobals._NormalRand.w;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat11.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat13.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat11.xyz = fma(u_xlat11.xyz, u_xlat2.xxx, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_1.x = dot((-u_xlat13.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat13.xyz)));
    u_xlat2.x = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat3.z = float(u_xlat16_1.x) * u_xlat2.x;
    u_xlat4.x = float(u_xlat16_1.z) * u_xlat2.x;
    u_xlat3.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat4.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat3.xyz = u_xlat3.xyz + (-u_xlat4.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * float3(FGlobals._NormalDiff);
    u_xlat3.xyz = fma(u_xlat3.xyz, u_xlat0.xxx, float3(u_xlat16_1.xyz));
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb2 = u_xlat0.x<0.00499999989;
    u_xlat36 = u_xlat0.x * 8.29800034;
    u_xlat16_1.x = (u_xlatb2) ? half(0.0) : half(u_xlat36);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat3.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_5.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_5.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_5.x, half(1.0));
    u_xlat16_5.x = u_xlat16_5.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_38 = half(u_xlat0.x * u_xlat2.x);
    u_xlat0.x = fma(u_xlat0.x, u_xlat0.x, 1.5);
    u_xlat16_38 = fma((-u_xlat16_38), half(0.280000001), half(1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(u_xlat16_38);
    u_xlat3.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat3.x = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat11.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat3.x = max(u_xlat3.x, 0.319999993);
    u_xlat0.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
    u_xlat11.x = clamp(u_xlat11.x, 0.0f, 1.0f);
    u_xlat11.x = u_xlat11.x * u_xlat11.x;
    u_xlat22.x = fma(u_xlat2.x, u_xlat2.x, -1.0);
    u_xlat11.x = fma(u_xlat11.x, u_xlat22.x, 1.00001001);
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat11.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat22.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat22.xy = trunc(u_xlat22.xy);
    u_xlat11.x = u_xlat22.x + u_xlat11.x;
    u_xlat11.x = fma(u_xlat22.y, float(FGlobals._AlbedoTileSplitU), u_xlat11.x);
    u_xlat22.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat22.xy));
    u_xlat16_38 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat11.x = u_xlat11.x / float(u_xlat16_38);
    u_xlatb2 = u_xlat11.x>=(-u_xlat11.x);
    u_xlat11.x = fract(abs(u_xlat11.x));
    u_xlat11.x = (u_xlatb2) ? u_xlat11.x : (-u_xlat11.x);
    u_xlat4.x = float(u_xlat16_38) * u_xlat11.x;
    u_xlat11.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat4.y = (-u_xlat11.x);
    u_xlat11.xy = u_xlat22.xy + u_xlat4.xy;
    u_xlat11.xy = u_xlat11.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_11.xyz = _MainTex.sample(sampler_MainTex, u_xlat11.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_4.xyz;
    u_xlat16_7.xyz = fma(u_xlat16_4.xyz, u_xlat16_11.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_7.xyz = fma(half3(FGlobals._Metallic), u_xlat16_7.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_38 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_8.xyz = half3(u_xlat16_38) * u_xlat16_6.xyz;
    u_xlat16_38 = (-u_xlat16_38) + FGlobals._Smoothness;
    u_xlat16_38 = u_xlat16_38 + half(1.0);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0h, 1.0h);
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + half3(u_xlat16_38);
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_7.xyz), float3(u_xlat16_8.xyz));
    u_xlat16_1 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_38 = dot(u_xlat16_1, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0h, 1.0h);
    u_xlat16_10.xyz = half3(u_xlat16_38) * FGlobals._LightColor0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_10.xyz);
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_4.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_10.xyz = u_xlat16_10.xyz * half3(FGlobals._Occlusion);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat33 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat13.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16_38 = half((-u_xlat2.x) + 1.0);
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_7.xyz = fma(half3(u_xlat16_38), u_xlat16_9.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat33), float3(u_xlat16_8.xyz));
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_7.xyz), u_xlat0.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler samplerunity_SpecCube0 [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_TransparencyLM [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float2 u_xlat2;
    bool u_xlatb2;
    float3 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    float3 u_xlat11;
    half3 u_xlat16_11;
    float3 u_xlat13;
    float2 u_xlat22;
    float u_xlat33;
    bool u_xlatb33;
    float u_xlat36;
    half u_xlat16_38;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat11.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat11.xy = trunc(u_xlat11.xy);
    u_xlat0.x = u_xlat11.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat11.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat11.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat11.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb33 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb33) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat11.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * FGlobals._NormalRand.w;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat11.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat13.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat11.xyz = fma(u_xlat11.xyz, u_xlat2.xxx, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_1.x = dot((-u_xlat13.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat13.xyz)));
    u_xlat2.x = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat3.z = float(u_xlat16_1.x) * u_xlat2.x;
    u_xlat4.x = float(u_xlat16_1.z) * u_xlat2.x;
    u_xlat3.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat4.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat3.xyz = u_xlat3.xyz + (-u_xlat4.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * float3(FGlobals._NormalDiff);
    u_xlat3.xyz = fma(u_xlat3.xyz, u_xlat0.xxx, float3(u_xlat16_1.xyz));
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb2 = u_xlat0.x<0.00499999989;
    u_xlat36 = u_xlat0.x * 8.29800034;
    u_xlat16_1.x = (u_xlatb2) ? half(0.0) : half(u_xlat36);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat3.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_5.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_5.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_5.x, half(1.0));
    u_xlat16_5.x = u_xlat16_5.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_38 = half(u_xlat0.x * u_xlat2.x);
    u_xlat0.x = fma(u_xlat0.x, u_xlat0.x, 1.5);
    u_xlat16_38 = fma((-u_xlat16_38), half(0.280000001), half(1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(u_xlat16_38);
    u_xlat3.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat3.x = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat11.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat3.x = max(u_xlat3.x, 0.319999993);
    u_xlat0.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
    u_xlat11.x = clamp(u_xlat11.x, 0.0f, 1.0f);
    u_xlat11.x = u_xlat11.x * u_xlat11.x;
    u_xlat22.x = fma(u_xlat2.x, u_xlat2.x, -1.0);
    u_xlat11.x = fma(u_xlat11.x, u_xlat22.x, 1.00001001);
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat11.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat22.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat22.xy = trunc(u_xlat22.xy);
    u_xlat11.x = u_xlat22.x + u_xlat11.x;
    u_xlat11.x = fma(u_xlat22.y, float(FGlobals._AlbedoTileSplitU), u_xlat11.x);
    u_xlat22.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat22.xy));
    u_xlat16_38 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat11.x = u_xlat11.x / float(u_xlat16_38);
    u_xlatb2 = u_xlat11.x>=(-u_xlat11.x);
    u_xlat11.x = fract(abs(u_xlat11.x));
    u_xlat11.x = (u_xlatb2) ? u_xlat11.x : (-u_xlat11.x);
    u_xlat4.x = float(u_xlat16_38) * u_xlat11.x;
    u_xlat11.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat4.y = (-u_xlat11.x);
    u_xlat11.xy = u_xlat22.xy + u_xlat4.xy;
    u_xlat11.xy = u_xlat11.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_11.xyz = _MainTex.sample(sampler_MainTex, u_xlat11.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_4.xyz;
    u_xlat16_7.xyz = fma(u_xlat16_4.xyz, u_xlat16_11.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_7.xyz = fma(half3(FGlobals._Metallic), u_xlat16_7.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_38 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_8.xyz = half3(u_xlat16_38) * u_xlat16_6.xyz;
    u_xlat16_38 = (-u_xlat16_38) + FGlobals._Smoothness;
    u_xlat16_38 = u_xlat16_38 + half(1.0);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0h, 1.0h);
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + half3(u_xlat16_38);
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_7.xyz), float3(u_xlat16_8.xyz));
    u_xlat16_1 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_38 = dot(u_xlat16_1, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0h, 1.0h);
    u_xlat16_10.xyz = half3(u_xlat16_38) * FGlobals._LightColor0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_10.xyz);
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_4.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_10.xyz = u_xlat16_10.xyz * half3(FGlobals._Occlusion);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat33 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat13.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16_38 = half((-u_xlat2.x) + 1.0);
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_7.xyz = fma(half3(u_xlat16_38), u_xlat16_9.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat33), float3(u_xlat16_8.xyz));
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_7.xyz), u_xlat0.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler samplerunity_NHxRoughness [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_TransparencyLM [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    float2 u_xlat11;
    bool u_xlatb24;
    float u_xlat33;
    bool u_xlatb33;
    float u_xlat35;
    half u_xlat16_37;
    half u_xlat16_39;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat11.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat11.xy = trunc(u_xlat11.xy);
    u_xlat0.x = u_xlat11.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat11.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat11.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat11.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb33 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb33) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat11.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_1.x = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat0.xyz)));
    u_xlat33 = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb33 = u_xlat33<9.99999975e-06;
    u_xlat33 = (u_xlatb33) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat2.z = u_xlat33 * float(u_xlat16_1.x);
    u_xlat3.x = u_xlat33 * float(u_xlat16_1.z);
    u_xlat2.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat3.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat2.xyz = float3(u_xlat33) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat33 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat33 = sin(u_xlat33);
    u_xlat33 = u_xlat33 * FGlobals._NormalRand.w;
    u_xlat33 = fract(u_xlat33);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat33), float3(u_xlat16_1.xyz));
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat2.xyz = float3(u_xlat33) * u_xlat2.xyz;
    u_xlat3.z = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb33 = u_xlat3.z<0.00499999989;
    u_xlat35 = u_xlat3.z * 8.29800034;
    u_xlat16_1.x = (u_xlatb33) ? half(0.0) : half(u_xlat35);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_4.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_4.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_4.x, half(1.0));
    u_xlat16_4.x = u_xlat16_4.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(FGlobals._Occlusion);
    u_xlat33 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat33 = floor(u_xlat33);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat33 = u_xlat33 + u_xlat2.x;
    u_xlat33 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat33);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_37 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat33 = u_xlat33 / float(u_xlat16_37);
    u_xlatb24 = u_xlat33>=(-u_xlat33);
    u_xlat33 = fract(abs(u_xlat33));
    u_xlat33 = (u_xlatb24) ? u_xlat33 : (-u_xlat33);
    u_xlat5.x = float(u_xlat16_37) * u_xlat33;
    u_xlat33 = u_xlat5.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat33 = floor(u_xlat33);
    u_xlat5.y = (-u_xlat33);
    u_xlat2.xy = u_xlat2.xy + u_xlat5.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_5.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = fma(u_xlat16_5.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_6.xyz = fma(half3(FGlobals._Metallic), u_xlat16_6.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_37 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_39 = (-u_xlat16_37) + FGlobals._Smoothness;
    u_xlat16_7.xyz = u_xlat16_2.xyz * half3(u_xlat16_37);
    u_xlat16_37 = u_xlat16_39 + half(1.0);
    u_xlat16_37 = clamp(u_xlat16_37, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_37);
    u_xlat33 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat2.xyz = float3(u_xlat33) * input.TEXCOORD1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat35 = u_xlat33;
    u_xlat35 = clamp(u_xlat35, 0.0f, 1.0f);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = fma(u_xlat2.xyz, (-float3(u_xlat33)), u_xlat0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat16_9.xyz = half3(float3(u_xlat33) * float3(FGlobals._LightColor0.xyz));
    u_xlat0.x = dot(u_xlat0.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat3.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat3.xz).x;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_10.xyz = half3(fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_7.xyz)));
    u_xlat16_37 = half((-u_xlat35) + 1.0);
    u_xlat16_0.x = u_xlat16_37 * u_xlat16_37;
    u_xlat16_0.x = u_xlat16_37 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_37 * u_xlat16_0.x;
    u_xlat16_6.xyz = fma(u_xlat16_0.xxx, u_xlat16_8.xyz, u_xlat16_6.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_6.xyz = u_xlat16_6.xyz * half3(FGlobals._Occlusion);
    u_xlat16_4.xyz = fma(u_xlat16_6.xyz, u_xlat16_7.xyz, u_xlat16_4.xyz);
    u_xlat16_4.xyz = fma(u_xlat16_10.xyz, u_xlat16_9.xyz, u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_4.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat33 = input.TEXCOORD4;
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat33), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler samplerunity_SpecCube0 [[ sampler (2) ]],
    sampler samplerunity_NHxRoughness [[ sampler (3) ]],
    sampler sampler_MainTex [[ sampler (4) ]],
    sampler sampler_TransparencyLM [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(4) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float3 u_xlat5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    float2 u_xlat11;
    bool u_xlatb26;
    bool u_xlatb33;
    half u_xlat16_34;
    float u_xlat35;
    bool u_xlatb35;
    half u_xlat16_36;
    float u_xlat37;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat11.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat11.xy = trunc(u_xlat11.xy);
    u_xlat0.x = u_xlat11.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat11.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat11.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat11.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb33 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb33) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat11.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat2.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat35 = rsqrt(u_xlat35);
    u_xlat2.xyz = float3(u_xlat35) * u_xlat2.xyz;
    u_xlat16_34 = dot((-u_xlat2.xyz), input.TEXCOORD1.xyz);
    u_xlat16_34 = u_xlat16_34 + u_xlat16_34;
    u_xlat16_3.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_34)), (-u_xlat2.xyz)));
    u_xlat35 = dot(u_xlat16_3.zxy, (-u_xlat16_3.xyz));
    u_xlatb35 = u_xlat35<9.99999975e-06;
    u_xlat35 = (u_xlatb35) ? float(u_xlat16_3.z) : (-float(u_xlat16_3.z));
    u_xlat4.z = u_xlat35 * float(u_xlat16_3.x);
    u_xlat5.x = u_xlat35 * float(u_xlat16_3.z);
    u_xlat4.xy = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.yz);
    u_xlat5.yz = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.xy);
    u_xlat4.xyz = u_xlat4.xyz + (-u_xlat5.xyz);
    u_xlat35 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat35 = rsqrt(u_xlat35);
    u_xlat4.xyz = float3(u_xlat35) * u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz * float3(FGlobals._NormalDiff);
    u_xlat35 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat35 = sin(u_xlat35);
    u_xlat35 = u_xlat35 * FGlobals._NormalRand.w;
    u_xlat35 = fract(u_xlat35);
    u_xlat4.xyz = fma(u_xlat4.xyz, float3(u_xlat35), float3(u_xlat16_3.xyz));
    u_xlat35 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat35 = rsqrt(u_xlat35);
    u_xlat4.xyz = float3(u_xlat35) * u_xlat4.xyz;
    u_xlat5.z = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb35 = u_xlat5.z<0.00499999989;
    u_xlat37 = u_xlat5.z * 8.29800034;
    u_xlat16_34 = (u_xlatb35) ? half(0.0) : half(u_xlat37);
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat4.xyz, bias(float(u_xlat16_34)));
    u_xlat16_34 = u_xlat16_0.w + half(-1.0);
    u_xlat16_34 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_34, half(1.0));
    u_xlat16_34 = u_xlat16_34 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat16_0.xyz * half3(u_xlat16_34);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(FGlobals._Occlusion);
    u_xlat35 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat35 = floor(u_xlat35);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat35 = u_xlat35 + u_xlat4.x;
    u_xlat35 = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat35);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_34 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat35 = u_xlat35 / float(u_xlat16_34);
    u_xlatb26 = u_xlat35>=(-u_xlat35);
    u_xlat35 = fract(abs(u_xlat35));
    u_xlat35 = (u_xlatb26) ? u_xlat35 : (-u_xlat35);
    u_xlat6.x = float(u_xlat16_34) * u_xlat35;
    u_xlat35 = u_xlat6.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat35 = floor(u_xlat35);
    u_xlat6.y = (-u_xlat35);
    u_xlat4.xy = u_xlat4.xy + u_xlat6.xy;
    u_xlat4.xy = u_xlat4.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_7.xyz = fma(u_xlat16_6.xyz, u_xlat16_4.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlat16_7.xyz = fma(half3(FGlobals._Metallic), u_xlat16_7.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_34 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_36 = (-u_xlat16_34) + FGlobals._Smoothness;
    u_xlat16_8.xyz = half3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat16_34 = u_xlat16_36 + half(1.0);
    u_xlat16_34 = clamp(u_xlat16_34, 0.0h, 1.0h);
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + half3(u_xlat16_34);
    u_xlat35 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat35 = rsqrt(u_xlat35);
    u_xlat4.xyz = float3(u_xlat35) * input.TEXCOORD1.xyz;
    u_xlat35 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat37 = u_xlat35;
    u_xlat37 = clamp(u_xlat37, 0.0f, 1.0f);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat2.xyz = fma(u_xlat4.xyz, (-float3(u_xlat35)), u_xlat2.xyz);
    u_xlat35 = dot(u_xlat4.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat35 = clamp(u_xlat35, 0.0f, 1.0f);
    u_xlat2.x = dot(u_xlat2.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat5.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat5.xz).x;
    u_xlat2.x = u_xlat2.x * 16.0;
    u_xlat16_10.xyz = half3(fma(u_xlat2.xxx, float3(u_xlat16_7.xyz), float3(u_xlat16_8.xyz)));
    u_xlat16_34 = half((-u_xlat37) + 1.0);
    u_xlat16_2.x = u_xlat16_34 * u_xlat16_34;
    u_xlat16_2.x = u_xlat16_34 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_34 * u_xlat16_2.x;
    u_xlat16_7.xyz = fma(u_xlat16_2.xxx, u_xlat16_9.xyz, u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_8.xyz, u_xlat16_3.xyz);
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_34 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_34 = clamp(u_xlat16_34, 0.0h, 1.0h);
    u_xlat16_3.xyz = half3(u_xlat16_34) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = half3(float3(u_xlat35) * float3(u_xlat16_3.xyz));
    output.SV_Target0.xyz = fma(u_xlat16_10.xyz, u_xlat16_3.xyz, u_xlat16_1.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler samplerunity_SpecCube0 [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_TransparencyLM [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float2 u_xlat8;
    half u_xlat16_9;
    float2 u_xlat10;
    float u_xlat12;
    float u_xlat20;
    bool u_xlatb24;
    half u_xlat16_25;
    float u_xlat26;
    bool u_xlatb26;
    half u_xlat16_27;
    float u_xlat28;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat10.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat10.xy = trunc(u_xlat10.xy);
    u_xlat2.x = u_xlat10.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat10.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat10.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat10.xy));
    u_xlat16_25 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_25);
    u_xlatb26 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb26) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_25) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat10.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = fma(u_xlat16_4.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_3.xyz = fma(half3(FGlobals._Metallic), u_xlat16_3.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_25 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_6.xyz = half3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_25 = (-u_xlat16_25) + FGlobals._Smoothness;
    u_xlat16_25 = u_xlat16_25 + half(1.0);
    u_xlat16_25 = clamp(u_xlat16_25, 0.0h, 1.0h);
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + half3(u_xlat16_25);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz;
    u_xlat2.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = float3(u_xlat26) * u_xlat4.xyz;
    u_xlat26 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat4.xyz);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat26 = max(u_xlat26, 0.319999993);
    u_xlat28 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat5.x = fma(u_xlat28, u_xlat28, 1.5);
    u_xlat26 = u_xlat26 * u_xlat5.x;
    u_xlat5.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat5.x = rsqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * input.TEXCOORD1.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat12 = u_xlat28 * u_xlat28;
    u_xlat20 = fma(u_xlat12, u_xlat12, -1.0);
    u_xlat4.x = fma(u_xlat4.x, u_xlat20, 1.00001001);
    u_xlat26 = u_xlat26 * u_xlat4.x;
    u_xlat26 = u_xlat12 / u_xlat26;
    u_xlat16_25 = half(u_xlat28 * u_xlat12);
    u_xlat16_25 = fma((-u_xlat16_25), half(0.280000001), half(1.0));
    u_xlat26 = u_xlat26 + -9.99999975e-05;
    u_xlat26 = max(u_xlat26, 0.0);
    u_xlat26 = min(u_xlat26, 100.0);
    u_xlat4.xyz = fma(float3(u_xlat26), float3(u_xlat16_3.xyz), float3(u_xlat16_6.xyz));
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_27 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_27 = clamp(u_xlat16_27, 0.0h, 1.0h);
    u_xlat16_6.xyz = half3(u_xlat16_27) * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat16_6.xyz);
    u_xlat26 = dot(u_xlat5.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
    u_xlat16_27 = half((-u_xlat5.x) + 1.0);
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_3.xyz = fma(half3(u_xlat16_27), u_xlat16_7.xyz, u_xlat16_3.xyz);
    u_xlat4.xyz = fma(u_xlat4.xyz, float3(u_xlat26), float3(u_xlat16_1.xyz));
    u_xlatb26 = u_xlat28<0.00499999989;
    u_xlat28 = u_xlat28 * 8.29800034;
    u_xlat16_1.x = (u_xlatb26) ? half(0.0) : half(u_xlat28);
    u_xlat16_9 = dot((-u_xlat2.xyz), input.TEXCOORD1.xyz);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_6.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_9)), (-u_xlat2.xyz)));
    u_xlat2.x = dot(u_xlat16_6.zxy, (-u_xlat16_6.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_6.z) : (-float(u_xlat16_6.z));
    u_xlat5.z = u_xlat2.x * float(u_xlat16_6.x);
    u_xlat2.x = u_xlat2.x * float(u_xlat16_6.z);
    u_xlat5.xy = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.yz);
    u_xlat2.yz = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.xy);
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat26 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat26 = sin(u_xlat26);
    u_xlat26 = u_xlat26 * FGlobals._NormalRand.w;
    u_xlat26 = fract(u_xlat26);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(u_xlat16_6.xyz));
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_25);
    u_xlat2.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_3.xyz), u_xlat4.xyz);
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler samplerunity_SpecCube0 [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_TransparencyLM [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float2 u_xlat8;
    half u_xlat16_9;
    float2 u_xlat10;
    float u_xlat12;
    float u_xlat20;
    bool u_xlatb24;
    half u_xlat16_25;
    float u_xlat26;
    bool u_xlatb26;
    half u_xlat16_27;
    float u_xlat28;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat10.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat10.xy = trunc(u_xlat10.xy);
    u_xlat2.x = u_xlat10.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat10.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat10.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat10.xy));
    u_xlat16_25 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_25);
    u_xlatb26 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb26) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_25) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat10.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = fma(u_xlat16_4.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_3.xyz = fma(half3(FGlobals._Metallic), u_xlat16_3.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_25 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_6.xyz = half3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_25 = (-u_xlat16_25) + FGlobals._Smoothness;
    u_xlat16_25 = u_xlat16_25 + half(1.0);
    u_xlat16_25 = clamp(u_xlat16_25, 0.0h, 1.0h);
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + half3(u_xlat16_25);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz;
    u_xlat2.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = float3(u_xlat26) * u_xlat4.xyz;
    u_xlat26 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat4.xyz);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat26 = max(u_xlat26, 0.319999993);
    u_xlat28 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat5.x = fma(u_xlat28, u_xlat28, 1.5);
    u_xlat26 = u_xlat26 * u_xlat5.x;
    u_xlat5.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat5.x = rsqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * input.TEXCOORD1.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat12 = u_xlat28 * u_xlat28;
    u_xlat20 = fma(u_xlat12, u_xlat12, -1.0);
    u_xlat4.x = fma(u_xlat4.x, u_xlat20, 1.00001001);
    u_xlat26 = u_xlat26 * u_xlat4.x;
    u_xlat26 = u_xlat12 / u_xlat26;
    u_xlat16_25 = half(u_xlat28 * u_xlat12);
    u_xlat16_25 = fma((-u_xlat16_25), half(0.280000001), half(1.0));
    u_xlat26 = u_xlat26 + -9.99999975e-05;
    u_xlat26 = max(u_xlat26, 0.0);
    u_xlat26 = min(u_xlat26, 100.0);
    u_xlat4.xyz = fma(float3(u_xlat26), float3(u_xlat16_3.xyz), float3(u_xlat16_6.xyz));
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_27 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_27 = clamp(u_xlat16_27, 0.0h, 1.0h);
    u_xlat16_6.xyz = half3(u_xlat16_27) * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat16_6.xyz);
    u_xlat26 = dot(u_xlat5.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
    u_xlat16_27 = half((-u_xlat5.x) + 1.0);
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_3.xyz = fma(half3(u_xlat16_27), u_xlat16_7.xyz, u_xlat16_3.xyz);
    u_xlat4.xyz = fma(u_xlat4.xyz, float3(u_xlat26), float3(u_xlat16_1.xyz));
    u_xlatb26 = u_xlat28<0.00499999989;
    u_xlat28 = u_xlat28 * 8.29800034;
    u_xlat16_1.x = (u_xlatb26) ? half(0.0) : half(u_xlat28);
    u_xlat16_9 = dot((-u_xlat2.xyz), input.TEXCOORD1.xyz);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_6.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_9)), (-u_xlat2.xyz)));
    u_xlat2.x = dot(u_xlat16_6.zxy, (-u_xlat16_6.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_6.z) : (-float(u_xlat16_6.z));
    u_xlat5.z = u_xlat2.x * float(u_xlat16_6.x);
    u_xlat2.x = u_xlat2.x * float(u_xlat16_6.z);
    u_xlat5.xy = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.yz);
    u_xlat2.yz = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.xy);
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat26 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat26 = sin(u_xlat26);
    u_xlat26 = u_xlat26 * FGlobals._NormalRand.w;
    u_xlat26 = fract(u_xlat26);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(u_xlat16_6.xyz));
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_25);
    u_xlat2.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_3.xyz), u_xlat4.xyz);
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float2 u_xlat2;
    bool u_xlatb2;
    float3 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    float3 u_xlat11;
    half3 u_xlat16_11;
    float3 u_xlat13;
    float2 u_xlat22;
    float u_xlat33;
    bool u_xlatb33;
    float u_xlat36;
    half u_xlat16_38;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat11.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat11.xy = trunc(u_xlat11.xy);
    u_xlat0.x = u_xlat11.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat11.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat11.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat11.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb33 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb33) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat11.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * FGlobals._NormalRand.w;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat11.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat13.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat11.xyz = fma(u_xlat11.xyz, u_xlat2.xxx, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_1.x = dot((-u_xlat13.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat13.xyz)));
    u_xlat2.x = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat3.z = float(u_xlat16_1.x) * u_xlat2.x;
    u_xlat4.x = float(u_xlat16_1.z) * u_xlat2.x;
    u_xlat3.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat4.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat3.xyz = u_xlat3.xyz + (-u_xlat4.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * float3(FGlobals._NormalDiff);
    u_xlat3.xyz = fma(u_xlat3.xyz, u_xlat0.xxx, float3(u_xlat16_1.xyz));
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb2 = u_xlat0.x<0.00499999989;
    u_xlat36 = u_xlat0.x * 8.29800034;
    u_xlat16_1.x = (u_xlatb2) ? half(0.0) : half(u_xlat36);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat3.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_5.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_5.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_5.x, half(1.0));
    u_xlat16_5.x = u_xlat16_5.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_38 = half(u_xlat0.x * u_xlat2.x);
    u_xlat0.x = fma(u_xlat0.x, u_xlat0.x, 1.5);
    u_xlat16_38 = fma((-u_xlat16_38), half(0.280000001), half(1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(u_xlat16_38);
    u_xlat3.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat3.x = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat11.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat3.x = max(u_xlat3.x, 0.319999993);
    u_xlat0.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
    u_xlat11.x = clamp(u_xlat11.x, 0.0f, 1.0f);
    u_xlat11.x = u_xlat11.x * u_xlat11.x;
    u_xlat22.x = fma(u_xlat2.x, u_xlat2.x, -1.0);
    u_xlat11.x = fma(u_xlat11.x, u_xlat22.x, 1.00001001);
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat11.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat22.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat22.xy = trunc(u_xlat22.xy);
    u_xlat11.x = u_xlat22.x + u_xlat11.x;
    u_xlat11.x = fma(u_xlat22.y, float(FGlobals._AlbedoTileSplitU), u_xlat11.x);
    u_xlat22.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat22.xy));
    u_xlat16_38 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat11.x = u_xlat11.x / float(u_xlat16_38);
    u_xlatb2 = u_xlat11.x>=(-u_xlat11.x);
    u_xlat11.x = fract(abs(u_xlat11.x));
    u_xlat11.x = (u_xlatb2) ? u_xlat11.x : (-u_xlat11.x);
    u_xlat4.x = float(u_xlat16_38) * u_xlat11.x;
    u_xlat11.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat4.y = (-u_xlat11.x);
    u_xlat11.xy = u_xlat22.xy + u_xlat4.xy;
    u_xlat11.xy = u_xlat11.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_11.xyz = _MainTex.sample(sampler_MainTex, u_xlat11.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_4.xyz;
    u_xlat16_7.xyz = fma(u_xlat16_4.xyz, u_xlat16_11.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_7.xyz = fma(half3(FGlobals._Metallic), u_xlat16_7.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_38 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_8.xyz = half3(u_xlat16_38) * u_xlat16_6.xyz;
    u_xlat16_38 = (-u_xlat16_38) + FGlobals._Smoothness;
    u_xlat16_38 = u_xlat16_38 + half(1.0);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0h, 1.0h);
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + half3(u_xlat16_38);
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_7.xyz), float3(u_xlat16_8.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(FGlobals._LightColor0.xyz);
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_4.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_10.xyz = u_xlat16_10.xyz * half3(FGlobals._Occlusion);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat33 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat13.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16_38 = half((-u_xlat2.x) + 1.0);
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_7.xyz = fma(half3(u_xlat16_38), u_xlat16_9.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat33), float3(u_xlat16_8.xyz));
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_7.xyz), u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat33 = input.TEXCOORD4;
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat33), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float2 u_xlat2;
    bool u_xlatb2;
    float3 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    float3 u_xlat11;
    half3 u_xlat16_11;
    float3 u_xlat13;
    float2 u_xlat22;
    float u_xlat33;
    bool u_xlatb33;
    float u_xlat36;
    half u_xlat16_38;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat11.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat11.xy = trunc(u_xlat11.xy);
    u_xlat0.x = u_xlat11.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat11.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat11.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat11.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb33 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb33) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat11.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * FGlobals._NormalRand.w;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat11.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat13.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat11.xyz = fma(u_xlat11.xyz, u_xlat2.xxx, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_1.x = dot((-u_xlat13.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat13.xyz)));
    u_xlat2.x = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat3.z = float(u_xlat16_1.x) * u_xlat2.x;
    u_xlat4.x = float(u_xlat16_1.z) * u_xlat2.x;
    u_xlat3.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat4.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat3.xyz = u_xlat3.xyz + (-u_xlat4.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * float3(FGlobals._NormalDiff);
    u_xlat3.xyz = fma(u_xlat3.xyz, u_xlat0.xxx, float3(u_xlat16_1.xyz));
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb2 = u_xlat0.x<0.00499999989;
    u_xlat36 = u_xlat0.x * 8.29800034;
    u_xlat16_1.x = (u_xlatb2) ? half(0.0) : half(u_xlat36);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat3.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_5.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_5.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_5.x, half(1.0));
    u_xlat16_5.x = u_xlat16_5.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_38 = half(u_xlat0.x * u_xlat2.x);
    u_xlat0.x = fma(u_xlat0.x, u_xlat0.x, 1.5);
    u_xlat16_38 = fma((-u_xlat16_38), half(0.280000001), half(1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(u_xlat16_38);
    u_xlat3.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat3.x = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat11.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat3.x = max(u_xlat3.x, 0.319999993);
    u_xlat0.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
    u_xlat11.x = clamp(u_xlat11.x, 0.0f, 1.0f);
    u_xlat11.x = u_xlat11.x * u_xlat11.x;
    u_xlat22.x = fma(u_xlat2.x, u_xlat2.x, -1.0);
    u_xlat11.x = fma(u_xlat11.x, u_xlat22.x, 1.00001001);
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat11.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat22.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat22.xy = trunc(u_xlat22.xy);
    u_xlat11.x = u_xlat22.x + u_xlat11.x;
    u_xlat11.x = fma(u_xlat22.y, float(FGlobals._AlbedoTileSplitU), u_xlat11.x);
    u_xlat22.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat22.xy));
    u_xlat16_38 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat11.x = u_xlat11.x / float(u_xlat16_38);
    u_xlatb2 = u_xlat11.x>=(-u_xlat11.x);
    u_xlat11.x = fract(abs(u_xlat11.x));
    u_xlat11.x = (u_xlatb2) ? u_xlat11.x : (-u_xlat11.x);
    u_xlat4.x = float(u_xlat16_38) * u_xlat11.x;
    u_xlat11.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat4.y = (-u_xlat11.x);
    u_xlat11.xy = u_xlat22.xy + u_xlat4.xy;
    u_xlat11.xy = u_xlat11.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_11.xyz = _MainTex.sample(sampler_MainTex, u_xlat11.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_4.xyz;
    u_xlat16_7.xyz = fma(u_xlat16_4.xyz, u_xlat16_11.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_7.xyz = fma(half3(FGlobals._Metallic), u_xlat16_7.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_38 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_8.xyz = half3(u_xlat16_38) * u_xlat16_6.xyz;
    u_xlat16_38 = (-u_xlat16_38) + FGlobals._Smoothness;
    u_xlat16_38 = u_xlat16_38 + half(1.0);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0h, 1.0h);
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + half3(u_xlat16_38);
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_7.xyz), float3(u_xlat16_8.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(FGlobals._LightColor0.xyz);
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_4.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_10.xyz = u_xlat16_10.xyz * half3(FGlobals._Occlusion);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat33 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat13.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16_38 = half((-u_xlat2.x) + 1.0);
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_7.xyz = fma(half3(u_xlat16_38), u_xlat16_9.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat33), float3(u_xlat16_8.xyz));
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_7.xyz), u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat33 = input.TEXCOORD4;
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat33), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler samplerunity_NHxRoughness [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_TransparencyLM [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float3 u_xlat5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    half3 u_xlat16_11;
    float2 u_xlat12;
    bool u_xlatb28;
    bool u_xlatb36;
    half u_xlat16_37;
    float u_xlat38;
    bool u_xlatb38;
    half u_xlat16_39;
    float u_xlat40;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat12.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat12.xy = trunc(u_xlat12.xy);
    u_xlat0.x = u_xlat12.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat12.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat12.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat12.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb36 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb36) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat12.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat2.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat38 = rsqrt(u_xlat38);
    u_xlat2.xyz = float3(u_xlat38) * u_xlat2.xyz;
    u_xlat16_37 = dot((-u_xlat2.xyz), input.TEXCOORD1.xyz);
    u_xlat16_37 = u_xlat16_37 + u_xlat16_37;
    u_xlat16_3.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_37)), (-u_xlat2.xyz)));
    u_xlat38 = dot(u_xlat16_3.zxy, (-u_xlat16_3.xyz));
    u_xlatb38 = u_xlat38<9.99999975e-06;
    u_xlat38 = (u_xlatb38) ? float(u_xlat16_3.z) : (-float(u_xlat16_3.z));
    u_xlat4.z = u_xlat38 * float(u_xlat16_3.x);
    u_xlat5.x = u_xlat38 * float(u_xlat16_3.z);
    u_xlat4.xy = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.yz);
    u_xlat5.yz = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.xy);
    u_xlat4.xyz = u_xlat4.xyz + (-u_xlat5.xyz);
    u_xlat38 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat38 = rsqrt(u_xlat38);
    u_xlat4.xyz = float3(u_xlat38) * u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz * float3(FGlobals._NormalDiff);
    u_xlat38 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat38 = sin(u_xlat38);
    u_xlat38 = u_xlat38 * FGlobals._NormalRand.w;
    u_xlat38 = fract(u_xlat38);
    u_xlat4.xyz = fma(u_xlat4.xyz, float3(u_xlat38), float3(u_xlat16_3.xyz));
    u_xlat38 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat38 = rsqrt(u_xlat38);
    u_xlat4.xyz = float3(u_xlat38) * u_xlat4.xyz;
    u_xlat5.z = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb38 = u_xlat5.z<0.00499999989;
    u_xlat40 = u_xlat5.z * 8.29800034;
    u_xlat16_37 = (u_xlatb38) ? half(0.0) : half(u_xlat40);
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat4.xyz, bias(float(u_xlat16_37)));
    u_xlat16_37 = u_xlat16_0.w + half(-1.0);
    u_xlat16_37 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_37, half(1.0));
    u_xlat16_37 = u_xlat16_37 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat16_0.xyz * half3(u_xlat16_37);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(FGlobals._Occlusion);
    u_xlat38 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat38 = floor(u_xlat38);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat38 = u_xlat38 + u_xlat4.x;
    u_xlat38 = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat38);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_37 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat38 = u_xlat38 / float(u_xlat16_37);
    u_xlatb28 = u_xlat38>=(-u_xlat38);
    u_xlat38 = fract(abs(u_xlat38));
    u_xlat38 = (u_xlatb28) ? u_xlat38 : (-u_xlat38);
    u_xlat6.x = float(u_xlat16_37) * u_xlat38;
    u_xlat38 = u_xlat6.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat38 = floor(u_xlat38);
    u_xlat6.y = (-u_xlat38);
    u_xlat4.xy = u_xlat4.xy + u_xlat6.xy;
    u_xlat4.xy = u_xlat4.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_7.xyz = fma(u_xlat16_6.xyz, u_xlat16_4.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlat16_7.xyz = fma(half3(FGlobals._Metallic), u_xlat16_7.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_37 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_39 = (-u_xlat16_37) + FGlobals._Smoothness;
    u_xlat16_8.xyz = half3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_37 = u_xlat16_39 + half(1.0);
    u_xlat16_37 = clamp(u_xlat16_37, 0.0h, 1.0h);
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + half3(u_xlat16_37);
    u_xlat38 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat38 = rsqrt(u_xlat38);
    u_xlat4.xyz = float3(u_xlat38) * input.TEXCOORD1.xyz;
    u_xlat38 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat40 = u_xlat38;
    u_xlat40 = clamp(u_xlat40, 0.0f, 1.0f);
    u_xlat38 = u_xlat38 + u_xlat38;
    u_xlat2.xyz = fma(u_xlat4.xyz, (-float3(u_xlat38)), u_xlat2.xyz);
    u_xlat38 = dot(u_xlat4.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat38 = clamp(u_xlat38, 0.0f, 1.0f);
    u_xlat16_10.xyz = half3(float3(u_xlat38) * float3(FGlobals._LightColor0.xyz));
    u_xlat2.x = dot(u_xlat2.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat5.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat5.xz).x;
    u_xlat2.x = u_xlat2.x * 16.0;
    u_xlat16_11.xyz = half3(fma(u_xlat2.xxx, float3(u_xlat16_7.xyz), float3(u_xlat16_8.xyz)));
    u_xlat16_37 = half((-u_xlat40) + 1.0);
    u_xlat16_2.x = u_xlat16_37 * u_xlat16_37;
    u_xlat16_2.x = u_xlat16_37 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_37 * u_xlat16_2.x;
    u_xlat16_7.xyz = fma(u_xlat16_2.xxx, u_xlat16_9.xyz, u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_8.xyz, u_xlat16_3.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_11.xyz, u_xlat16_10.xyz, u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat38 = input.TEXCOORD4;
    u_xlat38 = clamp(u_xlat38, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat38), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float2 u_xlat8;
    half u_xlat16_9;
    float2 u_xlat10;
    float u_xlat12;
    float u_xlat20;
    bool u_xlatb24;
    half u_xlat16_25;
    float u_xlat26;
    bool u_xlatb26;
    half u_xlat16_27;
    float u_xlat28;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat10.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat10.xy = trunc(u_xlat10.xy);
    u_xlat2.x = u_xlat10.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat10.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat10.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat10.xy));
    u_xlat16_25 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_25);
    u_xlatb26 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb26) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_25) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat10.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = fma(u_xlat16_4.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_3.xyz = fma(half3(FGlobals._Metallic), u_xlat16_3.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_25 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_6.xyz = half3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_25 = (-u_xlat16_25) + FGlobals._Smoothness;
    u_xlat16_25 = u_xlat16_25 + half(1.0);
    u_xlat16_25 = clamp(u_xlat16_25, 0.0h, 1.0h);
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + half3(u_xlat16_25);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz;
    u_xlat2.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = float3(u_xlat26) * u_xlat4.xyz;
    u_xlat26 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat4.xyz);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat26 = max(u_xlat26, 0.319999993);
    u_xlat28 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat5.x = fma(u_xlat28, u_xlat28, 1.5);
    u_xlat26 = u_xlat26 * u_xlat5.x;
    u_xlat5.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat5.x = rsqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * input.TEXCOORD1.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat12 = u_xlat28 * u_xlat28;
    u_xlat20 = fma(u_xlat12, u_xlat12, -1.0);
    u_xlat4.x = fma(u_xlat4.x, u_xlat20, 1.00001001);
    u_xlat26 = u_xlat26 * u_xlat4.x;
    u_xlat26 = u_xlat12 / u_xlat26;
    u_xlat16_25 = half(u_xlat28 * u_xlat12);
    u_xlat16_25 = fma((-u_xlat16_25), half(0.280000001), half(1.0));
    u_xlat26 = u_xlat26 + -9.99999975e-05;
    u_xlat26 = max(u_xlat26, 0.0);
    u_xlat26 = min(u_xlat26, 100.0);
    u_xlat4.xyz = fma(float3(u_xlat26), float3(u_xlat16_3.xyz), float3(u_xlat16_6.xyz));
    u_xlat4.xyz = u_xlat4.xyz * float3(FGlobals._LightColor0.xyz);
    u_xlat26 = dot(u_xlat5.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
    u_xlat16_27 = half((-u_xlat5.x) + 1.0);
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_3.xyz = fma(half3(u_xlat16_27), u_xlat16_7.xyz, u_xlat16_3.xyz);
    u_xlat4.xyz = fma(u_xlat4.xyz, float3(u_xlat26), float3(u_xlat16_1.xyz));
    u_xlatb26 = u_xlat28<0.00499999989;
    u_xlat28 = u_xlat28 * 8.29800034;
    u_xlat16_1.x = (u_xlatb26) ? half(0.0) : half(u_xlat28);
    u_xlat16_9 = dot((-u_xlat2.xyz), input.TEXCOORD1.xyz);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_6.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_9)), (-u_xlat2.xyz)));
    u_xlat2.x = dot(u_xlat16_6.zxy, (-u_xlat16_6.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_6.z) : (-float(u_xlat16_6.z));
    u_xlat5.z = u_xlat2.x * float(u_xlat16_6.x);
    u_xlat2.x = u_xlat2.x * float(u_xlat16_6.z);
    u_xlat5.xy = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.yz);
    u_xlat2.yz = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.xy);
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat26 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat26 = sin(u_xlat26);
    u_xlat26 = u_xlat26 * FGlobals._NormalRand.w;
    u_xlat26 = fract(u_xlat26);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(u_xlat16_6.xyz));
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_25);
    u_xlat2.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_3.xyz), u_xlat4.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat26 = input.TEXCOORD4;
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat26), u_xlat2.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float2 u_xlat8;
    half u_xlat16_9;
    float2 u_xlat10;
    float u_xlat12;
    float u_xlat20;
    bool u_xlatb24;
    half u_xlat16_25;
    float u_xlat26;
    bool u_xlatb26;
    half u_xlat16_27;
    float u_xlat28;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat10.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat10.xy = trunc(u_xlat10.xy);
    u_xlat2.x = u_xlat10.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat10.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat10.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat10.xy));
    u_xlat16_25 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_25);
    u_xlatb26 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb26) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_25) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat10.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = fma(u_xlat16_4.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_3.xyz = fma(half3(FGlobals._Metallic), u_xlat16_3.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_25 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_6.xyz = half3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_25 = (-u_xlat16_25) + FGlobals._Smoothness;
    u_xlat16_25 = u_xlat16_25 + half(1.0);
    u_xlat16_25 = clamp(u_xlat16_25, 0.0h, 1.0h);
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + half3(u_xlat16_25);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz;
    u_xlat2.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = float3(u_xlat26) * u_xlat4.xyz;
    u_xlat26 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat4.xyz);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat26 = max(u_xlat26, 0.319999993);
    u_xlat28 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat5.x = fma(u_xlat28, u_xlat28, 1.5);
    u_xlat26 = u_xlat26 * u_xlat5.x;
    u_xlat5.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat5.x = rsqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * input.TEXCOORD1.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat12 = u_xlat28 * u_xlat28;
    u_xlat20 = fma(u_xlat12, u_xlat12, -1.0);
    u_xlat4.x = fma(u_xlat4.x, u_xlat20, 1.00001001);
    u_xlat26 = u_xlat26 * u_xlat4.x;
    u_xlat26 = u_xlat12 / u_xlat26;
    u_xlat16_25 = half(u_xlat28 * u_xlat12);
    u_xlat16_25 = fma((-u_xlat16_25), half(0.280000001), half(1.0));
    u_xlat26 = u_xlat26 + -9.99999975e-05;
    u_xlat26 = max(u_xlat26, 0.0);
    u_xlat26 = min(u_xlat26, 100.0);
    u_xlat4.xyz = fma(float3(u_xlat26), float3(u_xlat16_3.xyz), float3(u_xlat16_6.xyz));
    u_xlat4.xyz = u_xlat4.xyz * float3(FGlobals._LightColor0.xyz);
    u_xlat26 = dot(u_xlat5.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
    u_xlat16_27 = half((-u_xlat5.x) + 1.0);
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_3.xyz = fma(half3(u_xlat16_27), u_xlat16_7.xyz, u_xlat16_3.xyz);
    u_xlat4.xyz = fma(u_xlat4.xyz, float3(u_xlat26), float3(u_xlat16_1.xyz));
    u_xlatb26 = u_xlat28<0.00499999989;
    u_xlat28 = u_xlat28 * 8.29800034;
    u_xlat16_1.x = (u_xlatb26) ? half(0.0) : half(u_xlat28);
    u_xlat16_9 = dot((-u_xlat2.xyz), input.TEXCOORD1.xyz);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_6.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_9)), (-u_xlat2.xyz)));
    u_xlat2.x = dot(u_xlat16_6.zxy, (-u_xlat16_6.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_6.z) : (-float(u_xlat16_6.z));
    u_xlat5.z = u_xlat2.x * float(u_xlat16_6.x);
    u_xlat2.x = u_xlat2.x * float(u_xlat16_6.z);
    u_xlat5.xy = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.yz);
    u_xlat2.yz = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.xy);
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat26 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat26 = sin(u_xlat26);
    u_xlat26 = u_xlat26 * FGlobals._NormalRand.w;
    u_xlat26 = fract(u_xlat26);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(u_xlat16_6.xyz));
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_25);
    u_xlat2.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_3.xyz), u_xlat4.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat26 = input.TEXCOORD4;
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat26), u_xlat2.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler samplerunity_SpecCube0 [[ sampler (2) ]],
    sampler samplerunity_NHxRoughness [[ sampler (3) ]],
    sampler sampler_MainTex [[ sampler (4) ]],
    sampler sampler_TransparencyLM [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(4) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    float2 u_xlat10;
    bool u_xlatb22;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat32;
    half u_xlat16_34;
    half u_xlat16_36;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat10.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat10.xy = trunc(u_xlat10.xy);
    u_xlat0.x = u_xlat10.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat10.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat10.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat10.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb30 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb30) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat10.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_1.x = dot((-u_xlat0.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat0.xyz)));
    u_xlat30 = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb30 = u_xlat30<9.99999975e-06;
    u_xlat30 = (u_xlatb30) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat2.z = u_xlat30 * float(u_xlat16_1.x);
    u_xlat3.x = u_xlat30 * float(u_xlat16_1.z);
    u_xlat2.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat3.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat30 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat30 = sin(u_xlat30);
    u_xlat30 = u_xlat30 * FGlobals._NormalRand.w;
    u_xlat30 = fract(u_xlat30);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat30), float3(u_xlat16_1.xyz));
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * u_xlat2.xyz;
    u_xlat3.z = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb30 = u_xlat3.z<0.00499999989;
    u_xlat32 = u_xlat3.z * 8.29800034;
    u_xlat16_1.x = (u_xlatb30) ? half(0.0) : half(u_xlat32);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_4.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_4.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_4.x, half(1.0));
    u_xlat16_4.x = u_xlat16_4.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(FGlobals._Occlusion);
    u_xlat30 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat30 = floor(u_xlat30);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat30 = u_xlat30 + u_xlat2.x;
    u_xlat30 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat30);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_34 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat30 = u_xlat30 / float(u_xlat16_34);
    u_xlatb22 = u_xlat30>=(-u_xlat30);
    u_xlat30 = fract(abs(u_xlat30));
    u_xlat30 = (u_xlatb22) ? u_xlat30 : (-u_xlat30);
    u_xlat5.x = float(u_xlat16_34) * u_xlat30;
    u_xlat30 = u_xlat5.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat30 = floor(u_xlat30);
    u_xlat5.y = (-u_xlat30);
    u_xlat2.xy = u_xlat2.xy + u_xlat5.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_5.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = fma(u_xlat16_5.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_6.xyz = fma(half3(FGlobals._Metallic), u_xlat16_6.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_34 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_36 = (-u_xlat16_34) + FGlobals._Smoothness;
    u_xlat16_7.xyz = u_xlat16_2.xyz * half3(u_xlat16_34);
    u_xlat16_34 = u_xlat16_36 + half(1.0);
    u_xlat16_34 = clamp(u_xlat16_34, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_34);
    u_xlat30 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat2.xyz = float3(u_xlat30) * input.TEXCOORD1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat32 = u_xlat30;
    u_xlat32 = clamp(u_xlat32, 0.0f, 1.0f);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = fma(u_xlat2.xyz, (-float3(u_xlat30)), u_xlat0.xyz);
    u_xlat30 = dot(u_xlat2.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat0.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat3.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat3.xz).x;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat16_9.xyz = half3(fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_7.xyz)));
    u_xlat16_34 = half((-u_xlat32) + 1.0);
    u_xlat16_0.x = u_xlat16_34 * u_xlat16_34;
    u_xlat16_0.x = u_xlat16_34 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_34 * u_xlat16_0.x;
    u_xlat16_6.xyz = fma(u_xlat16_0.xxx, u_xlat16_8.xyz, u_xlat16_6.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_6.xyz = u_xlat16_6.xyz * half3(FGlobals._Occlusion);
    u_xlat16_4.xyz = fma(u_xlat16_6.xyz, u_xlat16_7.xyz, u_xlat16_4.xyz);
    u_xlat16_1 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_34 = dot(u_xlat16_1, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_34 = clamp(u_xlat16_34, 0.0h, 1.0h);
    u_xlat16_6.xyz = half3(u_xlat16_34) * FGlobals._LightColor0.xyz;
    u_xlat16_6.xyz = half3(float3(u_xlat30) * float3(u_xlat16_6.xyz));
    u_xlat16_4.xyz = fma(u_xlat16_9.xyz, u_xlat16_6.xyz, u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_4.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat30 = input.TEXCOORD4;
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat30), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler samplerunity_SpecCube0 [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_TransparencyLM [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float2 u_xlat2;
    bool u_xlatb2;
    float3 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    float3 u_xlat11;
    half3 u_xlat16_11;
    float3 u_xlat13;
    float2 u_xlat22;
    float u_xlat33;
    bool u_xlatb33;
    float u_xlat36;
    half u_xlat16_38;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat11.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat11.xy = trunc(u_xlat11.xy);
    u_xlat0.x = u_xlat11.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat11.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat11.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat11.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb33 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb33) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat11.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * FGlobals._NormalRand.w;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat11.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat13.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat11.xyz = fma(u_xlat11.xyz, u_xlat2.xxx, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_1.x = dot((-u_xlat13.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat13.xyz)));
    u_xlat2.x = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat3.z = float(u_xlat16_1.x) * u_xlat2.x;
    u_xlat4.x = float(u_xlat16_1.z) * u_xlat2.x;
    u_xlat3.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat4.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat3.xyz = u_xlat3.xyz + (-u_xlat4.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * float3(FGlobals._NormalDiff);
    u_xlat3.xyz = fma(u_xlat3.xyz, u_xlat0.xxx, float3(u_xlat16_1.xyz));
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb2 = u_xlat0.x<0.00499999989;
    u_xlat36 = u_xlat0.x * 8.29800034;
    u_xlat16_1.x = (u_xlatb2) ? half(0.0) : half(u_xlat36);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat3.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_5.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_5.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_5.x, half(1.0));
    u_xlat16_5.x = u_xlat16_5.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_38 = half(u_xlat0.x * u_xlat2.x);
    u_xlat0.x = fma(u_xlat0.x, u_xlat0.x, 1.5);
    u_xlat16_38 = fma((-u_xlat16_38), half(0.280000001), half(1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(u_xlat16_38);
    u_xlat3.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat3.x = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat11.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat3.x = max(u_xlat3.x, 0.319999993);
    u_xlat0.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
    u_xlat11.x = clamp(u_xlat11.x, 0.0f, 1.0f);
    u_xlat11.x = u_xlat11.x * u_xlat11.x;
    u_xlat22.x = fma(u_xlat2.x, u_xlat2.x, -1.0);
    u_xlat11.x = fma(u_xlat11.x, u_xlat22.x, 1.00001001);
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat11.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat22.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat22.xy = trunc(u_xlat22.xy);
    u_xlat11.x = u_xlat22.x + u_xlat11.x;
    u_xlat11.x = fma(u_xlat22.y, float(FGlobals._AlbedoTileSplitU), u_xlat11.x);
    u_xlat22.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat22.xy));
    u_xlat16_38 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat11.x = u_xlat11.x / float(u_xlat16_38);
    u_xlatb2 = u_xlat11.x>=(-u_xlat11.x);
    u_xlat11.x = fract(abs(u_xlat11.x));
    u_xlat11.x = (u_xlatb2) ? u_xlat11.x : (-u_xlat11.x);
    u_xlat4.x = float(u_xlat16_38) * u_xlat11.x;
    u_xlat11.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat4.y = (-u_xlat11.x);
    u_xlat11.xy = u_xlat22.xy + u_xlat4.xy;
    u_xlat11.xy = u_xlat11.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_11.xyz = _MainTex.sample(sampler_MainTex, u_xlat11.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_4.xyz;
    u_xlat16_7.xyz = fma(u_xlat16_4.xyz, u_xlat16_11.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_7.xyz = fma(half3(FGlobals._Metallic), u_xlat16_7.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_38 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_8.xyz = half3(u_xlat16_38) * u_xlat16_6.xyz;
    u_xlat16_38 = (-u_xlat16_38) + FGlobals._Smoothness;
    u_xlat16_38 = u_xlat16_38 + half(1.0);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0h, 1.0h);
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + half3(u_xlat16_38);
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_7.xyz), float3(u_xlat16_8.xyz));
    u_xlat16_1 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_38 = dot(u_xlat16_1, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0h, 1.0h);
    u_xlat16_10.xyz = half3(u_xlat16_38) * FGlobals._LightColor0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_10.xyz);
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_4.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_10.xyz = u_xlat16_10.xyz * half3(FGlobals._Occlusion);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat33 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat13.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16_38 = half((-u_xlat2.x) + 1.0);
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_7.xyz = fma(half3(u_xlat16_38), u_xlat16_9.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat33), float3(u_xlat16_8.xyz));
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_7.xyz), u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat33 = input.TEXCOORD4;
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat33), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler samplerunity_SpecCube0 [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_TransparencyLM [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half4 u_xlat16_1;
    float2 u_xlat2;
    bool u_xlatb2;
    float3 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    float3 u_xlat11;
    half3 u_xlat16_11;
    float3 u_xlat13;
    float2 u_xlat22;
    float u_xlat33;
    bool u_xlatb33;
    float u_xlat36;
    half u_xlat16_38;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat11.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat11.xy = trunc(u_xlat11.xy);
    u_xlat0.x = u_xlat11.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat11.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat11.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat11.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb33 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb33) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat11.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * FGlobals._NormalRand.w;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat11.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat13.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat11.xyz = fma(u_xlat11.xyz, u_xlat2.xxx, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_1.x = dot((-u_xlat13.xyz), input.TEXCOORD1.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_1.xxx)), (-u_xlat13.xyz)));
    u_xlat2.x = dot(u_xlat16_1.zxy, (-u_xlat16_1.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_1.z) : (-float(u_xlat16_1.z));
    u_xlat3.z = float(u_xlat16_1.x) * u_xlat2.x;
    u_xlat4.x = float(u_xlat16_1.z) * u_xlat2.x;
    u_xlat3.xy = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.yz);
    u_xlat4.yz = (-float2(u_xlat16_1.xy)) * float2(u_xlat16_1.xy);
    u_xlat3.xyz = u_xlat3.xyz + (-u_xlat4.xyz);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * float3(FGlobals._NormalDiff);
    u_xlat3.xyz = fma(u_xlat3.xyz, u_xlat0.xxx, float3(u_xlat16_1.xyz));
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.x = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb2 = u_xlat0.x<0.00499999989;
    u_xlat36 = u_xlat0.x * 8.29800034;
    u_xlat16_1.x = (u_xlatb2) ? half(0.0) : half(u_xlat36);
    u_xlat16_1 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat3.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_5.x = u_xlat16_1.w + half(-1.0);
    u_xlat16_5.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_5.x, half(1.0));
    u_xlat16_5.x = u_xlat16_5.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_38 = half(u_xlat0.x * u_xlat2.x);
    u_xlat0.x = fma(u_xlat0.x, u_xlat0.x, 1.5);
    u_xlat16_38 = fma((-u_xlat16_38), half(0.280000001), half(1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz * half3(u_xlat16_38);
    u_xlat3.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat3.x = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat11.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat3.x = max(u_xlat3.x, 0.319999993);
    u_xlat0.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * input.TEXCOORD1.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
    u_xlat11.x = clamp(u_xlat11.x, 0.0f, 1.0f);
    u_xlat11.x = u_xlat11.x * u_xlat11.x;
    u_xlat22.x = fma(u_xlat2.x, u_xlat2.x, -1.0);
    u_xlat11.x = fma(u_xlat11.x, u_xlat22.x, 1.00001001);
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat11.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat22.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat22.xy = trunc(u_xlat22.xy);
    u_xlat11.x = u_xlat22.x + u_xlat11.x;
    u_xlat11.x = fma(u_xlat22.y, float(FGlobals._AlbedoTileSplitU), u_xlat11.x);
    u_xlat22.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat22.xy));
    u_xlat16_38 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat11.x = u_xlat11.x / float(u_xlat16_38);
    u_xlatb2 = u_xlat11.x>=(-u_xlat11.x);
    u_xlat11.x = fract(abs(u_xlat11.x));
    u_xlat11.x = (u_xlatb2) ? u_xlat11.x : (-u_xlat11.x);
    u_xlat4.x = float(u_xlat16_38) * u_xlat11.x;
    u_xlat11.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat4.y = (-u_xlat11.x);
    u_xlat11.xy = u_xlat22.xy + u_xlat4.xy;
    u_xlat11.xy = u_xlat11.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_11.xyz = _MainTex.sample(sampler_MainTex, u_xlat11.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_4.xyz;
    u_xlat16_7.xyz = fma(u_xlat16_4.xyz, u_xlat16_11.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_7.xyz = fma(half3(FGlobals._Metallic), u_xlat16_7.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_38 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_8.xyz = half3(u_xlat16_38) * u_xlat16_6.xyz;
    u_xlat16_38 = (-u_xlat16_38) + FGlobals._Smoothness;
    u_xlat16_38 = u_xlat16_38 + half(1.0);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0h, 1.0h);
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + half3(u_xlat16_38);
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_7.xyz), float3(u_xlat16_8.xyz));
    u_xlat16_1 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_38 = dot(u_xlat16_1, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_38 = clamp(u_xlat16_38, 0.0h, 1.0h);
    u_xlat16_10.xyz = half3(u_xlat16_38) * FGlobals._LightColor0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_10.xyz);
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_4.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_10.xyz = u_xlat16_10.xyz * half3(FGlobals._Occlusion);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat33 = dot(u_xlat3.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat2.x = dot(u_xlat3.xyz, u_xlat13.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16_38 = half((-u_xlat2.x) + 1.0);
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
    u_xlat16_7.xyz = fma(half3(u_xlat16_38), u_xlat16_9.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat33), float3(u_xlat16_8.xyz));
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_7.xyz), u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat33 = input.TEXCOORD4;
    u_xlat33 = clamp(u_xlat33, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat33), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler samplerunity_SpecCube0 [[ sampler (2) ]],
    sampler samplerunity_NHxRoughness [[ sampler (3) ]],
    sampler sampler_MainTex [[ sampler (4) ]],
    sampler sampler_TransparencyLM [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(4) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float3 u_xlat5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half3 u_xlat16_10;
    float2 u_xlat11;
    bool u_xlatb26;
    bool u_xlatb33;
    half u_xlat16_34;
    float u_xlat35;
    bool u_xlatb35;
    half u_xlat16_36;
    float u_xlat37;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat11.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat11.xy = trunc(u_xlat11.xy);
    u_xlat0.x = u_xlat11.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat11.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat11.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat11.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb33 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb33) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat11.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat2.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat35 = rsqrt(u_xlat35);
    u_xlat2.xyz = float3(u_xlat35) * u_xlat2.xyz;
    u_xlat16_34 = dot((-u_xlat2.xyz), input.TEXCOORD1.xyz);
    u_xlat16_34 = u_xlat16_34 + u_xlat16_34;
    u_xlat16_3.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_34)), (-u_xlat2.xyz)));
    u_xlat35 = dot(u_xlat16_3.zxy, (-u_xlat16_3.xyz));
    u_xlatb35 = u_xlat35<9.99999975e-06;
    u_xlat35 = (u_xlatb35) ? float(u_xlat16_3.z) : (-float(u_xlat16_3.z));
    u_xlat4.z = u_xlat35 * float(u_xlat16_3.x);
    u_xlat5.x = u_xlat35 * float(u_xlat16_3.z);
    u_xlat4.xy = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.yz);
    u_xlat5.yz = (-float2(u_xlat16_3.xy)) * float2(u_xlat16_3.xy);
    u_xlat4.xyz = u_xlat4.xyz + (-u_xlat5.xyz);
    u_xlat35 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat35 = rsqrt(u_xlat35);
    u_xlat4.xyz = float3(u_xlat35) * u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz * float3(FGlobals._NormalDiff);
    u_xlat35 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat35 = sin(u_xlat35);
    u_xlat35 = u_xlat35 * FGlobals._NormalRand.w;
    u_xlat35 = fract(u_xlat35);
    u_xlat4.xyz = fma(u_xlat4.xyz, float3(u_xlat35), float3(u_xlat16_3.xyz));
    u_xlat35 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat35 = rsqrt(u_xlat35);
    u_xlat4.xyz = float3(u_xlat35) * u_xlat4.xyz;
    u_xlat5.z = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlatb35 = u_xlat5.z<0.00499999989;
    u_xlat37 = u_xlat5.z * 8.29800034;
    u_xlat16_34 = (u_xlatb35) ? half(0.0) : half(u_xlat37);
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat4.xyz, bias(float(u_xlat16_34)));
    u_xlat16_34 = u_xlat16_0.w + half(-1.0);
    u_xlat16_34 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_34, half(1.0));
    u_xlat16_34 = u_xlat16_34 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat16_0.xyz * half3(u_xlat16_34);
    u_xlat16_3.xyz = u_xlat16_3.xyz * half3(FGlobals._Occlusion);
    u_xlat35 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat35 = floor(u_xlat35);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat35 = u_xlat35 + u_xlat4.x;
    u_xlat35 = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat35);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_34 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat35 = u_xlat35 / float(u_xlat16_34);
    u_xlatb26 = u_xlat35>=(-u_xlat35);
    u_xlat35 = fract(abs(u_xlat35));
    u_xlat35 = (u_xlatb26) ? u_xlat35 : (-u_xlat35);
    u_xlat6.x = float(u_xlat16_34) * u_xlat35;
    u_xlat35 = u_xlat6.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat35 = floor(u_xlat35);
    u_xlat6.y = (-u_xlat35);
    u_xlat4.xy = u_xlat4.xy + u_xlat6.xy;
    u_xlat4.xy = u_xlat4.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_7.xyz = fma(u_xlat16_6.xyz, u_xlat16_4.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlat16_7.xyz = fma(half3(FGlobals._Metallic), u_xlat16_7.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_34 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_36 = (-u_xlat16_34) + FGlobals._Smoothness;
    u_xlat16_8.xyz = half3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat16_34 = u_xlat16_36 + half(1.0);
    u_xlat16_34 = clamp(u_xlat16_34, 0.0h, 1.0h);
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + half3(u_xlat16_34);
    u_xlat35 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat35 = rsqrt(u_xlat35);
    u_xlat4.xyz = float3(u_xlat35) * input.TEXCOORD1.xyz;
    u_xlat35 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat37 = u_xlat35;
    u_xlat37 = clamp(u_xlat37, 0.0f, 1.0f);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat2.xyz = fma(u_xlat4.xyz, (-float3(u_xlat35)), u_xlat2.xyz);
    u_xlat35 = dot(u_xlat4.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat35 = clamp(u_xlat35, 0.0f, 1.0f);
    u_xlat2.x = dot(u_xlat2.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat5.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat5.xz).x;
    u_xlat2.x = u_xlat2.x * 16.0;
    u_xlat16_10.xyz = half3(fma(u_xlat2.xxx, float3(u_xlat16_7.xyz), float3(u_xlat16_8.xyz)));
    u_xlat16_34 = half((-u_xlat37) + 1.0);
    u_xlat16_2.x = u_xlat16_34 * u_xlat16_34;
    u_xlat16_2.x = u_xlat16_34 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_34 * u_xlat16_2.x;
    u_xlat16_7.xyz = fma(u_xlat16_2.xxx, u_xlat16_9.xyz, u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_8.xyz, u_xlat16_3.xyz);
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_34 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_34 = clamp(u_xlat16_34, 0.0h, 1.0h);
    u_xlat16_3.xyz = half3(u_xlat16_34) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = half3(float3(u_xlat35) * float3(u_xlat16_3.xyz));
    u_xlat16_1.xyz = fma(u_xlat16_10.xyz, u_xlat16_3.xyz, u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat35 = input.TEXCOORD4;
    u_xlat35 = clamp(u_xlat35, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat35), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler samplerunity_SpecCube0 [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_TransparencyLM [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float2 u_xlat8;
    half u_xlat16_9;
    float2 u_xlat10;
    float u_xlat12;
    float u_xlat20;
    bool u_xlatb24;
    half u_xlat16_25;
    float u_xlat26;
    bool u_xlatb26;
    half u_xlat16_27;
    float u_xlat28;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat10.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat10.xy = trunc(u_xlat10.xy);
    u_xlat2.x = u_xlat10.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat10.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat10.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat10.xy));
    u_xlat16_25 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_25);
    u_xlatb26 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb26) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_25) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat10.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = fma(u_xlat16_4.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_3.xyz = fma(half3(FGlobals._Metallic), u_xlat16_3.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_25 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_6.xyz = half3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_25 = (-u_xlat16_25) + FGlobals._Smoothness;
    u_xlat16_25 = u_xlat16_25 + half(1.0);
    u_xlat16_25 = clamp(u_xlat16_25, 0.0h, 1.0h);
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + half3(u_xlat16_25);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz;
    u_xlat2.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = float3(u_xlat26) * u_xlat4.xyz;
    u_xlat26 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat4.xyz);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat26 = max(u_xlat26, 0.319999993);
    u_xlat28 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat5.x = fma(u_xlat28, u_xlat28, 1.5);
    u_xlat26 = u_xlat26 * u_xlat5.x;
    u_xlat5.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat5.x = rsqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * input.TEXCOORD1.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat12 = u_xlat28 * u_xlat28;
    u_xlat20 = fma(u_xlat12, u_xlat12, -1.0);
    u_xlat4.x = fma(u_xlat4.x, u_xlat20, 1.00001001);
    u_xlat26 = u_xlat26 * u_xlat4.x;
    u_xlat26 = u_xlat12 / u_xlat26;
    u_xlat16_25 = half(u_xlat28 * u_xlat12);
    u_xlat16_25 = fma((-u_xlat16_25), half(0.280000001), half(1.0));
    u_xlat26 = u_xlat26 + -9.99999975e-05;
    u_xlat26 = max(u_xlat26, 0.0);
    u_xlat26 = min(u_xlat26, 100.0);
    u_xlat4.xyz = fma(float3(u_xlat26), float3(u_xlat16_3.xyz), float3(u_xlat16_6.xyz));
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_27 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_27 = clamp(u_xlat16_27, 0.0h, 1.0h);
    u_xlat16_6.xyz = half3(u_xlat16_27) * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat16_6.xyz);
    u_xlat26 = dot(u_xlat5.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
    u_xlat16_27 = half((-u_xlat5.x) + 1.0);
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_3.xyz = fma(half3(u_xlat16_27), u_xlat16_7.xyz, u_xlat16_3.xyz);
    u_xlat4.xyz = fma(u_xlat4.xyz, float3(u_xlat26), float3(u_xlat16_1.xyz));
    u_xlatb26 = u_xlat28<0.00499999989;
    u_xlat28 = u_xlat28 * 8.29800034;
    u_xlat16_1.x = (u_xlatb26) ? half(0.0) : half(u_xlat28);
    u_xlat16_9 = dot((-u_xlat2.xyz), input.TEXCOORD1.xyz);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_6.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_9)), (-u_xlat2.xyz)));
    u_xlat2.x = dot(u_xlat16_6.zxy, (-u_xlat16_6.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_6.z) : (-float(u_xlat16_6.z));
    u_xlat5.z = u_xlat2.x * float(u_xlat16_6.x);
    u_xlat2.x = u_xlat2.x * float(u_xlat16_6.z);
    u_xlat5.xy = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.yz);
    u_xlat2.yz = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.xy);
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat26 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat26 = sin(u_xlat26);
    u_xlat26 = u_xlat26 * FGlobals._NormalRand.w;
    u_xlat26 = fract(u_xlat26);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(u_xlat16_6.xyz));
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_25);
    u_xlat2.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_3.xyz), u_xlat4.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat26 = input.TEXCOORD4;
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat26), u_xlat2.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_SpecCube0_HDR;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Occlusion;
    half _Metallic;
    half _Smoothness;
    float4 _NormalRand;
    half _NormalDiff;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler samplerunity_SpecCube0 [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_TransparencyLM [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    float2 u_xlat8;
    half u_xlat16_9;
    float2 u_xlat10;
    float u_xlat12;
    float u_xlat20;
    bool u_xlatb24;
    half u_xlat16_25;
    float u_xlat26;
    bool u_xlatb26;
    half u_xlat16_27;
    float u_xlat28;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat8.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat0.x = u_xlat8.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat8.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat8.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat8.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb24 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb24) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat10.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat10.xy = trunc(u_xlat10.xy);
    u_xlat2.x = u_xlat10.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat10.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat10.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat10.xy));
    u_xlat16_25 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_25);
    u_xlatb26 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb26) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_25) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat10.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = fma(u_xlat16_4.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_3.xyz = fma(half3(FGlobals._Metallic), u_xlat16_3.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_25 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_6.xyz = half3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_25 = (-u_xlat16_25) + FGlobals._Smoothness;
    u_xlat16_25 = u_xlat16_25 + half(1.0);
    u_xlat16_25 = clamp(u_xlat16_25, 0.0h, 1.0h);
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + half3(u_xlat16_25);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz;
    u_xlat2.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat4.xyz = float3(u_xlat26) * u_xlat4.xyz;
    u_xlat26 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat4.xyz);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat26 = max(u_xlat26, 0.319999993);
    u_xlat28 = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat5.x = fma(u_xlat28, u_xlat28, 1.5);
    u_xlat26 = u_xlat26 * u_xlat5.x;
    u_xlat5.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat5.x = rsqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * input.TEXCOORD1.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat12 = u_xlat28 * u_xlat28;
    u_xlat20 = fma(u_xlat12, u_xlat12, -1.0);
    u_xlat4.x = fma(u_xlat4.x, u_xlat20, 1.00001001);
    u_xlat26 = u_xlat26 * u_xlat4.x;
    u_xlat26 = u_xlat12 / u_xlat26;
    u_xlat16_25 = half(u_xlat28 * u_xlat12);
    u_xlat16_25 = fma((-u_xlat16_25), half(0.280000001), half(1.0));
    u_xlat26 = u_xlat26 + -9.99999975e-05;
    u_xlat26 = max(u_xlat26, 0.0);
    u_xlat26 = min(u_xlat26, 100.0);
    u_xlat4.xyz = fma(float3(u_xlat26), float3(u_xlat16_3.xyz), float3(u_xlat16_6.xyz));
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_27 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_27 = clamp(u_xlat16_27, 0.0h, 1.0h);
    u_xlat16_6.xyz = half3(u_xlat16_27) * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat16_6.xyz);
    u_xlat26 = dot(u_xlat5.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
    u_xlat16_27 = half((-u_xlat5.x) + 1.0);
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_3.xyz = fma(half3(u_xlat16_27), u_xlat16_7.xyz, u_xlat16_3.xyz);
    u_xlat4.xyz = fma(u_xlat4.xyz, float3(u_xlat26), float3(u_xlat16_1.xyz));
    u_xlatb26 = u_xlat28<0.00499999989;
    u_xlat28 = u_xlat28 * 8.29800034;
    u_xlat16_1.x = (u_xlatb26) ? half(0.0) : half(u_xlat28);
    u_xlat16_9 = dot((-u_xlat2.xyz), input.TEXCOORD1.xyz);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_6.xyz = half3(fma(input.TEXCOORD1.xyz, (-float3(u_xlat16_9)), (-u_xlat2.xyz)));
    u_xlat2.x = dot(u_xlat16_6.zxy, (-u_xlat16_6.xyz));
    u_xlatb2 = u_xlat2.x<9.99999975e-06;
    u_xlat2.x = (u_xlatb2) ? float(u_xlat16_6.z) : (-float(u_xlat16_6.z));
    u_xlat5.z = u_xlat2.x * float(u_xlat16_6.x);
    u_xlat2.x = u_xlat2.x * float(u_xlat16_6.z);
    u_xlat5.xy = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.yz);
    u_xlat2.yz = (-float2(u_xlat16_6.xy)) * float2(u_xlat16_6.xy);
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(FGlobals._NormalDiff);
    u_xlat26 = dot(input.TEXCOORD2.xyz, FGlobals._NormalRand.xyz);
    u_xlat26 = sin(u_xlat26);
    u_xlat26 = u_xlat26 * FGlobals._NormalRand.w;
    u_xlat26 = fract(u_xlat26);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(u_xlat26), float3(u_xlat16_6.xyz));
    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat2.xyz = float3(u_xlat26) * u_xlat2.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat2.xyz, bias(float(u_xlat16_1.x)));
    u_xlat16_1.x = u_xlat16_0.w + half(-1.0);
    u_xlat16_1.x = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat16_1.x, half(1.0));
    u_xlat16_1.x = u_xlat16_1.x * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(FGlobals._Occlusion);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_25);
    u_xlat2.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_3.xyz), u_xlat4.xyz);
    u_xlat2.xyz = u_xlat2.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat26 = input.TEXCOORD4;
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat26), u_xlat2.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
}
}
 Pass {
  Name "FORWARD"
  LOD 5000
  Tags { "LIGHTMODE" = "FORWARDADD" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  ZWrite Off
  GpuProgramID 100006
Program "vp" {
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal " {
Keywords { "DIRECTIONAL" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Metallic;
    half _Smoothness;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    bool u_xlatb12;
    half u_xlat16_13;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat12 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat2.xyz = float3(u_xlat12) * input.TEXCOORD1.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = fma(u_xlat2.xyz, (-float3(u_xlat12)), u_xlat0.xyz);
    u_xlat12 = dot(u_xlat2.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat16_1.xyz = half3(float3(u_xlat12) * float3(FGlobals._LightColor0.xyz));
    u_xlat0.x = dot(u_xlat0.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.y = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat0.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat4.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat8.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat4.x = u_xlat8.x + u_xlat4.x;
    u_xlat4.x = fma(u_xlat8.y, float(FGlobals._AlbedoTileSplitU), u_xlat4.x);
    u_xlat8.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat8.xy));
    u_xlat16_13 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat4.x = u_xlat4.x / float(u_xlat16_13);
    u_xlatb2 = u_xlat4.x>=(-u_xlat4.x);
    u_xlat4.x = fract(abs(u_xlat4.x));
    u_xlat4.x = (u_xlatb2) ? u_xlat4.x : (-u_xlat4.x);
    u_xlat2.x = float(u_xlat16_13) * u_xlat4.x;
    u_xlat4.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat2.y = (-u_xlat4.x);
    u_xlat4.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat4.xy = u_xlat4.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_3.xyz = fma(u_xlat16_2.xyz, u_xlat16_4.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
    u_xlat16_3.xyz = fma(half3(FGlobals._Metallic), u_xlat16_3.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_3.xyz = half3(u_xlat0.xxx * float3(u_xlat16_3.xyz));
    u_xlat16_13 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_3.xyz = fma(u_xlat16_4.xyz, half3(u_xlat16_13), u_xlat16_3.xyz);
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Metallic;
    half _Smoothness;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float3 u_xlat6;
    half u_xlat16_6;
    float2 u_xlat8;
    half u_xlat16_8;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 0.00100000005);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat12 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat12 = max(u_xlat12, 0.319999993);
    u_xlat16_2.x = (-FGlobals._Smoothness) + half(1.0);
    u_xlat16_6 = fma(u_xlat16_2.x, u_xlat16_2.x, half(1.5));
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat12 = u_xlat12 * float(u_xlat16_6);
    u_xlat6.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat6.x = rsqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * input.TEXCOORD1.xyz;
    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat4.x = dot(u_xlat6.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_8 = fma(u_xlat16_2.x, u_xlat16_2.x, half(-1.0));
    u_xlat0.x = fma(u_xlat0.x, float(u_xlat16_8), 1.00001001);
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = float(u_xlat16_2.x) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat8.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat8.x = u_xlat8.x + u_xlat2.x;
    u_xlat8.x = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat8.x);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat8.x = u_xlat8.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
    u_xlat8.x = fract(abs(u_xlat8.x));
    u_xlat8.x = (u_xlatb12) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat8.x;
    u_xlat8.x = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat3.y = (-u_xlat8.x);
    u_xlat8.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat8.xy = u_xlat8.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat8.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_1.xyz = fma(u_xlat16_3.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = fma(half3(FGlobals._Metallic), u_xlat16_1.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.xzw = u_xlat0.xxx * float3(u_xlat16_1.xyz);
    u_xlat16_1.x = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat0.xzw = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_1.xxx), u_xlat0.xzw);
    u_xlat0.xzw = u_xlat0.xzw * float3(FGlobals._LightColor0.xyz);
    u_xlat0.xyz = u_xlat4.xxx * u_xlat0.xzw;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Metallic;
    half _Smoothness;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float3 u_xlat6;
    half u_xlat16_6;
    float2 u_xlat8;
    half u_xlat16_8;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 0.00100000005);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat12 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat12 = max(u_xlat12, 0.319999993);
    u_xlat16_2.x = (-FGlobals._Smoothness) + half(1.0);
    u_xlat16_6 = fma(u_xlat16_2.x, u_xlat16_2.x, half(1.5));
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat12 = u_xlat12 * float(u_xlat16_6);
    u_xlat6.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat6.x = rsqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * input.TEXCOORD1.xyz;
    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat4.x = dot(u_xlat6.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_8 = fma(u_xlat16_2.x, u_xlat16_2.x, half(-1.0));
    u_xlat0.x = fma(u_xlat0.x, float(u_xlat16_8), 1.00001001);
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = float(u_xlat16_2.x) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat8.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat8.x = u_xlat8.x + u_xlat2.x;
    u_xlat8.x = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat8.x);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat8.x = u_xlat8.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
    u_xlat8.x = fract(abs(u_xlat8.x));
    u_xlat8.x = (u_xlatb12) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat8.x;
    u_xlat8.x = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat3.y = (-u_xlat8.x);
    u_xlat8.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat8.xy = u_xlat8.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat8.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_1.xyz = fma(u_xlat16_3.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = fma(half3(FGlobals._Metallic), u_xlat16_1.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.xzw = u_xlat0.xxx * float3(u_xlat16_1.xyz);
    u_xlat16_1.x = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat0.xzw = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_1.xxx), u_xlat0.xzw);
    u_xlat0.xzw = u_xlat0.xzw * float3(FGlobals._LightColor0.xyz);
    u_xlat0.xyz = u_xlat4.xxx * u_xlat0.xzw;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Metallic;
    half _Smoothness;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<float, access::sample > unity_NHxRoughness [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    bool u_xlatb12;
    half u_xlat16_13;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat12 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat2.xyz = float3(u_xlat12) * input.TEXCOORD1.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = fma(u_xlat2.xyz, (-float3(u_xlat12)), u_xlat0.xyz);
    u_xlat12 = dot(u_xlat2.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat16_1.xyz = half3(float3(u_xlat12) * float3(FGlobals._LightColor0.xyz));
    u_xlat0.x = dot(u_xlat0.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.y = (-float(FGlobals._Smoothness)) + 1.0;
    u_xlat0.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * 16.0;
    u_xlat4.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat8.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat4.x = u_xlat8.x + u_xlat4.x;
    u_xlat4.x = fma(u_xlat8.y, float(FGlobals._AlbedoTileSplitU), u_xlat4.x);
    u_xlat8.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat8.xy));
    u_xlat16_13 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat4.x = u_xlat4.x / float(u_xlat16_13);
    u_xlatb2 = u_xlat4.x>=(-u_xlat4.x);
    u_xlat4.x = fract(abs(u_xlat4.x));
    u_xlat4.x = (u_xlatb2) ? u_xlat4.x : (-u_xlat4.x);
    u_xlat2.x = float(u_xlat16_13) * u_xlat4.x;
    u_xlat4.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat2.y = (-u_xlat4.x);
    u_xlat4.xy = u_xlat8.xy + u_xlat2.xy;
    u_xlat4.xy = u_xlat4.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_3.xyz = fma(u_xlat16_2.xyz, u_xlat16_4.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
    u_xlat16_3.xyz = fma(half3(FGlobals._Metallic), u_xlat16_3.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat16_3.xyz = half3(u_xlat0.xxx * float3(u_xlat16_3.xyz));
    u_xlat16_13 = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat16_3.xyz = fma(u_xlat16_4.xyz, half3(u_xlat16_13), u_xlat16_3.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat0.x = input.TEXCOORD5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat0.xyz = float3(u_xlat16_1.xyz) * u_xlat0.xxx;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Metallic;
    half _Smoothness;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float3 u_xlat6;
    half u_xlat16_6;
    float2 u_xlat8;
    half u_xlat16_8;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 0.00100000005);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat12 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat12 = max(u_xlat12, 0.319999993);
    u_xlat16_2.x = (-FGlobals._Smoothness) + half(1.0);
    u_xlat16_6 = fma(u_xlat16_2.x, u_xlat16_2.x, half(1.5));
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat12 = u_xlat12 * float(u_xlat16_6);
    u_xlat6.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat6.x = rsqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * input.TEXCOORD1.xyz;
    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat4.x = dot(u_xlat6.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_8 = fma(u_xlat16_2.x, u_xlat16_2.x, half(-1.0));
    u_xlat0.x = fma(u_xlat0.x, float(u_xlat16_8), 1.00001001);
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = float(u_xlat16_2.x) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat8.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat8.x = u_xlat8.x + u_xlat2.x;
    u_xlat8.x = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat8.x);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat8.x = u_xlat8.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
    u_xlat8.x = fract(abs(u_xlat8.x));
    u_xlat8.x = (u_xlatb12) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat8.x;
    u_xlat8.x = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat3.y = (-u_xlat8.x);
    u_xlat8.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat8.xy = u_xlat8.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat8.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_1.xyz = fma(u_xlat16_3.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = fma(half3(FGlobals._Metallic), u_xlat16_1.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.xzw = u_xlat0.xxx * float3(u_xlat16_1.xyz);
    u_xlat16_1.x = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat0.xzw = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_1.xxx), u_xlat0.xzw);
    u_xlat0.xzw = u_xlat0.xzw * float3(FGlobals._LightColor0.xyz);
    u_xlat0.xyz = u_xlat4.xxx * u_xlat0.xzw;
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat12);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_REFLECTIONPROBETYPE_NO" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half _Metallic;
    half _Smoothness;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float3 u_xlat6;
    half u_xlat16_6;
    float2 u_xlat8;
    half u_xlat16_8;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1.x = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 0.00100000005);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat12 = dot(float3(FGlobals._WorldSpaceLightPos0.xyz), u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat12 = max(u_xlat12, 0.319999993);
    u_xlat16_2.x = (-FGlobals._Smoothness) + half(1.0);
    u_xlat16_6 = fma(u_xlat16_2.x, u_xlat16_2.x, half(1.5));
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat12 = u_xlat12 * float(u_xlat16_6);
    u_xlat6.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat6.x = rsqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * input.TEXCOORD1.xyz;
    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat4.x = dot(u_xlat6.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_8 = fma(u_xlat16_2.x, u_xlat16_2.x, half(-1.0));
    u_xlat0.x = fma(u_xlat0.x, float(u_xlat16_8), 1.00001001);
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = float(u_xlat16_2.x) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = min(u_xlat0.x, 100.0);
    u_xlat8.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat8.x = u_xlat8.x + u_xlat2.x;
    u_xlat8.x = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat8.x);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat8.x = u_xlat8.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
    u_xlat8.x = fract(abs(u_xlat8.x));
    u_xlat8.x = (u_xlatb12) ? u_xlat8.x : (-u_xlat8.x);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat8.x;
    u_xlat8.x = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat3.y = (-u_xlat8.x);
    u_xlat8.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat8.xy = u_xlat8.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat8.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_1.xyz = fma(u_xlat16_3.xyz, u_xlat16_2.xyz, half3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = fma(half3(FGlobals._Metallic), u_xlat16_1.xyz, half3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.xzw = u_xlat0.xxx * float3(u_xlat16_1.xyz);
    u_xlat16_1.x = fma((-FGlobals._Metallic), half(0.779083729), half(0.779083729));
    u_xlat0.xzw = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_1.xxx), u_xlat0.xzw);
    u_xlat0.xzw = u_xlat0.xzw * float3(FGlobals._LightColor0.xyz);
    u_xlat0.xyz = u_xlat4.xxx * u_xlat0.xzw;
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat12);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
}
}
}
SubShader {
 LOD 2500
 Tags { "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
 Pass {
  Name "FORWARD"
  LOD 2500
  Tags { "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  GpuProgramID 213175
Program "vp" {
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    output.TEXCOORD5.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD4 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.xy = u_xlat0.xy;
    output.TEXCOORD5.xy = u_xlat0.xy;
    output.TEXCOORD5.zw = float2(0.0, 0.0);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    bool u_xlatb9;
    half u_xlat16_10;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_10 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_10 = max(u_xlat16_10, half(0.0));
    output.SV_Target0.xyz = half3(u_xlat16_10) * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    bool u_xlatb9;
    half u_xlat16_10;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_10 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_10 = max(u_xlat16_10, half(0.0));
    output.SV_Target0.xyz = half3(u_xlat16_10) * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    bool u_xlatb9;
    half u_xlat16_10;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_10 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_10 = max(u_xlat16_10, half(0.0));
    output.SV_Target0.xyz = half3(u_xlat16_10) * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb12;
    float u_xlat15;
    bool u_xlatb15;
    half u_xlat16_16;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat15 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat15 = floor(u_xlat15);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat15 = u_xlat15 + u_xlat2.x;
    u_xlat15 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat15);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat15 = u_xlat15 / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat15>=(-u_xlat15);
    u_xlat15 = fract(abs(u_xlat15));
    u_xlat15 = (u_xlatb12) ? u_xlat15 : (-u_xlat15);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat15;
    u_xlat15 = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat15 = floor(u_xlat15);
    u_xlat3.y = (-u_xlat15);
    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_16), u_xlat16_4.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb12;
    float u_xlat15;
    bool u_xlatb15;
    half u_xlat16_16;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat15 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat15 = floor(u_xlat15);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat15 = u_xlat15 + u_xlat2.x;
    u_xlat15 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat15);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat15 = u_xlat15 / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat15>=(-u_xlat15);
    u_xlat15 = fract(abs(u_xlat15));
    u_xlat15 = (u_xlatb12) ? u_xlat15 : (-u_xlat15);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat15;
    u_xlat15 = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat15 = floor(u_xlat15);
    u_xlat3.y = (-u_xlat15);
    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_16), u_xlat16_4.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb12;
    float u_xlat15;
    bool u_xlatb15;
    half u_xlat16_16;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat15 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat15 = floor(u_xlat15);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat15 = u_xlat15 + u_xlat2.x;
    u_xlat15 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat15);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat15 = u_xlat15 / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat15>=(-u_xlat15);
    u_xlat15 = fract(abs(u_xlat15));
    u_xlat15 = (u_xlatb12) ? u_xlat15 : (-u_xlat15);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat15;
    u_xlat15 = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat15 = floor(u_xlat15);
    u_xlat3.y = (-u_xlat15);
    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_16), u_xlat16_4.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    bool u_xlatb14;
    float u_xlat18;
    bool u_xlatb18;
    half u_xlat16_19;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat18 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat18 = floor(u_xlat18);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat18 = u_xlat18 + u_xlat2.x;
    u_xlat18 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat18);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat18 = u_xlat18 / float(u_xlat16_1.x);
    u_xlatb14 = u_xlat18>=(-u_xlat18);
    u_xlat18 = fract(abs(u_xlat18));
    u_xlat18 = (u_xlatb14) ? u_xlat18 : (-u_xlat18);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat18;
    u_xlat18 = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat18 = floor(u_xlat18);
    u_xlat3.y = (-u_xlat18);
    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_19 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_19 = clamp(u_xlat16_19, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_19) * FGlobals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat16_19 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_19 = max(u_xlat16_19, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_19), u_xlat16_4.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    bool u_xlatb14;
    float u_xlat18;
    bool u_xlatb18;
    half u_xlat16_19;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat18 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat18 = floor(u_xlat18);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat18 = u_xlat18 + u_xlat2.x;
    u_xlat18 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat18);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat18 = u_xlat18 / float(u_xlat16_1.x);
    u_xlatb14 = u_xlat18>=(-u_xlat18);
    u_xlat18 = fract(abs(u_xlat18));
    u_xlat18 = (u_xlatb14) ? u_xlat18 : (-u_xlat18);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat18;
    u_xlat18 = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat18 = floor(u_xlat18);
    u_xlat3.y = (-u_xlat18);
    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_19 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_19 = clamp(u_xlat16_19, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_19) * FGlobals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat16_19 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_19 = max(u_xlat16_19, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_19), u_xlat16_4.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    bool u_xlatb14;
    float u_xlat18;
    bool u_xlatb18;
    half u_xlat16_19;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat18 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat18 = floor(u_xlat18);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat18 = u_xlat18 + u_xlat2.x;
    u_xlat18 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat18);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat18 = u_xlat18 / float(u_xlat16_1.x);
    u_xlatb14 = u_xlat18>=(-u_xlat18);
    u_xlat18 = fract(abs(u_xlat18));
    u_xlat18 = (u_xlatb14) ? u_xlat18 : (-u_xlat18);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat18;
    u_xlat18 = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat18 = floor(u_xlat18);
    u_xlat3.y = (-u_xlat18);
    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_19 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_19 = clamp(u_xlat16_19, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_19) * FGlobals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat16_19 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_19 = max(u_xlat16_19, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_19), u_xlat16_4.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    half u_xlat16_13;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_13 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_13 = max(u_xlat16_13, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_13), u_xlat16_3.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    half u_xlat16_13;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_13 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_13 = max(u_xlat16_13, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_13), u_xlat16_3.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    half u_xlat16_13;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_13 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_13 = max(u_xlat16_13, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_13), u_xlat16_3.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    float2 u_xlat7;
    bool u_xlatb15;
    half u_xlat16_16;
    bool u_xlatb17;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat7.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat7.xy = trunc(u_xlat7.xy);
    u_xlat2.x = u_xlat7.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat7.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat7.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat7.xy));
    u_xlat16_16 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_16);
    u_xlatb17 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb17) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_16) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat7.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_16), u_xlat16_1.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    float2 u_xlat7;
    bool u_xlatb15;
    half u_xlat16_16;
    bool u_xlatb17;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat7.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat7.xy = trunc(u_xlat7.xy);
    u_xlat2.x = u_xlat7.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat7.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat7.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat7.xy));
    u_xlat16_16 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_16);
    u_xlatb17 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb17) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_16) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat7.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_16), u_xlat16_1.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    float2 u_xlat7;
    bool u_xlatb15;
    half u_xlat16_16;
    bool u_xlatb17;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat7.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat7.xy = trunc(u_xlat7.xy);
    u_xlat2.x = u_xlat7.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat7.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat7.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat7.xy));
    u_xlat16_16 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_16);
    u_xlatb17 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb17) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_16) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat7.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_16), u_xlat16_1.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb15;
    half u_xlat16_16;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_16 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_16 = clamp(u_xlat16_16, 0.0h, 1.0h);
    u_xlat16_3.xyz = half3(u_xlat16_16) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_16), u_xlat16_1.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb15;
    half u_xlat16_16;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_16 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_16 = clamp(u_xlat16_16, 0.0h, 1.0h);
    u_xlat16_3.xyz = half3(u_xlat16_16) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_16), u_xlat16_1.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb15;
    half u_xlat16_16;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_16 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_16 = clamp(u_xlat16_16, 0.0h, 1.0h);
    u_xlat16_3.xyz = half3(u_xlat16_16) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_16), u_xlat16_1.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    float2 u_xlat8;
    bool u_xlatb18;
    half u_xlat16_19;
    bool u_xlatb20;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat8.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat2.x = u_xlat8.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat8.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat8.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat8.xy));
    u_xlat16_19 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_19);
    u_xlatb20 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb20) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_19) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat8.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_19 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_19 = clamp(u_xlat16_19, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_19) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat16_19 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_19 = max(u_xlat16_19, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_19), u_xlat16_1.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    float2 u_xlat8;
    bool u_xlatb18;
    half u_xlat16_19;
    bool u_xlatb20;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat8.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat2.x = u_xlat8.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat8.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat8.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat8.xy));
    u_xlat16_19 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_19);
    u_xlatb20 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb20) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_19) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat8.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_19 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_19 = clamp(u_xlat16_19, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_19) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat16_19 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_19 = max(u_xlat16_19, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_19), u_xlat16_1.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    float2 u_xlat8;
    bool u_xlatb18;
    half u_xlat16_19;
    bool u_xlatb20;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat8.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat2.x = u_xlat8.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat8.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat8.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat8.xy));
    u_xlat16_19 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_19);
    u_xlatb20 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb20) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_19) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat8.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_19 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_19 = clamp(u_xlat16_19, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_19) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat16_19 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_19 = max(u_xlat16_19, half(0.0));
    output.SV_Target0.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_19), u_xlat16_1.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float u_xlat9;
    bool u_xlatb9;
    half u_xlat16_10;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_10 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_10 = max(u_xlat16_10, half(0.0));
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_10), (-FGlobals.unity_FogColor.xyz));
    u_xlat9 = input.TEXCOORD4;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float u_xlat9;
    bool u_xlatb9;
    half u_xlat16_10;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_10 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_10 = max(u_xlat16_10, half(0.0));
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_10), (-FGlobals.unity_FogColor.xyz));
    u_xlat9 = input.TEXCOORD4;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float u_xlat9;
    bool u_xlatb9;
    half u_xlat16_10;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_10 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_10 = max(u_xlat16_10, half(0.0));
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_10), (-FGlobals.unity_FogColor.xyz));
    u_xlat9 = input.TEXCOORD4;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_FogColor;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb12;
    float u_xlat15;
    bool u_xlatb15;
    half u_xlat16_16;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat15 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat15 = floor(u_xlat15);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat15 = u_xlat15 + u_xlat2.x;
    u_xlat15 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat15);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat15 = u_xlat15 / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat15>=(-u_xlat15);
    u_xlat15 = fract(abs(u_xlat15));
    u_xlat15 = (u_xlatb12) ? u_xlat15 : (-u_xlat15);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat15;
    u_xlat15 = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat15 = floor(u_xlat15);
    u_xlat3.y = (-u_xlat15);
    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_16), u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat15 = input.TEXCOORD4;
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat15), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_FogColor;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb12;
    float u_xlat15;
    bool u_xlatb15;
    half u_xlat16_16;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat15 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat15 = floor(u_xlat15);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat15 = u_xlat15 + u_xlat2.x;
    u_xlat15 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat15);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat15 = u_xlat15 / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat15>=(-u_xlat15);
    u_xlat15 = fract(abs(u_xlat15));
    u_xlat15 = (u_xlatb12) ? u_xlat15 : (-u_xlat15);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat15;
    u_xlat15 = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat15 = floor(u_xlat15);
    u_xlat3.y = (-u_xlat15);
    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_16), u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat15 = input.TEXCOORD4;
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat15), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_FogColor;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb12;
    float u_xlat15;
    bool u_xlatb15;
    half u_xlat16_16;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat15 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat15 = floor(u_xlat15);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat15 = u_xlat15 + u_xlat2.x;
    u_xlat15 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat15);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat15 = u_xlat15 / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat15>=(-u_xlat15);
    u_xlat15 = fract(abs(u_xlat15));
    u_xlat15 = (u_xlatb12) ? u_xlat15 : (-u_xlat15);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat15;
    u_xlat15 = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat15 = floor(u_xlat15);
    u_xlat3.y = (-u_xlat15);
    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_16), u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat15 = input.TEXCOORD4;
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat15), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    bool u_xlatb14;
    float u_xlat18;
    bool u_xlatb18;
    half u_xlat16_19;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat18 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat18 = floor(u_xlat18);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat18 = u_xlat18 + u_xlat2.x;
    u_xlat18 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat18);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat18 = u_xlat18 / float(u_xlat16_1.x);
    u_xlatb14 = u_xlat18>=(-u_xlat18);
    u_xlat18 = fract(abs(u_xlat18));
    u_xlat18 = (u_xlatb14) ? u_xlat18 : (-u_xlat18);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat18;
    u_xlat18 = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat18 = floor(u_xlat18);
    u_xlat3.y = (-u_xlat18);
    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_19 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_19 = clamp(u_xlat16_19, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_19) * FGlobals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat16_19 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_19 = max(u_xlat16_19, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_19), u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat18 = input.TEXCOORD4;
    u_xlat18 = clamp(u_xlat18, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat18), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    bool u_xlatb14;
    float u_xlat18;
    bool u_xlatb18;
    half u_xlat16_19;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat18 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat18 = floor(u_xlat18);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat18 = u_xlat18 + u_xlat2.x;
    u_xlat18 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat18);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat18 = u_xlat18 / float(u_xlat16_1.x);
    u_xlatb14 = u_xlat18>=(-u_xlat18);
    u_xlat18 = fract(abs(u_xlat18));
    u_xlat18 = (u_xlatb14) ? u_xlat18 : (-u_xlat18);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat18;
    u_xlat18 = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat18 = floor(u_xlat18);
    u_xlat3.y = (-u_xlat18);
    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_19 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_19 = clamp(u_xlat16_19, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_19) * FGlobals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat16_19 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_19 = max(u_xlat16_19, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_19), u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat18 = input.TEXCOORD4;
    u_xlat18 = clamp(u_xlat18, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat18), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ShadowMask [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    bool u_xlatb14;
    float u_xlat18;
    bool u_xlatb18;
    half u_xlat16_19;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_1.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_1.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_1.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat18 = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat18 = floor(u_xlat18);
    u_xlat2.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat2.xy = trunc(u_xlat2.xy);
    u_xlat18 = u_xlat18 + u_xlat2.x;
    u_xlat18 = fma(u_xlat2.y, float(FGlobals._AlbedoTileSplitU), u_xlat18);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat2.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat18 = u_xlat18 / float(u_xlat16_1.x);
    u_xlatb14 = u_xlat18>=(-u_xlat18);
    u_xlat18 = fract(abs(u_xlat18));
    u_xlat18 = (u_xlatb14) ? u_xlat18 : (-u_xlat18);
    u_xlat3.x = float(u_xlat16_1.x) * u_xlat18;
    u_xlat18 = u_xlat3.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat18 = floor(u_xlat18);
    u_xlat3.y = (-u_xlat18);
    u_xlat2.xy = u_xlat2.xy + u_xlat3.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_19 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_19 = clamp(u_xlat16_19, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_19) * FGlobals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat16_19 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_19 = max(u_xlat16_19, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_19), u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat18 = input.TEXCOORD4;
    u_xlat18 = clamp(u_xlat18, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat18), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    half u_xlat16_13;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_13 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_13 = max(u_xlat16_13, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_13), u_xlat16_3.xyz);
    u_xlat16_0.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat12 = input.TEXCOORD4;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    half u_xlat16_13;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_13 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_13 = max(u_xlat16_13, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_13), u_xlat16_3.xyz);
    u_xlat16_0.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat12 = input.TEXCOORD4;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    half u_xlat16_13;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_13 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_13 = max(u_xlat16_13, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, half3(u_xlat16_13), u_xlat16_3.xyz);
    u_xlat16_0.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat12 = input.TEXCOORD4;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    float2 u_xlat7;
    bool u_xlatb15;
    half u_xlat16_16;
    float u_xlat17;
    bool u_xlatb17;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat7.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat7.xy = trunc(u_xlat7.xy);
    u_xlat2.x = u_xlat7.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat7.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat7.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat7.xy));
    u_xlat16_16 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_16);
    u_xlatb17 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb17) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_16) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat7.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_16), u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat17 = input.TEXCOORD4;
    u_xlat17 = clamp(u_xlat17, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat17), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    float2 u_xlat7;
    bool u_xlatb15;
    half u_xlat16_16;
    float u_xlat17;
    bool u_xlatb17;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat7.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat7.xy = trunc(u_xlat7.xy);
    u_xlat2.x = u_xlat7.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat7.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat7.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat7.xy));
    u_xlat16_16 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_16);
    u_xlatb17 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb17) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_16) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat7.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_16), u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat17 = input.TEXCOORD4;
    u_xlat17 = clamp(u_xlat17, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat17), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    float2 u_xlat7;
    bool u_xlatb15;
    half u_xlat16_16;
    float u_xlat17;
    bool u_xlatb17;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat7.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat7.xy = trunc(u_xlat7.xy);
    u_xlat2.x = u_xlat7.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat7.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat7.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat7.xy));
    u_xlat16_16 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_16);
    u_xlatb17 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb17) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_16) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat7.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_16), u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat17 = input.TEXCOORD4;
    u_xlat17 = clamp(u_xlat17, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat17), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    float u_xlat15;
    bool u_xlatb15;
    half u_xlat16_16;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_16 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_16 = clamp(u_xlat16_16, 0.0h, 1.0h);
    u_xlat16_3.xyz = half3(u_xlat16_16) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_16), u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat15 = input.TEXCOORD4;
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat15), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    float u_xlat15;
    bool u_xlatb15;
    half u_xlat16_16;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_16 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_16 = clamp(u_xlat16_16, 0.0h, 1.0h);
    u_xlat16_3.xyz = half3(u_xlat16_16) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_16), u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat15 = input.TEXCOORD4;
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat15), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    float u_xlat15;
    bool u_xlatb15;
    half u_xlat16_16;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat5.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat5.xy = trunc(u_xlat5.xy);
    u_xlat0.x = u_xlat5.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat5.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat5.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat5.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb15 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb15) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat5.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_16 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_16 = clamp(u_xlat16_16, 0.0h, 1.0h);
    u_xlat16_3.xyz = half3(u_xlat16_16) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
    u_xlat16_16 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_16 = max(u_xlat16_16, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_16), u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat15 = input.TEXCOORD4;
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat15), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    float2 u_xlat8;
    bool u_xlatb18;
    half u_xlat16_19;
    float u_xlat20;
    bool u_xlatb20;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat8.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat2.x = u_xlat8.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat8.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat8.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat8.xy));
    u_xlat16_19 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_19);
    u_xlatb20 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb20) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_19) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat8.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_19 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_19 = clamp(u_xlat16_19, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_19) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat16_19 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_19 = max(u_xlat16_19, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_19), u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat20 = input.TEXCOORD4;
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat20), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    float2 u_xlat8;
    bool u_xlatb18;
    half u_xlat16_19;
    float u_xlat20;
    bool u_xlatb20;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat8.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat2.x = u_xlat8.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat8.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat8.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat8.xy));
    u_xlat16_19 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_19);
    u_xlatb20 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb20) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_19) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat8.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_19 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_19 = clamp(u_xlat16_19, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_19) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat16_19 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_19 = max(u_xlat16_19, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_19), u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat20 = input.TEXCOORD4;
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat20), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    float2 u_xlat8;
    bool u_xlatb18;
    half u_xlat16_19;
    float u_xlat20;
    bool u_xlatb20;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat16_1.x = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_1.x = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_1.x))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_1.xyz = fma(FGlobals.unity_SHC.xyz, u_xlat16_1.xxx, u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_1.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_4.xyz, u_xlat16_2.xyz);
    u_xlat2.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat8.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat8.xy = trunc(u_xlat8.xy);
    u_xlat2.x = u_xlat8.x + u_xlat2.x;
    u_xlat2.x = fma(u_xlat8.y, float(FGlobals._AlbedoTileSplitU), u_xlat2.x);
    u_xlat8.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat8.xy));
    u_xlat16_19 = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat2.x = u_xlat2.x / float(u_xlat16_19);
    u_xlatb20 = u_xlat2.x>=(-u_xlat2.x);
    u_xlat2.x = fract(abs(u_xlat2.x));
    u_xlat2.x = (u_xlatb20) ? u_xlat2.x : (-u_xlat2.x);
    u_xlat4.x = float(u_xlat16_19) * u_xlat2.x;
    u_xlat2.x = u_xlat4.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat4.y = (-u_xlat2.x);
    u_xlat2.xy = u_xlat8.xy + u_xlat4.xy;
    u_xlat2.xy = u_xlat2.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, u_xlat2.xy).xyz;
    u_xlat16_4.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat16_3.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD5.xy);
    u_xlat16_19 = dot(u_xlat16_0, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16_19 = clamp(u_xlat16_19, 0.0h, 1.0h);
    u_xlat16_5.xyz = half3(u_xlat16_19) * FGlobals._LightColor0.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat16_19 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_19 = max(u_xlat16_19, half(0.0));
    u_xlat16_1.xyz = fma(u_xlat16_3.xyz, half3(u_xlat16_19), u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_1.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat20 = input.TEXCOORD4;
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlat2.xyz = fma(float3(u_xlat20), float3(u_xlat16_2.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat2.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
}
}
 Pass {
  Name "FORWARD"
  LOD 2500
  Tags { "LIGHTMODE" = "FORWARDADD" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  ZWrite Off
  GpuProgramID 302434
Program "vp" {
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat16_2 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    bool u_xlatb9;
    half u_xlat16_10;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_10 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_10 = max(u_xlat16_10, half(0.0));
    output.SV_Target0.xyz = half3(u_xlat16_10) * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    bool u_xlatb9;
    half u_xlat16_10;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_10 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_10 = max(u_xlat16_10, half(0.0));
    output.SV_Target0.xyz = half3(u_xlat16_10) * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    bool u_xlatb9;
    half u_xlat16_10;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_10 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_10 = max(u_xlat16_10, half(0.0));
    output.SV_Target0.xyz = half3(u_xlat16_10) * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    bool u_xlatb9;
    half u_xlat16_10;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_10 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_10 = max(u_xlat16_10, half(0.0));
    u_xlat16_1.xyz = half3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat0.x = input.TEXCOORD5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat0.xyz = float3(u_xlat16_1.xyz) * u_xlat0.xxx;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    bool u_xlatb9;
    half u_xlat16_10;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_10 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_10 = max(u_xlat16_10, half(0.0));
    u_xlat16_1.xyz = half3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat0.x = input.TEXCOORD5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat0.xyz = float3(u_xlat16_1.xyz) * u_xlat0.xxx;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 _LightColor0;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    bool u_xlatb9;
    half u_xlat16_10;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * FGlobals._LightColor0.xyz;
    u_xlat16_10 = dot(input.TEXCOORD1.xyz, float3(FGlobals._WorldSpaceLightPos0.xyz));
    u_xlat16_10 = max(u_xlat16_10, half(0.0));
    u_xlat16_1.xyz = half3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat0.x = input.TEXCOORD5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat0.xyz = float3(u_xlat16_1.xyz) * u_xlat0.xxx;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
}
}
 Pass {
  Name "PREPASS"
  LOD 2500
  Tags { "LIGHTMODE" = "PREPASSBASE" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  GpuProgramID 333407
Program "vp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half _Cutout;
    float4 booster_Env;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_TransparencyLM [[ sampler (0) ]],
    texture2d<half, access::sample > _TransparencyLM [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half u_xlat16_1;
    float2 u_xlat2;
    float2 u_xlat3;
    bool u_xlatb9;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1 = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1 = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0.xyz = half3(fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5)));
    output.SV_Target0.w = half(0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half _Cutout;
    float4 booster_Env;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_TransparencyLM [[ sampler (0) ]],
    texture2d<half, access::sample > _TransparencyLM [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half u_xlat16_1;
    float2 u_xlat2;
    float2 u_xlat3;
    bool u_xlatb9;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1 = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1 = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0.xyz = half3(fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5)));
    output.SV_Target0.w = half(0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half _Cutout;
    float4 booster_Env;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_TransparencyLM [[ sampler (0) ]],
    texture2d<half, access::sample > _TransparencyLM [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    half u_xlat16_1;
    float2 u_xlat2;
    float2 u_xlat3;
    bool u_xlatb9;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1 = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0 = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0 = (-u_xlat16_0) + half(1.0);
    u_xlat16_1 = u_xlat16_0 + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0.xyz = half3(fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5)));
    output.SV_Target0.w = half(0.0);
    return output;
}
"
}
}
}
 Pass {
  Name "PREPASS"
  LOD 2500
  Tags { "LIGHTMODE" = "PREPASSFINAL" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  ZWrite Off
  GpuProgramID 440622
Program "vp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat1.x, float(u_xlat16_2.x));
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat1.x, float(u_xlat16_2.x));
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat1.x, float(u_xlat16_2.x));
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat1.x, float(u_xlat16_2.x));
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat1.x, float(u_xlat16_2.x));
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat1.x, float(u_xlat16_2.x));
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat1.x, float(u_xlat16_2.x));
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat1.x, float(u_xlat16_2.x));
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2.x = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat1.x, float(u_xlat16_2.x));
    output.COLOR0 = input.COLOR0;
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat2.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_3));
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat4 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat4 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat2.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_3));
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat4 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat4 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat2.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_3));
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat4 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat4 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat2.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_3));
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat4 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat4 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat2.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_3));
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat4 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat4 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat2.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_3));
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat4 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat4 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat2.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_3));
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat4 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat4 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat2.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_3));
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat4 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat4 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat2.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_3));
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat4 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat4 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat2.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_3));
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat4 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat4 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat2.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_3));
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat4 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat4 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float4 TEXCOORD0 [[ attribute(1) ]] ;
    float4 TEXCOORD1 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    u_xlat0.x = u_xlat2.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = (-VGlobals.unity_FogColor.w) + half(1.0);
    output.TEXCOORD5 = max(u_xlat0.x, float(u_xlat16_3));
    output.COLOR0 = input.COLOR0;
    u_xlat0.x = u_xlat2.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * float2(0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat2.zw;
    output.TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat4 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat4 * (-u_xlat0.x);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_1.xyz));
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_1.xyz));
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_1.xyz));
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_1.xyz));
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_1.xyz));
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_1.xyz));
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_1.xyz));
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_1.xyz));
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz * float3(u_xlat16_1.xyz));
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    output.SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    sampler sampler_LightBuffer [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat0.xyz = (-float3(u_xlat16_3.xyz)) + input.TEXCOORD4.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    sampler sampler_LightBuffer [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > _LightBuffer [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat16_0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = max(u_xlat16_0.xyz, half3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_0.xyz, (-u_xlat16_3.xyz));
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat12 = input.TEXCOORD5;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat12), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
}
}
 Pass {
  Name "DEFERRED"
  LOD 2500
  Tags { "LIGHTMODE" = "DEFERRED" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  GpuProgramID 478631
Program "vp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    half4 COLOR0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2))));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, half3(u_xlat16_2), u_xlat16_3.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat2.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat2.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat2.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat2.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat2.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat2.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat2.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat2.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat2.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat2.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat2.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_LightmapST;
    float4 _MainTex_ST;
    float4 _TransparencyLM_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(3) ]] ;
    half4 COLOR0 [[ attribute(4) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.zw = fma(input.TEXCOORD0.xy, VGlobals._TransparencyLM_ST.xy, VGlobals._TransparencyLM_ST.zw);
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    output.TEXCOORD1.xyz = float3(u_xlat9) * u_xlat2.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-VGlobals.unity_ShadowFadeCenterAndType.xyz);
    output.TEXCOORD4.xyz = u_xlat0.xyz * VGlobals.unity_ShadowFadeCenterAndType.www;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD3.xy = fma(input.TEXCOORD1.xy, VGlobals.unity_LightmapST.xy, VGlobals.unity_LightmapST.zw);
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat0.x);
    u_xlat0.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat0.x);
    u_xlat3 = (-VGlobals.unity_ShadowFadeCenterAndType.w) + 1.0;
    output.TEXCOORD4.w = u_xlat3 * (-u_xlat0.x);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    bool u_xlatb9;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    output.SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    output.SV_Target3 = half4(1.0, 1.0, 1.0, 1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    bool u_xlatb9;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    output.SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    output.SV_Target3 = half4(1.0, 1.0, 1.0, 1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    bool u_xlatb9;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat3.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat3.xy = trunc(u_xlat3.xy);
    u_xlat0.x = u_xlat3.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat3.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat3.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat3.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb9 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb9) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat3.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    output.SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    output.SV_Target3 = half4(1.0, 1.0, 1.0, 1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + input.TEXCOORD4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + input.TEXCOORD4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + input.TEXCOORD4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_ProbesOcclusion;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + input.TEXCOORD4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    output.SV_Target4 = FGlobals.unity_ProbesOcclusion;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_ProbesOcclusion;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + input.TEXCOORD4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    output.SV_Target4 = FGlobals.unity_ProbesOcclusion;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_ProbesOcclusion;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    half3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_TransparencyLM [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + input.TEXCOORD4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    output.SV_Target4 = FGlobals.unity_ProbesOcclusion;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    bool u_xlatb18;
    half u_xlat16_19;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat16_19 = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_19 = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_19))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = fma(FGlobals.unity_SHC.xyz, half3(u_xlat16_19), u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_4.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_4.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_4.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_5.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    bool u_xlatb18;
    half u_xlat16_19;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat16_19 = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_19 = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_19))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = fma(FGlobals.unity_SHC.xyz, half3(u_xlat16_19), u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_4.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_4.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_4.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_5.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_TransparencyLM [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    bool u_xlatb18;
    half u_xlat16_19;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat16_19 = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_19 = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_19))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = fma(FGlobals.unity_SHC.xyz, half3(u_xlat16_19), u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_4.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_4.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_4.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_5.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD3.xy);
    output.SV_Target4 = u_xlat16_0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD3.xy);
    output.SV_Target4 = u_xlat16_0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    bool u_xlatb12;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat4.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat4.xy = trunc(u_xlat4.xy);
    u_xlat0.x = u_xlat4.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat4.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat4.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat4.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb12 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb12) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat4.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat16_0.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * FGlobals.unity_Lightmap_HDR.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD3.xy);
    output.SV_Target4 = u_xlat16_0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    bool u_xlatb18;
    half u_xlat16_19;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat16_19 = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_19 = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_19))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = fma(FGlobals.unity_SHC.xyz, half3(u_xlat16_19), u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_4.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_4.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_4.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_5.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD3.xy);
    output.SV_Target4 = u_xlat16_0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    bool u_xlatb18;
    half u_xlat16_19;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat16_19 = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_19 = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_19))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = fma(FGlobals.unity_SHC.xyz, half3(u_xlat16_19), u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_4.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_4.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_4.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_5.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD3.xy);
    output.SV_Target4 = u_xlat16_0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "LIGHTMAP_ON" "SHADOWS_SHADOWMASK" "LIGHTPROBE_SH" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_Lightmap_HDR;
    half _Cutout;
    float4 booster_Env;
    half4 _Color;
    half4 booster_PowerSavingAdjustColor;
    half _AlbedoTileFreq;
    half _AlbedoTileSplitU;
    half _AlbedoTileSplitV;
    half _AlphaMaskTileFreq;
    half _AlphaMaskTileSplitU;
    half _AlphaMaskTileSplitV;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    half4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    half4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    half4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
    half4 SV_Target4 [[ color(xlt_remap_o[4]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_Lightmap [[ sampler (0) ]],
    sampler samplerunity_ShadowMask [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_TransparencyLM [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _TransparencyLM [[ texture(1) ]] ,
    texture2d<half, access::sample > unity_Lightmap [[ texture(2) ]] ,
    texture2d<half, access::sample > unity_ShadowMask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float2 u_xlat6;
    bool u_xlatb18;
    half u_xlat16_19;
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlphaMaskTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.zw * float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlphaMaskTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.zw, float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlphaMaskTileSplitV * FGlobals._AlphaMaskTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlphaMaskTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlphaMaskTileSplitU, FGlobals._AlphaMaskTileSplitV));
    u_xlat16_0.x = _TransparencyLM.sample(sampler_TransparencyLM, u_xlat0.xy).x;
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x + (-FGlobals._Cutout);
    u_xlatb0 = u_xlat16_1.x<half(0.0);
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.x = FGlobals.booster_Env.x * float(FGlobals._AlbedoTileFreq);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat6.xy = input.TEXCOORD0.xy * float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat6.xy = trunc(u_xlat6.xy);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = fma(u_xlat6.y, float(FGlobals._AlbedoTileSplitU), u_xlat0.x);
    u_xlat6.xy = fma(input.TEXCOORD0.xy, float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV)), (-u_xlat6.xy));
    u_xlat16_1.x = FGlobals._AlbedoTileSplitV * FGlobals._AlbedoTileSplitU;
    u_xlat0.x = u_xlat0.x / float(u_xlat16_1.x);
    u_xlatb18 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat0.x = fract(abs(u_xlat0.x));
    u_xlat0.x = (u_xlatb18) ? u_xlat0.x : (-u_xlat0.x);
    u_xlat2.x = float(u_xlat16_1.x) * u_xlat0.x;
    u_xlat0.x = u_xlat2.x / float(FGlobals._AlbedoTileSplitU);
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat2.y = (-u_xlat0.x);
    u_xlat0.xy = u_xlat6.xy + u_xlat2.xy;
    u_xlat0.xy = u_xlat0.xy / float2(half2(FGlobals._AlbedoTileSplitU, FGlobals._AlbedoTileSplitV));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = input.COLOR0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_1.xyz = (-FGlobals.booster_PowerSavingAdjustColor.xyz) + half3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    output.SV_Target1 = half4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.w = 1.0;
    output.SV_Target2 = half4(u_xlat0);
    u_xlat16_19 = half(input.TEXCOORD1.y * input.TEXCOORD1.y);
    u_xlat16_19 = half(fma(input.TEXCOORD1.x, input.TEXCOORD1.x, (-float(u_xlat16_19))));
    u_xlat16_0 = half4(input.TEXCOORD1.yzzx * input.TEXCOORD1.xyzz);
    u_xlat16_3.x = dot(FGlobals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(FGlobals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(FGlobals.unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = fma(FGlobals.unity_SHC.xyz, half3(u_xlat16_19), u_xlat16_3.xyz);
    u_xlat0.xyz = input.TEXCOORD1.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_4.x = half(dot(float4(FGlobals.unity_SHAr), u_xlat0));
    u_xlat16_4.y = half(dot(float4(FGlobals.unity_SHAg), u_xlat0));
    u_xlat16_4.z = half(dot(float4(FGlobals.unity_SHAb), u_xlat0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = fma(u_xlat16_2.xyz, half3(1.05499995, 1.05499995, 1.05499995), half3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = unity_Lightmap.sample(samplerunity_Lightmap, input.TEXCOORD3.xy).xyz;
    u_xlat16_3.xyz = fma(FGlobals.unity_Lightmap_HDR.xxx, u_xlat16_5.xyz, u_xlat16_2.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    u_xlat16_0 = unity_ShadowMask.sample(samplerunity_ShadowMask, input.TEXCOORD3.xy);
    output.SV_Target4 = u_xlat16_0;
    return output;
}
"
}
}
}
}
Fallback "Booster/Black"
}