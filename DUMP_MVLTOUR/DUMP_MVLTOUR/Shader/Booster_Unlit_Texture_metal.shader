//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Booster/Unlit/Texture" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_VertexColor ("Vertex Main Color", Color) = (1,1,1,1)
[KeywordEnum(DISABLE, MULTIPLY, ADD)] _VERTEXCOLOR ("VertexColor", Float) = 0
[KeywordEnum(DISABLE, ENABLE)] _FOG ("Fog", Float) = 0
[KeywordEnum(DISABLE, ENABLE)] _MAIN_COLOR ("Main Color", Float) = 0
[KeywordEnum(DISABLE, ENABLE)] _IGNORE_FAR ("Farクリップを無視", Float) = 0
[KeywordEnum(ONE, TOW)] _TEXTURE ("テクスチャ枚数", Float) = 0
[KeywordEnum(MULTIPLY, ADD)] _TEXTURE_BLEND ("テクスチャブレンド方法", Float) = 0
_MainTex ("Texture", 2D) = "black" { }
[Header(Texture UV Scroll)] _ScrollSpeedU ("U方向：移動速度", Range(-10, 10)) = 0
_ScrollSpeedV ("V方向：移動速度", Range(-10, 10)) = 0
_MainTex2 ("Texture2", 2D) = "white" { }
[Header(Texture 2 UV Scroll)] _ScrollSpeedU2 ("U方向：移動速度", Range(-10, 10)) = 0
_ScrollSpeedV2 ("V方向：移動速度", Range(-10, 10)) = 0
[Space(10)] [Enum(None,0,ReverseU,1,ReverseV,2)] _ReverseScrollType ("逆走時スクロール反転", Float) = 0
_FogIntencity ("FogIntencity", Range(0, 2)) = 1
}
SubShader {
 LOD 100
 Tags { "RenderType" = "Opaque" }
 Pass {
  LOD 100
  Tags { "RenderType" = "Opaque" }
  GpuProgramID 50243
Program "vp" {
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    float2 u_xlat4;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat4.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat4.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat4.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat4.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool2 u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    u_xlatb0.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat0.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb0.xy));
    u_xlat6.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat0.xy = fma((-u_xlat6.xx), u_xlat0.xy, float2(1.0, 1.0));
    u_xlat6.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat0.xy, u_xlat6.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat1.x * VGlobals._ProjectionParams.z;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = fma(u_xlat1.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat1.x, float(u_xlat16_2));
    u_xlat6.x = u_xlat0.z / u_xlat0.w;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat6.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float2 u_xlat4;
    bool2 u_xlatb4;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb4.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat4.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb4.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat4.xy = fma((-u_xlat1.xx), u_xlat4.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat4.xy, u_xlat0.xy);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat4.x = u_xlat0.z / u_xlat0.w;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat0.w * u_xlat4.x;
    output.mtl_Position.xyw = u_xlat0.xyw;
    output.COLOR0 = input.COLOR0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half u_xlat16_2;
    float2 u_xlat6;
    bool2 u_xlatb6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = u_xlat0.z / VGlobals._ProjectionParams.y;
    output.mtl_Position = u_xlat0;
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_2 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_2 = fma((-VGlobals.unity_FogColor.w), u_xlat16_2, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_2));
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb6.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat6.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb6.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat6.xy = fma((-u_xlat1.xx), u_xlat6.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat6.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 _MainTex_ST;
    half _ScrollSpeedU;
    half _ScrollSpeedV;
    half _FogIntencity;
    half _ReverseScrollType;
    float4 _MainTex2_ST;
    half _ScrollSpeedU2;
    half _ScrollSpeedV2;
    float4 booster_Env;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    half u_xlat16_3;
    float2 u_xlat8;
    bool2 u_xlatb8;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU, VGlobals._ScrollSpeedV)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlatb8.xy = (half2(VGlobals._ReverseScrollType)==half2(1.0, 2.0));
    u_xlat8.xy = select(float2(0.0, 0.0), float2(1.0, 1.0), bool2(u_xlatb8.xy));
    u_xlat1.x = VGlobals.booster_Env.y + VGlobals.booster_Env.y;
    u_xlat8.xy = fma((-u_xlat1.xx), u_xlat8.xy, float2(1.0, 1.0));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD0.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = u_xlat1 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat0.x = u_xlat1.z / VGlobals._ProjectionParams.y;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * VGlobals._ProjectionParams.z;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = fma(u_xlat0.x, VGlobals.unity_FogParams.z, VGlobals.unity_FogParams.w);
    u_xlat16_3 = VGlobals._FogIntencity * VGlobals._FogIntencity;
    u_xlat16_3 = fma((-VGlobals.unity_FogColor.w), u_xlat16_3, half(1.0));
    output.TEXCOORD1 = max(u_xlat0.x, float(u_xlat16_3));
    u_xlat0.x = u_xlat1.z / u_xlat1.w;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    output.mtl_Position.z = u_xlat1.w * u_xlat0.x;
    output.mtl_Position.xyw = u_xlat1.xyw;
    output.COLOR0 = input.COLOR0;
    u_xlat0.xy = float2(half2(VGlobals._ScrollSpeedU2, VGlobals._ScrollSpeedV2)) * VGlobals.booster_Env.xx;
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex2_ST.xy, VGlobals._MainTex2_ST.zw);
    output.TEXCOORD2.xy = fma(u_xlat1.xy, u_xlat8.xy, u_xlat0.xy);
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_1.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_0.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_0.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_0.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_0.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_0.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_0.xyz, (-FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    output.SV_Target0.xyz = u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz + (-FGlobals.unity_FogColor.xyz);
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyz), float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_VERTEXCOLOR_MULTIPLY" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_ONE" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_TEXTURE_BLEND_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat0.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), u_xlat0.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_MULTIPLY" "_MAIN_COLOR_ENABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(FGlobals.unity_FogColor.xyz)));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_IGNORE_FAR_DISABLE" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat3;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat3 = input.TEXCOORD1;
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat3), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_1.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_VERTEXCOLOR_ADD" "_MAIN_COLOR_DISABLE" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_ONE" "_VERTEXCOLOR_ADD" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(FGlobals._Color.xyz), u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_TEXTURE_BLEND_MULTIPLY" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float u_xlat9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * FGlobals._Color.xyz;
    u_xlat16_0.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = input.COLOR0.xyz * float3(FGlobals._VertexColor.xyz);
    u_xlat0.xyz = fma(float3(u_xlat16_1.xyz), float3(u_xlat16_0.xyz), u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat9 = input.TEXCOORD1;
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat9), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_IGNORE_FAR_DISABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FOG_LINEAR" "_FOG_ENABLE" "_MAIN_COLOR_ENABLE" "_VERTEXCOLOR_ADD" "_TEXTURE_TOW" "_TEXTURE_BLEND_ADD" "_IGNORE_FAR_ENABLE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    half4 unity_FogColor;
    half4 _Color;
    half4 _VertexColor;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_MainTex2 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex2 [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    float u_xlat6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = _MainTex2.sample(sampler_MainTex2, input.TEXCOORD2.xy).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, FGlobals._Color.xyz, u_xlat16_1.xyz);
    u_xlat0.xyz = fma(input.COLOR0.xyz, float3(FGlobals._VertexColor.xyz), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = u_xlat0.xyz + (-float3(FGlobals.unity_FogColor.xyz));
    u_xlat6 = input.TEXCOORD1;
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat0.xyz = fma(float3(u_xlat6), u_xlat0.xyz, float3(FGlobals.unity_FogColor.xyz));
    output.SV_Target0.xyz = half3(u_xlat0.xyz);
    output.SV_Target0.w = half(1.0);
    return output;
}
"
}
}
}
}
}