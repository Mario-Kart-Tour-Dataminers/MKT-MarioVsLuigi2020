//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/PostProcessing/Uber" {
Properties {
}
SubShader {
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 37131
Program "vp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _UVTransform;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float2 u_xlat0;
    output.mtl_Position.xy = input.POSITION0.xy;
    output.mtl_Position.zw = float2(0.0, 1.0);
    u_xlat0.xy = input.POSITION0.xy + float2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * VGlobals._UVTransform.xy;
    u_xlat0.xy = fma(u_xlat0.xy, float2(0.5, 0.5), VGlobals._UVTransform.zw);
    output.TEXCOORD1.xy = u_xlat0.xy * float2(VGlobals._RenderViewportScaleFactor);
    output.TEXCOORD0.xy = u_xlat0.xy;
    return output;
}
"
}
}
Program "fp" {
SubProgram "metal hw_tier00 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    bool u_xlatb6;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz;
    u_xlatb6 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb6){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
        output.SV_Target0.w = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(float3(u_xlat16_0.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    bool u_xlatb6;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz;
    u_xlatb6 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb6){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
        output.SV_Target0.w = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(float3(u_xlat16_0.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    bool u_xlatb6;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz;
    u_xlatb6 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb6){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
        output.SV_Target0.w = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(float3(u_xlat16_0.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Dithering_Coords;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half u_xlat16_0;
    half u_xlat16_1;
    half3 u_xlat16_2;
    u_xlat0.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_0 = _DitheringTex.sample(sampler_DitheringTex, u_xlat0.xy).w;
    u_xlat16_0 = fma(u_xlat16_0, half(2.0), half(-1.0));
    u_xlat16_2.x = -abs(u_xlat16_0) + half(1.0);
    u_xlat16_0 = half(fma(float(u_xlat16_0), 3.40282347e+38, 0.5));
    u_xlat16_0 = clamp(u_xlat16_0, 0.0h, 1.0h);
    u_xlat16_0 = fma(u_xlat16_0, half(2.0), half(-1.0));
    u_xlat16_2.x = sqrt(u_xlat16_2.x);
    u_xlat16_2.x = (-u_xlat16_2.x) + half(1.0);
    u_xlat16_0 = u_xlat16_2.x * u_xlat16_0;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_1 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(u_xlat16_1);
    u_xlat16_2.xyz = sqrt(u_xlat16_2.xyz);
    output.SV_Target0.xyz = fma(float3(u_xlat16_0), float3(0.00392156886, 0.00392156886, 0.00392156886), float3(u_xlat16_2.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Dithering_Coords;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half u_xlat16_0;
    half u_xlat16_1;
    half3 u_xlat16_2;
    u_xlat0.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_0 = _DitheringTex.sample(sampler_DitheringTex, u_xlat0.xy).w;
    u_xlat16_0 = fma(u_xlat16_0, half(2.0), half(-1.0));
    u_xlat16_2.x = -abs(u_xlat16_0) + half(1.0);
    u_xlat16_0 = half(fma(float(u_xlat16_0), 3.40282347e+38, 0.5));
    u_xlat16_0 = clamp(u_xlat16_0, 0.0h, 1.0h);
    u_xlat16_0 = fma(u_xlat16_0, half(2.0), half(-1.0));
    u_xlat16_2.x = sqrt(u_xlat16_2.x);
    u_xlat16_2.x = (-u_xlat16_2.x) + half(1.0);
    u_xlat16_0 = u_xlat16_2.x * u_xlat16_0;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_1 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(u_xlat16_1);
    u_xlat16_2.xyz = sqrt(u_xlat16_2.xyz);
    output.SV_Target0.xyz = fma(float3(u_xlat16_0), float3(0.00392156886, 0.00392156886, 0.00392156886), float3(u_xlat16_2.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Dithering_Coords;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half u_xlat16_0;
    half u_xlat16_1;
    half3 u_xlat16_2;
    u_xlat0.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_0 = _DitheringTex.sample(sampler_DitheringTex, u_xlat0.xy).w;
    u_xlat16_0 = fma(u_xlat16_0, half(2.0), half(-1.0));
    u_xlat16_2.x = -abs(u_xlat16_0) + half(1.0);
    u_xlat16_0 = half(fma(float(u_xlat16_0), 3.40282347e+38, 0.5));
    u_xlat16_0 = clamp(u_xlat16_0, 0.0h, 1.0h);
    u_xlat16_0 = fma(u_xlat16_0, half(2.0), half(-1.0));
    u_xlat16_2.x = sqrt(u_xlat16_2.x);
    u_xlat16_2.x = (-u_xlat16_2.x) + half(1.0);
    u_xlat16_0 = u_xlat16_2.x * u_xlat16_0;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_1 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(u_xlat16_1);
    u_xlat16_2.xyz = sqrt(u_xlat16_2.xyz);
    output.SV_Target0.xyz = fma(float3(u_xlat16_0), float3(0.00392156886, 0.00392156886, 0.00392156886), float3(u_xlat16_2.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half4 u_xlat16_0;
    float2 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float3 u_xlat4;
    float u_xlat6;
    half u_xlat16_6;
    half u_xlat16_9;
    u_xlat0.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat0.y = 0.0;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_1.zxy;
    u_xlat16_6 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_1.xyz = half3(u_xlat16_6) * u_xlat16_1.xyz;
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
    u_xlat16_1.xyz = sqrt(u_xlat16_1.xyz);
    u_xlat4.xyz = float3(u_xlat16_1.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6 = floor(u_xlat4.x);
    u_xlat2.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat2.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat2.xy);
    u_xlat2.x = fma(u_xlat6, FGlobals._Lut2D_Params.xyzx.y, u_xlat2.y);
    u_xlat6 = fma(float(u_xlat16_1.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6));
    u_xlat0.xy = u_xlat0.xy + u_xlat2.xz;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat2.xz).xyz;
    u_xlat16_0.xyw = _Lut2D.sample(sampler_Lut2D, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = (-u_xlat16_1.xyz) + u_xlat16_0.xyw;
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyw), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half4 u_xlat16_0;
    float2 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float3 u_xlat4;
    float u_xlat6;
    half u_xlat16_6;
    half u_xlat16_9;
    u_xlat0.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat0.y = 0.0;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_1.zxy;
    u_xlat16_6 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_1.xyz = half3(u_xlat16_6) * u_xlat16_1.xyz;
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
    u_xlat16_1.xyz = sqrt(u_xlat16_1.xyz);
    u_xlat4.xyz = float3(u_xlat16_1.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6 = floor(u_xlat4.x);
    u_xlat2.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat2.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat2.xy);
    u_xlat2.x = fma(u_xlat6, FGlobals._Lut2D_Params.xyzx.y, u_xlat2.y);
    u_xlat6 = fma(float(u_xlat16_1.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6));
    u_xlat0.xy = u_xlat0.xy + u_xlat2.xz;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat2.xz).xyz;
    u_xlat16_0.xyw = _Lut2D.sample(sampler_Lut2D, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = (-u_xlat16_1.xyz) + u_xlat16_0.xyw;
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyw), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half4 u_xlat16_0;
    float2 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    float3 u_xlat4;
    float u_xlat6;
    half u_xlat16_6;
    half u_xlat16_9;
    u_xlat0.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat0.y = 0.0;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_1.zxy;
    u_xlat16_6 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_1.xyz = half3(u_xlat16_6) * u_xlat16_1.xyz;
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
    u_xlat16_1.xyz = sqrt(u_xlat16_1.xyz);
    u_xlat4.xyz = float3(u_xlat16_1.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6 = floor(u_xlat4.x);
    u_xlat2.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat2.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat2.xy);
    u_xlat2.x = fma(u_xlat6, FGlobals._Lut2D_Params.xyzx.y, u_xlat2.y);
    u_xlat6 = fma(float(u_xlat16_1.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6));
    u_xlat0.xy = u_xlat0.xy + u_xlat2.xz;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat2.xz).xyz;
    u_xlat16_0.xyw = _Lut2D.sample(sampler_Lut2D, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = (-u_xlat16_1.xyz) + u_xlat16_0.xyw;
    u_xlat0.xyz = fma(float3(u_xlat6), float3(u_xlat16_0.xyw), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_GrainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    bool u_xlatb9;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_9 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_9)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat9), float3(u_xlat16_0.xyz));
    u_xlatb9 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb9){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_GrainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    bool u_xlatb9;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_9 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_9)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat9), float3(u_xlat16_0.xyz));
    u_xlatb9 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb9){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_GrainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    bool u_xlatb9;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_9 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_9)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat9), float3(u_xlat16_0.xyz));
    u_xlatb9 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb9){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_12 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_12)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_12 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_12)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_12 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_12)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Dithering_Coords;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    half u_xlat16_6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_6 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_6) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz;
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
    u_xlat16_6 = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_6 = sqrt(u_xlat16_6);
    u_xlat6 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_6)), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat6), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_6 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_6 = fma(u_xlat16_6, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_6) + half(1.0);
    u_xlat16_6 = half(fma(float(u_xlat16_6), 3.40282347e+38, 0.5));
    u_xlat16_6 = clamp(u_xlat16_6, 0.0h, 1.0h);
    u_xlat16_6 = fma(u_xlat16_6, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_6 = u_xlat16_6 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_6), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Dithering_Coords;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    half u_xlat16_6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_6 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_6) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz;
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
    u_xlat16_6 = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_6 = sqrt(u_xlat16_6);
    u_xlat6 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_6)), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat6), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_6 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_6 = fma(u_xlat16_6, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_6) + half(1.0);
    u_xlat16_6 = half(fma(float(u_xlat16_6), 3.40282347e+38, 0.5));
    u_xlat16_6 = clamp(u_xlat16_6, 0.0h, 1.0h);
    u_xlat16_6 = fma(u_xlat16_6, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_6 = u_xlat16_6 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_6), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Dithering_Coords;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float u_xlat6;
    half u_xlat16_6;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_6 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_6) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz;
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
    u_xlat16_6 = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_6 = sqrt(u_xlat16_6);
    u_xlat6 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_6)), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat6), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_6 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_6 = fma(u_xlat16_6, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_6) + half(1.0);
    u_xlat16_6 = half(fma(float(u_xlat16_6), 3.40282347e+38, 0.5));
    u_xlat16_6 = clamp(u_xlat16_6, 0.0h, 1.0h);
    u_xlat16_6 = fma(u_xlat16_6, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_6 = u_xlat16_6 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_6), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float2 u_xlat2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_0.zxy;
    u_xlat16_9 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_9) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.yzx;
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
    u_xlat16_9 = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_9)), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat9), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat3.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat1.x = fma(u_xlat3.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat3.x));
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_3.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float2 u_xlat2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_0.zxy;
    u_xlat16_9 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_9) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.yzx;
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
    u_xlat16_9 = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_9)), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat9), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat3.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat1.x = fma(u_xlat3.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat3.x));
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_3.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float2 u_xlat2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_0.zxy;
    u_xlat16_9 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_9) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.yzx;
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
    u_xlat16_9 = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_9)), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat9), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat3.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat1.x = fma(u_xlat3.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat3.x));
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_3.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Vignette_Mask [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float3 u_xlat1;
    float3 u_xlat2;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    bool u_xlatb9;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlatb9 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb9){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat9 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = fma(FGlobals._Vignette_Settings.w, u_xlat9, 1.0);
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * FGlobals._Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat9), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_9 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_9), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Vignette_Mask [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float3 u_xlat1;
    float3 u_xlat2;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    bool u_xlatb9;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlatb9 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb9){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat9 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = fma(FGlobals._Vignette_Settings.w, u_xlat9, 1.0);
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * FGlobals._Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat9), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_9 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_9), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Vignette_Mask [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float3 u_xlat1;
    float3 u_xlat2;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    bool u_xlatb9;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlatb9 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb9){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat9 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = fma(FGlobals._Vignette_Settings.w, u_xlat9, 1.0);
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * FGlobals._Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat9), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_9 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_9), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Dithering_Coords;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    bool u_xlatb9;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlatb9 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb9){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat9 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = fma(FGlobals._Vignette_Settings.w, u_xlat9, 1.0);
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * FGlobals._Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat9), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_9 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_9), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_9 = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat16_9 = (-u_xlat16_9) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Dithering_Coords;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    bool u_xlatb9;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlatb9 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb9){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat9 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = fma(FGlobals._Vignette_Settings.w, u_xlat9, 1.0);
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * FGlobals._Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat9), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_9 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_9), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_9 = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat16_9 = (-u_xlat16_9) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Dithering_Coords;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    bool u_xlatb9;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlatb9 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb9){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat9 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = fma(FGlobals._Vignette_Settings.w, u_xlat9, 1.0);
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * FGlobals._Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat9), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_9 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_9), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_9 = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat16_9 = (-u_xlat16_9) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Vignette_Mask [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float3 u_xlat2;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    bool u_xlatb9;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlatb9 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb9){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat9 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = fma(FGlobals._Vignette_Settings.w, u_xlat9, 1.0);
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * FGlobals._Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat9), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_9 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_9), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat9), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat9), u_xlat1.xyz);
    u_xlatb9 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb9){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Vignette_Mask [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float3 u_xlat2;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    bool u_xlatb9;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlatb9 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb9){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat9 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = fma(FGlobals._Vignette_Settings.w, u_xlat9, 1.0);
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * FGlobals._Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat9), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_9 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_9), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat9), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat9), u_xlat1.xyz);
    u_xlatb9 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb9){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Vignette_Mask [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    float3 u_xlat2;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    bool u_xlatb9;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlatb9 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb9){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat9 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = fma(FGlobals._Vignette_Settings.w, u_xlat9, 1.0);
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * FGlobals._Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat9), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_9 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_9), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat9), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat9), u_xlat1.xyz);
    u_xlatb9 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb9){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Dithering_Coords;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    bool u_xlatb9;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlatb9 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb9){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat9 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = fma(FGlobals._Vignette_Settings.w, u_xlat9, 1.0);
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * FGlobals._Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat9), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_9 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_9), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat9), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat9), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_9 = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat16_9 = (-u_xlat16_9) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Dithering_Coords;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    bool u_xlatb9;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlatb9 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb9){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat9 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = fma(FGlobals._Vignette_Settings.w, u_xlat9, 1.0);
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * FGlobals._Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat9), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_9 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_9), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat9), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat9), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_9 = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat16_9 = (-u_xlat16_9) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Dithering_Coords;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    bool u_xlatb9;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlatb9 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb9){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat9 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = fma(FGlobals._Vignette_Settings.w, u_xlat9, 1.0);
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * FGlobals._Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat9), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_9 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_9), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat9), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat9), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_9 = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat16_9 = (-u_xlat16_9) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_3.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_3.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_3.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    half u_xlat16_9;
    u_xlat0 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat0.xyzy, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat0 = fma(u_xlat0.xwzw, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat0.xyz = u_xlat0.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_9 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1.xyz = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_9), u_xlat1.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    half u_xlat16_9;
    u_xlat0 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat0.xyzy, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat0 = fma(u_xlat0.xwzw, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat0.xyz = u_xlat0.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_9 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1.xyz = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_9), u_xlat1.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    half u_xlat16_9;
    u_xlat0 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat0.xyzy, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat0 = fma(u_xlat0.xwzw, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat0.xyz = u_xlat0.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_9 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1.xyz = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_9), u_xlat1.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half u_xlat16_9;
    u_xlat0 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat0.xyzy, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat0 = fma(u_xlat0.xwzw, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.zxy;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy + u_xlat16_1.xyz;
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat0.xyz = u_xlat0.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy * u_xlat16_2.zxy;
    u_xlat16_9 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1.xyz = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_9), u_xlat1.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat3.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat3.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat3.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_3.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half u_xlat16_9;
    u_xlat0 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat0.xyzy, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat0 = fma(u_xlat0.xwzw, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.zxy;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy + u_xlat16_1.xyz;
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat0.xyz = u_xlat0.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy * u_xlat16_2.zxy;
    u_xlat16_9 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1.xyz = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_9), u_xlat1.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat3.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat3.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat3.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_3.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half u_xlat16_9;
    u_xlat0 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat0.xyzy, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat0 = fma(u_xlat0.xwzw, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.zxy;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy + u_xlat16_1.xyz;
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat0.xyz = u_xlat0.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy * u_xlat16_2.zxy;
    u_xlat16_9 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1.xyz = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_9), u_xlat1.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat3.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat3.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat3.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_3.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_3.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_3.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    float u_xlat12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_3.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float u_xlat9;
    half u_xlat16_9;
    u_xlat0 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat0.xyzy, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat0 = fma(u_xlat0.xwzw, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat0.xyz = u_xlat0.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_9 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1.xyz = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_9), u_xlat1.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat9), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat9), u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float u_xlat9;
    half u_xlat16_9;
    u_xlat0 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat0.xyzy, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat0 = fma(u_xlat0.xwzw, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat0.xyz = u_xlat0.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_9 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1.xyz = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_9), u_xlat1.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat9), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat9), u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float u_xlat9;
    half u_xlat16_9;
    u_xlat0 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat0.xyzy, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat0 = fma(u_xlat0.xwzw, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat0.xyz = u_xlat0.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_9 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1.xyz = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_9), u_xlat1.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat9), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat9), u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    u_xlat0 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat0.xyzy, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat0 = fma(u_xlat0.xwzw, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.zxy;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy + u_xlat16_1.xyz;
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat0.xyz = u_xlat0.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy * u_xlat16_2.zxy;
    u_xlat16_9 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1.xyz = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_9), u_xlat1.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat0.yzx;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat9), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat9), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat3.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat3.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat3.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_3.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    u_xlat0 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat0.xyzy, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat0 = fma(u_xlat0.xwzw, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.zxy;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy + u_xlat16_1.xyz;
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat0.xyz = u_xlat0.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy * u_xlat16_2.zxy;
    u_xlat16_9 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1.xyz = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_9), u_xlat1.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat0.yzx;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat9), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat9), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat3.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat3.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat3.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_3.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat9;
    half u_xlat16_9;
    u_xlat0 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat0.xyzy, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat0 = fma(u_xlat0.xwzw, u_xlat1.xxxx, input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.zxy;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy + u_xlat16_1.xyz;
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat0.xyz = u_xlat0.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy * u_xlat16_2.zxy;
    u_xlat16_9 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1.xyz = fma(float3(u_xlat16_2.xyz), float3(u_xlat16_9), u_xlat1.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat0.yzx;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat9), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat9), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat3.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat3.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat3.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_3.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_9 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_9) + half(1.0);
    u_xlat16_9 = half(fma(float(u_xlat16_9), 3.40282347e+38, 0.5));
    u_xlat16_9 = clamp(u_xlat16_9, 0.0h, 1.0h);
    u_xlat16_9 = fma(u_xlat16_9, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_9), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.xyz);
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.xyz);
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.xyz);
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    float2 u_xlat8;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_4.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb12 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb12){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat12 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = fma(FGlobals._Vignette_Settings.w, u_xlat12, 1.0);
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * FGlobals._Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat12), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_12), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat12), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat12), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
        output.SV_Target0.w = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(float3(u_xlat16_0.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
        output.SV_Target0.w = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(float3(u_xlat16_0.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
        output.SV_Target0.w = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(float3(u_xlat16_0.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_6.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat6.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_6.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat6.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_6.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat6.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float2 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_4.xyz, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), float3(u_xlat16_0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float2 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_4.xyz, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), float3(u_xlat16_0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float2 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_4.xyz, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), float3(u_xlat16_0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_4.zxy, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat5.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_4.zxy, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat5.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_4.zxy, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat5.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_18 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_18)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat18), float3(u_xlat16_0.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_18 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_18)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat18), float3(u_xlat16_0.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_18 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_18)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat18), float3(u_xlat16_0.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_6.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_18 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_18)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat18), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_6.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_18 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_18)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat18), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_6.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_18 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_18)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat18), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_4.xyz, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz;
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
    u_xlat16_15 = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_15)), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_4.xyz, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz;
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
    u_xlat16_15 = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_15)), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_4.xyz, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz;
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
    u_xlat16_15 = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_15)), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_4.zxy, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.yzx;
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
    u_xlat16_15 = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_15)), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_4.zxy, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.yzx;
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
    u_xlat16_15 = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_15)), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_4.zxy, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_0.xyz = half3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.yzx;
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
    u_xlat16_15 = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_15)), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.xyz);
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.xyz);
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.xyz);
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_6.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_3.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_6.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_3.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_6.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_3.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_4.xyz, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat1.xyzy, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat1 = fma(u_xlat1.xwzw, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_15), u_xlat2.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_4.xyz, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat1.xyzy, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat1 = fma(u_xlat1.xwzw, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_15), u_xlat2.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_4.xyz, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat1.xyzy, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat1 = fma(u_xlat1.xwzw, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_15), u_xlat2.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_4.zxy, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat1.xyzy, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat1 = fma(u_xlat1.xwzw, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_3.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_15), u_xlat2.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_4.zxy, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat1.xyzy, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat1 = fma(u_xlat1.xwzw, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_3.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_15), u_xlat2.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_4.zxy, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat1.xyzy, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat1 = fma(u_xlat1.xwzw, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_3.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_15), u_xlat2.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float u_xlat18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat18), u_xlat0.xyz);
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float u_xlat18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat18), u_xlat0.xyz);
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float u_xlat18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat18), u_xlat0.xyz);
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    float u_xlat18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_6.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_3.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat18), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    float u_xlat18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_6.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_3.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat18), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    float u_xlat18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_6.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_3.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat18), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_4.xyz, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat1.xyzy, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat1 = fma(u_xlat1.xwzw, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_15), u_xlat2.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_4.xyz, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat1.xyzy, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat1 = fma(u_xlat1.xwzw, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_15), u_xlat2.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_4.xyz, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat1.xyzy, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat1 = fma(u_xlat1.xwzw, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_15), u_xlat2.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_4.zxy, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat1.xyzy, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat1 = fma(u_xlat1.xwzw, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_3.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_15), u_xlat2.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yzx;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_4.zxy, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat1.xyzy, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat1 = fma(u_xlat1.xwzw, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_3.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_15), u_xlat2.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yzx;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat15;
    half u_xlat16_15;
    u_xlat0 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat0 = fma(u_xlat0, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat0 = clamp(u_xlat0, 0.0f, 1.0f);
    u_xlat0 = u_xlat0 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.zw, level(0.0)).xyz;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = input.TEXCOORD0.xy;
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_4.zxy, u_xlat16_0.xyz);
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat16_0.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_0.xyz);
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat2 = fma(u_xlat1.xyzy, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat2 = clamp(u_xlat2, 0.0f, 1.0f);
    u_xlat1 = fma(u_xlat1.xwzw, float4(u_xlat15), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_3.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat16_15 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_15), u_xlat2.xyz);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yzx;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat2.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_1.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_15 = clamp(u_xlat16_15, 0.0h, 1.0h);
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_Vignette_Mask [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_Vignette_Mask [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_Vignette_Mask [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.xyz);
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.xyz);
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.xyz);
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlatb18 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_Vignette_Mask [[ sampler (7) ]],
    sampler sampler_GrainTex [[ sampler (8) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(7) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_Vignette_Mask [[ sampler (7) ]],
    sampler sampler_GrainTex [[ sampler (8) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(7) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_Vignette_Mask [[ sampler (7) ]],
    sampler sampler_GrainTex [[ sampler (8) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(7) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half3 u_xlat16_8;
    float2 u_xlat12;
    float u_xlat18;
    half u_xlat16_18;
    bool u_xlatb18;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_6.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.zw, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_6.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_8.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, input.TEXCOORD0.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(input.TEXCOORD0.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_6.xyz), float3(u_xlat16_0.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb18 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb18){
        u_xlat1.xy = input.TEXCOORD0.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat18 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = fma(FGlobals._Vignette_Settings.w, u_xlat18, 1.0);
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * FGlobals._Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat18), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = _Vignette_Mask.sample(sampler_Vignette_Mask, input.TEXCOORD0.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_18), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat18 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat18), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat6.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat6.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat6.x));
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_6.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_18 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = fma(u_xlat16_18, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_18), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_18 = -abs(u_xlat16_18) + half(1.0);
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + half(1.0);
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_18), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    float u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1 = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1 = sqrt(u_xlat1);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = float2(u_xlat1) * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1 = u_xlat1 * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1), 1.0);
        u_xlat6 = max(abs(u_xlat1), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1 = min(u_xlat1, 1.0);
        u_xlatb1 = u_xlat1<(-u_xlat1);
        u_xlat1 = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1 = fma(u_xlat13, u_xlat1, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, float2(u_xlat1), u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
        output.SV_Target0.w = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(float3(u_xlat16_0.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    float u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1 = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1 = sqrt(u_xlat1);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = float2(u_xlat1) * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1 = u_xlat1 * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1), 1.0);
        u_xlat6 = max(abs(u_xlat1), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1 = min(u_xlat1, 1.0);
        u_xlatb1 = u_xlat1<(-u_xlat1);
        u_xlat1 = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1 = fma(u_xlat13, u_xlat1, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, float2(u_xlat1), u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
        output.SV_Target0.w = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(float3(u_xlat16_0.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    float u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    float u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1 = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1 = sqrt(u_xlat1);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = float2(u_xlat1) * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1 = u_xlat1 * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1), 1.0);
        u_xlat6 = max(abs(u_xlat1), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1 = min(u_xlat1, 1.0);
        u_xlatb1 = u_xlat1<(-u_xlat1);
        u_xlat1 = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1 = fma(u_xlat13, u_xlat1, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, float2(u_xlat1), u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
        output.SV_Target0.w = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(float3(u_xlat16_0.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    float2 u_xlat1;
    half u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    float u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    half u_xlat16_12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), float3(u_xlat16_0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    float2 u_xlat1;
    half u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    float u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    half u_xlat16_12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), float3(u_xlat16_0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float2 u_xlat0;
    half3 u_xlat16_0;
    float2 u_xlat1;
    half u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    float u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    half u_xlat16_12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), float3(u_xlat16_0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    half u_xlat16_12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    half u_xlat16_12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    half u_xlat16_12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_GrainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_12 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_12)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), float3(u_xlat16_0.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_GrainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_12 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_12)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), float3(u_xlat16_0.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_GrainTex [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_12 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_12)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), float3(u_xlat16_0.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_12 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_12)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_12 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_12)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat12;
    half u_xlat16_12;
    bool u_xlatb12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_12 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_12)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlatb12 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat12;
    half u_xlat16_12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_12 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_12)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat12;
    half u_xlat16_12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_12 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_12)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float u_xlat3;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat12;
    half u_xlat16_12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_12 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_12)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat12;
    half u_xlat16_12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_12 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_12)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat12;
    half u_xlat16_12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_12 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_12)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float2 u_xlat3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    float2 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float2 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat12;
    half u_xlat16_12;
    float u_xlat13;
    bool u_xlatb14;
    u_xlat0.xy = input.TEXCOORD1.xy + float2(-0.5, -0.5);
    u_xlat8.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb5 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat9, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat5.xx, u_xlat8.xy);
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = fma(u_xlat6, 0.0208350997, -0.0851330012);
        u_xlat10 = fma(u_xlat6, u_xlat10, 0.180141002);
        u_xlat10 = fma(u_xlat6, u_xlat10, -0.330299497);
        u_xlat6 = fma(u_xlat6, u_xlat10, 0.999866009);
        u_xlat10 = u_xlat6 * u_xlat2;
        u_xlatb14 = 1.0<abs(u_xlat1.x);
        u_xlat10 = fma(u_xlat10, -2.0, 1.57079637);
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = fma(u_xlat2, u_xlat6, u_xlat10);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = fma(u_xlat13, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat8.xy);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_12 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_12)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat12), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat4.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat4.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat4.x));
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_4.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_12 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = fma(u_xlat16_12, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_12), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_12 = -abs(u_xlat16_12) + half(1.0);
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + half(1.0);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_12), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Vignette_Mask [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    float3 u_xlat2;
    bool u_xlatb2;
    float u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3 = fma(u_xlat7, u_xlat3, 0.180141002);
        u_xlat3 = fma(u_xlat7, u_xlat3, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3, 0.999866009);
        u_xlat3 = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3 = fma(u_xlat3, -2.0, 1.57079637);
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Vignette_Mask [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    float3 u_xlat2;
    bool u_xlatb2;
    float u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3 = fma(u_xlat7, u_xlat3, 0.180141002);
        u_xlat3 = fma(u_xlat7, u_xlat3, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3, 0.999866009);
        u_xlat3 = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3 = fma(u_xlat3, -2.0, 1.57079637);
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Vignette_Mask [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    float3 u_xlat2;
    bool u_xlatb2;
    float u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3 = fma(u_xlat7, u_xlat3, 0.180141002);
        u_xlat3 = fma(u_xlat7, u_xlat3, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3, 0.999866009);
        u_xlat3 = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3 = fma(u_xlat3, -2.0, 1.57079637);
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float2 u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float2 u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float2 u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3 = fma(u_xlat7, u_xlat3, 0.180141002);
        u_xlat3 = fma(u_xlat7, u_xlat3, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3, 0.999866009);
        u_xlat3 = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3 = fma(u_xlat3, -2.0, 1.57079637);
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3 = fma(u_xlat7, u_xlat3, 0.180141002);
        u_xlat3 = fma(u_xlat7, u_xlat3, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3, 0.999866009);
        u_xlat3 = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3 = fma(u_xlat3, -2.0, 1.57079637);
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3 = fma(u_xlat7, u_xlat3, 0.180141002);
        u_xlat3 = fma(u_xlat7, u_xlat3, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3, 0.999866009);
        u_xlat3 = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3 = fma(u_xlat3, -2.0, 1.57079637);
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float2 u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float2 u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float2 u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Vignette_Mask [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    float3 u_xlat2;
    bool u_xlatb2;
    float u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3 = fma(u_xlat7, u_xlat3, 0.180141002);
        u_xlat3 = fma(u_xlat7, u_xlat3, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3, 0.999866009);
        u_xlat3 = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3 = fma(u_xlat3, -2.0, 1.57079637);
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.xyz);
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Vignette_Mask [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    float3 u_xlat2;
    bool u_xlatb2;
    float u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3 = fma(u_xlat7, u_xlat3, 0.180141002);
        u_xlat3 = fma(u_xlat7, u_xlat3, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3, 0.999866009);
        u_xlat3 = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3 = fma(u_xlat3, -2.0, 1.57079637);
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.xyz);
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Vignette_Mask [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    float3 u_xlat2;
    bool u_xlatb2;
    float u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3 = fma(u_xlat7, u_xlat3, 0.180141002);
        u_xlat3 = fma(u_xlat7, u_xlat3, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3, 0.999866009);
        u_xlat3 = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3 = fma(u_xlat3, -2.0, 1.57079637);
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.xyz);
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float2 u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float2 u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_Lut2D [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float2 u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3 = fma(u_xlat7, u_xlat3, 0.180141002);
        u_xlat3 = fma(u_xlat7, u_xlat3, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3, 0.999866009);
        u_xlat3 = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3 = fma(u_xlat3, -2.0, 1.57079637);
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3 = fma(u_xlat7, u_xlat3, 0.180141002);
        u_xlat3 = fma(u_xlat7, u_xlat3, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3, 0.999866009);
        u_xlat3 = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3 = fma(u_xlat3, -2.0, 1.57079637);
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3 = fma(u_xlat7, u_xlat3, 0.180141002);
        u_xlat3 = fma(u_xlat7, u_xlat3, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3, 0.999866009);
        u_xlat3 = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3 = fma(u_xlat3, -2.0, 1.57079637);
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float2 u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float2 u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float2 u_xlat3;
    float u_xlat4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(float3(u_xlat16_0.xyz), u_xlat2.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    half u_xlat16_15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    half u_xlat16_15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    half u_xlat16_15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    half u_xlat16_15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    half u_xlat16_15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    half u_xlat16_15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_2.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat2.xyz = float3(u_xlat16_2.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat15), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0 = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.zxy, u_xlat0.zxy);
    }
    u_xlat1.xyz = u_xlat1.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.xyz);
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.xyz);
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.xyz);
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlatb15 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = fma(u_xlat5, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, float2(u_xlat5), u_xlat1.zw);
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
        float4 phase0_Input0_1;
        phase0_Input0_1 = float4(input.TEXCOORD0, input.TEXCOORD1);
    float4 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    bool u_xlatb2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float3 u_xlat4;
    half3 u_xlat16_4;
    bool u_xlatb4;
    float3 u_xlat5;
    half3 u_xlat16_5;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    bool u_xlatb8;
    float2 u_xlat10;
    float2 u_xlat12;
    float u_xlat13;
    float u_xlat15;
    half u_xlat16_15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat18;
    u_xlat0 = phase0_Input0_1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat0 = fma(u_xlat0, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat0 = u_xlat0 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb7 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = fma(u_xlat12.x, u_xlat17, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat12.xx, u_xlat1.xy);
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = fma(u_xlat13, 0.0208350997, -0.0851330012);
        u_xlat18 = fma(u_xlat13, u_xlat18, 0.180141002);
        u_xlat18 = fma(u_xlat13, u_xlat18, -0.330299497);
        u_xlat13 = fma(u_xlat13, u_xlat18, 0.999866009);
        u_xlat18 = u_xlat13 * u_xlat8;
        u_xlatb4 = 1.0<abs(u_xlat2.x);
        u_xlat18 = fma(u_xlat18, -2.0, 1.57079637);
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = fma(u_xlat8, u_xlat13, u_xlat18);
        u_xlat2.x = min(u_xlat2.x, 1.0);
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = fma(u_xlat3.x, u_xlat2.x, -1.0);
        u_xlat12.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat1.xy);
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat1.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat5.xx, u_xlat1.zw);
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * FGlobals._Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * FGlobals._Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = fma(u_xlat7, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat7, u_xlat3.x, -0.330299497);
        u_xlat7 = fma(u_xlat7, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat7 * u_xlat2.x;
        u_xlatb8 = 1.0<abs(u_xlat0.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = fma(u_xlat2.x, u_xlat7, u_xlat3.x);
        u_xlat0.x = min(u_xlat0.x, 1.0);
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = fma(u_xlat5.x, u_xlat0.x, -1.0);
        u_xlat1.xy = fma(u_xlat0.zw, u_xlat0.xx, u_xlat1.zw);
    }
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat3 = fma(u_xlat1.xyzy, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = fma(u_xlat1.xwzw, u_xlat2.xxxx, u_xlat12.xyxy);
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = u_xlat1 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat2.xy = fma(u_xlat12.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat1.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_5.xyz), float3(u_xlat16_0.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    u_xlatb15 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat15 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = fma(FGlobals._Vignette_Settings.w, u_xlat15, 1.0);
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * FGlobals._Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat15), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat16_15), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, (-u_xlat0.xyz));
        u_xlat1.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat2.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(phase0_Input0_1.zw, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat15), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat15), u_xlat1.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat5.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat5.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat5.x));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_5.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(phase0_Input0_1.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_15 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = fma(u_xlat16_15, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_15), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_15 = -abs(u_xlat16_15) + half(1.0);
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + half(1.0);
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_15), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    bool u_xlatb24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_8.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
        output.SV_Target0.w = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(float3(u_xlat16_0.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    bool u_xlatb24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_8.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
        output.SV_Target0.w = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(float3(u_xlat16_0.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    bool u_xlatb24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_8.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0h, 1.0h);
        output.SV_Target0.w = dot(u_xlat16_1.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(float3(u_xlat16_0.xyz));
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat16;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    bool u_xlatb24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_8.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat8.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat16;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    bool u_xlatb24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_8.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat8.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat16;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    bool u_xlatb24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_8.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat8.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    half u_xlat16_24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_8.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), float3(u_xlat16_0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    half u_xlat16_24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_8.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), float3(u_xlat16_0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    half u_xlat16_24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_8.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), float3(u_xlat16_0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat16;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    half u_xlat16_24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_8.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat8.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat16;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    half u_xlat16_24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_8.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat8.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat16;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    half u_xlat16_24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_8.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0h, 1.0h);
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat8.xyz = float3(u_xlat16_0.xyz) * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(float(u_xlat16_0.x), FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_8.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_24 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_24)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), float3(u_xlat16_0.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_8.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_24 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_24)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), float3(u_xlat16_0.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_GrainTex [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_8.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_24 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_24)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), float3(u_xlat16_0.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat16;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_8.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_24 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_24)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat16;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_8.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_24 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_24)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat16;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_8.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_24 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_24)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat24;
    half u_xlat16_24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_8.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_24 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_24)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat24;
    half u_xlat16_24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_8.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_24 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_24)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat24;
    half u_xlat16_24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = float4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = fma(u_xlat16_4.xyz, u_xlat16_8.xyz, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.xyz, u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_24 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_24)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat16;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat24;
    half u_xlat16_24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_8.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_24 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_24)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat16;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat24;
    half u_xlat16_24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_8.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_24 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_24)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half3 u_xlat16_3;
    float2 u_xlat4;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float2 u_xlat6;
    half3 u_xlat16_6;
    float u_xlat7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb15;
    float2 u_xlat16;
    float2 u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat24;
    half u_xlat16_24;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat16_0.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat1 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_8.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_2.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_3.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    u_xlat4.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat20.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat4.xy = fma(u_xlat4.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
    u_xlatb27 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb27){
        u_xlat5.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = fma(u_xlat5.x, u_xlat13, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, u_xlat5.xx, u_xlat20.xy);
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = fma(u_xlat6.x, 0.0208350997, -0.0851330012);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, 0.180141002);
        u_xlat14 = fma(u_xlat6.x, u_xlat14, -0.330299497);
        u_xlat6.x = fma(u_xlat6.x, u_xlat14, 0.999866009);
        u_xlat14 = u_xlat29 * u_xlat6.x;
        u_xlatb22 = 1.0<abs(u_xlat26);
        u_xlat14 = fma(u_xlat14, -2.0, 1.57079637);
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat6.x, u_xlat14);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = fma(u_xlat21, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat4.xy, float2(u_xlat26), u_xlat20.xy);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat4.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, u_xlat4.xy, level(0.0)).xyz;
    u_xlat1 = fma(u_xlat1, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat1 = u_xlat1 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat1 = fma(u_xlat1, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat1 = u_xlat1 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = float2(u_xlat26) * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat6.x, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat28), u_xlat5.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat26 = u_xlat26 * FGlobals._Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = fma(u_xlat30, 0.0208350997, -0.0851330012);
        u_xlat7 = fma(u_xlat30, u_xlat7, 0.180141002);
        u_xlat7 = fma(u_xlat30, u_xlat7, -0.330299497);
        u_xlat30 = fma(u_xlat30, u_xlat7, 0.999866009);
        u_xlat7 = u_xlat30 * u_xlat22;
        u_xlatb15 = 1.0<abs(u_xlat26);
        u_xlat7 = fma(u_xlat7, -2.0, 1.57079637);
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = fma(u_xlat22, u_xlat30, u_xlat7);
        u_xlat26 = min(u_xlat26, 1.0);
        u_xlatb26 = u_xlat26<(-u_xlat26);
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = fma(u_xlat28, u_xlat26, -1.0);
        u_xlat6.xy = fma(u_xlat1.xy, float2(u_xlat26), u_xlat5.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = fma(u_xlat9, u_xlat26, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, float2(u_xlat9), u_xlat5.zw);
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = fma(u_xlat27, 0.0208350997, -0.0851330012);
        u_xlat28 = fma(u_xlat27, u_xlat28, 0.180141002);
        u_xlat28 = fma(u_xlat27, u_xlat28, -0.330299497);
        u_xlat27 = fma(u_xlat27, u_xlat28, 0.999866009);
        u_xlat28 = u_xlat26 * u_xlat27;
        u_xlatb30 = 1.0<abs(u_xlat1.x);
        u_xlat28 = fma(u_xlat28, -2.0, 1.57079637);
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat28);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = fma(u_xlat9, u_xlat1.x, -1.0);
        u_xlat5.xy = fma(u_xlat1.zw, u_xlat1.xx, u_xlat5.zw);
    }
    u_xlat5.xy = u_xlat5.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat5.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_1.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = fma(u_xlat16_4.zxy, u_xlat16_8.zxy, u_xlat16_5.xyz);
    u_xlat16_1.xyz = fma(u_xlat16_1.zxy, u_xlat16_3.zxy, u_xlat16_4.xyz);
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0h, 1.0h);
    u_xlat16_24 = dot(u_xlat16_2.xyz, half3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-float(u_xlat16_24)), 1.0);
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), float3(u_xlat16_0.xyz));
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float3 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = half3(u_xlat16_2) * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat2.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float3 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = half3(u_xlat16_2) * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat2.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float3 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = half3(u_xlat16_2) * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat2.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat2.xyz = u_xlat2.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat2.xyz = u_xlat2.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat2.xyz = u_xlat2.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = half3(u_xlat16_2) * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = half3(u_xlat16_2) * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = half3(u_xlat16_2) * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat2.xyz = u_xlat2.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat2.xyz = u_xlat2.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.zxy, float3(u_xlat16_0.zxy));
    }
    u_xlat2.xyz = u_xlat2.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = half3(u_xlat16_2) * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = half3(u_xlat16_2) * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Vignette_Mask [[ sampler (3) ]],
    sampler sampler_GrainTex [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(3) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = half3(u_xlat16_2) * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (2) ]],
    sampler sampler_Lut2D [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(2) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = half3(u_xlat16_2) * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = half3(u_xlat16_2) * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Vignette_Mask [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = half3(u_xlat16_2) * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (3) ]],
    sampler sampler_Lut2D [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(3) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlatb10 = u_xlat10<(-u_xlat10);
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = float4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(float3(u_xlat16_0.xyz), u_xlat1.xyz, (-float3(u_xlat16_0.xyz)));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, float3(u_xlat16_0.xyz));
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = fma(u_xlat2, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, float2(u_xlat2), u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = fma(u_xlat2, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, float2(u_xlat2), u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = fma(u_xlat2, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, float2(u_xlat2), u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = fma(u_xlat2, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, float2(u_xlat2), u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = fma(u_xlat16_0.zxy, u_xlat16_10.zxy, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_5.zxy, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = fma(u_xlat2, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, float2(u_xlat2), u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = fma(u_xlat16_0.zxy, u_xlat16_10.zxy, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_5.zxy, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = fma(u_xlat2, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, float2(u_xlat2), u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = fma(u_xlat16_0.zxy, u_xlat16_10.zxy, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_5.zxy, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = fma(u_xlat2, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, float2(u_xlat2), u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = fma(u_xlat2, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, float2(u_xlat2), u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = fma(u_xlat2, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, float2(u_xlat2), u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = fma(u_xlat2, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, float2(u_xlat2), u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = fma(u_xlat16_0.zxy, u_xlat16_10.zxy, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_5.zxy, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = fma(u_xlat2, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, float2(u_xlat2), u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = fma(u_xlat16_0.zxy, u_xlat16_10.zxy, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_5.zxy, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = fma(u_xlat2, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, float2(u_xlat2), u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = fma(u_xlat16_0.zxy, u_xlat16_10.zxy, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_5.zxy, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), u_xlat0.xyz);
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), u_xlat0.xyz);
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_GrainTex [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), u_xlat0.xyz);
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = fma(u_xlat16_0.zxy, u_xlat16_10.zxy, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_5.zxy, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = fma(u_xlat16_0.zxy, u_xlat16_10.zxy, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_5.zxy, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = fma(u_xlat16_0.zxy, u_xlat16_10.zxy, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_5.zxy, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), u_xlat0.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = fma(u_xlat16_0.zxy, u_xlat16_10.zxy, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_5.zxy, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = fma(u_xlat16_0.zxy, u_xlat16_10.zxy, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_5.zxy, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = fma(u_xlat16_0.zxy, u_xlat16_10.zxy, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.zxy, u_xlat16_5.zxy, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_1.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat1.xyz = float3(u_xlat16_1.zxy) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat3.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.zxy;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat3.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_1.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat2.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat1.xyz = u_xlat0.xyz * float3(u_xlat16_1.zxy);
    u_xlat1.xyz = u_xlat1.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(u_xlat24), u_xlat0.xyz);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float3 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat2.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float3 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat2.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    bool u_xlatb0;
    float3 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlatb0 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat2.xyz;
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat0.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat2.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.zxy, u_xlat0.zxy);
    }
    u_xlat2.xyz = u_xlat2.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.zxy, u_xlat0.zxy);
    }
    u_xlat2.xyz = u_xlat2.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.zxy, u_xlat0.zxy);
    }
    u_xlat2.xyz = u_xlat2.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_Vignette_Mask [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.zxy, u_xlat0.zxy);
    }
    u_xlat2.xyz = u_xlat2.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_Vignette_Mask [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.zxy, u_xlat0.zxy);
    }
    u_xlat2.xyz = u_xlat2.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_Vignette_Mask [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.zxy, u_xlat0.zxy);
    }
    u_xlat2.xyz = u_xlat2.xyz;
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Vignette_Mask [[ sampler (5) ]],
    sampler sampler_GrainTex [[ sampler (6) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(5) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
    float _LumaInAlpha;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_AutoExposureTex [[ sampler (1) ]],
    sampler sampler_BloomTex [[ sampler (2) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (3) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (4) ]],
    sampler sampler_Lut2D [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(4) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlatb24 = 0.5<FGlobals._LumaInAlpha;
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, float3(1.0, 1.0, 1.0));
        output.SV_Target0.w = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        output.SV_Target0.w = 1.0;
    }
    output.SV_Target0.xyz = abs(u_xlat0.xyz);
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Vignette_Mask [[ sampler (6) ]],
    sampler sampler_GrainTex [[ sampler (7) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(6) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2 = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.xyz) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1 = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1 = clamp(u_xlat16_1, 0.0h, 1.0h);
    u_xlat16_1 = fma(u_xlat16_1, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_Vignette_Mask [[ sampler (7) ]],
    sampler sampler_GrainTex [[ sampler (8) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(7) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_Vignette_Mask [[ sampler (7) ]],
    sampler sampler_GrainTex [[ sampler (8) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(7) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
SubProgram "metal hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _ScreenParams;
    float _RenderViewportScaleFactor;
    float4 _Distortion_Amount;
    float4 _Distortion_CenterScale;
    float4 _Dithering_Coords;
    float4 _BloomTex_TexelSize;
    float4 _Bloom_DirtTileOffset;
    float3 _Bloom_Settings;
    float3 _Bloom_Color;
    float _ChromaticAberration_Amount;
    float3 _Lut2D_Params;
    float3 _Vignette_Color;
    float2 _Vignette_Center;
    float4 _Vignette_Settings;
    float _Vignette_Opacity;
    float _Vignette_Mode;
    float2 _Grain_Params1;
    float4 _Grain_Params2;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_DitheringTex [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_AutoExposureTex [[ sampler (2) ]],
    sampler sampler_BloomTex [[ sampler (3) ]],
    sampler sampler_Bloom_DirtTex [[ sampler (4) ]],
    sampler sampler_ChromaticAberration_SpectralLut [[ sampler (5) ]],
    sampler sampler_Lut2D [[ sampler (6) ]],
    sampler sampler_Vignette_Mask [[ sampler (7) ]],
    sampler sampler_GrainTex [[ sampler (8) ]],
    texture2d<half, access::sample > _DitheringTex [[ texture(0) ]] ,
    texture2d<half, access::sample > _MainTex [[ texture(1) ]] ,
    texture2d<half, access::sample > _AutoExposureTex [[ texture(2) ]] ,
    texture2d<half, access::sample > _BloomTex [[ texture(3) ]] ,
    texture2d<half, access::sample > _Bloom_DirtTex [[ texture(4) ]] ,
    texture2d<half, access::sample > _ChromaticAberration_SpectralLut [[ texture(5) ]] ,
    texture2d<half, access::sample > _Lut2D [[ texture(6) ]] ,
    texture2d<half, access::sample > _Vignette_Mask [[ texture(7) ]] ,
    texture2d<half, access::sample > _GrainTex [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float4 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float2 u_xlat7;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float3 u_xlat8;
    half3 u_xlat16_8;
    float u_xlat9;
    bool u_xlatb9;
    float3 u_xlat10;
    half3 u_xlat16_10;
    bool u_xlatb10;
    float u_xlat11;
    bool u_xlatb11;
    float2 u_xlat16;
    float2 u_xlat17;
    float u_xlat18;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    half u_xlat16_24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb31;
    u_xlat0.xy = input.TEXCOORD0.xy + float2(-0.5, -0.5);
    u_xlat16.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, float2(0.5, 0.5));
    u_xlat0.xy = fma(u_xlat0.xy, FGlobals._Distortion_Amount.zz, (-FGlobals._Distortion_CenterScale.xy));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb9 = 0.0<FGlobals._Distortion_Amount.w;
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = fma(u_xlat17.x, u_xlat25, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat17.xx, u_xlat16.xy);
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * FGlobals._Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = fma(u_xlat26, 0.0208350997, -0.0851330012);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, 0.180141002);
        u_xlat3.x = fma(u_xlat26, u_xlat3.x, -0.330299497);
        u_xlat26 = fma(u_xlat26, u_xlat3.x, 0.999866009);
        u_xlat3.x = u_xlat26 * u_xlat18;
        u_xlatb11 = 1.0<abs(u_xlat10.x);
        u_xlat3.x = fma(u_xlat3.x, -2.0, 1.57079637);
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = fma(u_xlat18, u_xlat26, u_xlat3.x);
        u_xlat10.x = min(u_xlat10.x, 1.0);
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = fma(u_xlat2.x, u_xlat10.x, -1.0);
        u_xlat17.xy = fma(u_xlat0.xy, u_xlat2.xx, u_xlat16.xy);
    }
    u_xlat16_2.x = _AutoExposureTex.sample(sampler_AutoExposureTex, input.TEXCOORD0.xy).x;
    u_xlat3 = fma(input.TEXCOORD0.xyxy, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * float4(FGlobals._ChromaticAberration_Amount);
    u_xlat16_10.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.166666672, 0.0), level(0.0)).xyz;
    u_xlat16_4.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.5, 0.0), level(0.0)).xyz;
    u_xlat16_5.xyz = _ChromaticAberration_SpectralLut.sample(sampler_ChromaticAberration_SpectralLut, float2(0.833333313, 0.0), level(0.0)).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * FGlobals._Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = fma(u_xlat28, u_xlat29, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, float2(u_xlat28), u_xlat16.xy);
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * FGlobals._Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = fma(u_xlat22, 0.0208350997, -0.0851330012);
        u_xlat30 = fma(u_xlat22, u_xlat30, 0.180141002);
        u_xlat30 = fma(u_xlat22, u_xlat30, -0.330299497);
        u_xlat22 = fma(u_xlat22, u_xlat30, 0.999866009);
        u_xlat30 = u_xlat29 * u_xlat22;
        u_xlatb7 = 1.0<abs(u_xlat1.x);
        u_xlat30 = fma(u_xlat30, -2.0, 1.57079637);
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = fma(u_xlat29, u_xlat22, u_xlat30);
        u_xlat1.x = min(u_xlat1.x, 1.0);
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = fma(u_xlat28, u_xlat1.x, -1.0);
        u_xlat6.xy = fma(u_xlat0.xy, u_xlat1.xx, u_xlat16.xy);
    }
    u_xlat6.xy = u_xlat6.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0f, 1.0f);
    u_xlat0.xy = u_xlat6.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, u_xlat0.xy, level(0.0)).xyz;
    u_xlat3 = fma(u_xlat3, float4(-0.333333343, -0.333333343, -0.666666687, -0.666666687), input.TEXCOORD0.xyxy);
    u_xlat3 = u_xlat3 + float4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, float4(0.5, 0.5, 0.5, 0.5));
    u_xlat3 = fma(u_xlat3, FGlobals._Distortion_Amount.zzzz, (-FGlobals._Distortion_CenterScale.xyxy));
    u_xlat3 = u_xlat3 * FGlobals._Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat28, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, u_xlat1.xx, u_xlat6.xy);
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = fma(u_xlat29, 0.0208350997, -0.0851330012);
        u_xlat23 = fma(u_xlat29, u_xlat23, 0.180141002);
        u_xlat23 = fma(u_xlat29, u_xlat23, -0.330299497);
        u_xlat29 = fma(u_xlat29, u_xlat23, 0.999866009);
        u_xlat23 = u_xlat28 * u_xlat29;
        u_xlatb31 = 1.0<abs(u_xlat24);
        u_xlat23 = fma(u_xlat23, -2.0, 1.57079637);
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = fma(u_xlat28, u_xlat29, u_xlat23);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = fma(u_xlat1.x, u_xlat24, -1.0);
        u_xlat7.xy = fma(u_xlat3.xy, float2(u_xlat24), u_xlat6.xy);
    }
    u_xlat7.xy = u_xlat7.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0f, 1.0f);
    u_xlat3.xy = u_xlat7.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, u_xlat3.xy, level(0.0)).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = float2(u_xlat24) * FGlobals._Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = fma(u_xlat1.x, u_xlat9, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, u_xlat1.xx, u_xlat6.zw);
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * FGlobals._Distortion_Amount.x;
        u_xlat24 = u_xlat24 * FGlobals._Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = fma(u_xlat28, 0.0208350997, -0.0851330012);
        u_xlat29 = fma(u_xlat28, u_xlat29, 0.180141002);
        u_xlat29 = fma(u_xlat28, u_xlat29, -0.330299497);
        u_xlat28 = fma(u_xlat28, u_xlat29, 0.999866009);
        u_xlat29 = u_xlat11 * u_xlat28;
        u_xlatb6 = 1.0<abs(u_xlat24);
        u_xlat29 = fma(u_xlat29, -2.0, 1.57079637);
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = fma(u_xlat11, u_xlat28, u_xlat29);
        u_xlat24 = min(u_xlat24, 1.0);
        u_xlatb24 = u_xlat24<(-u_xlat24);
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = fma(u_xlat3.x, u_xlat24, -1.0);
        u_xlat1.xy = fma(u_xlat3.zw, float2(u_xlat24), u_xlat6.zw);
    }
    u_xlat1.xy = u_xlat1.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0f, 1.0f);
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._RenderViewportScaleFactor);
    u_xlat16_3.xyz = _MainTex.sample(sampler_MainTex, u_xlat1.xy, level(0.0)).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = fma(u_xlat16_0.xyz, u_xlat16_10.xyz, u_xlat16_6.xyz);
    u_xlat16_0.xyz = fma(u_xlat16_3.xyz, u_xlat16_5.xyz, u_xlat16_0.xyz);
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = FGlobals._BloomTex_TexelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = FGlobals._Bloom_Settings.xyzx.x * 0.5;
    u_xlat4 = fma(u_xlat3.xyzy, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat4 = clamp(u_xlat4, 0.0f, 1.0f);
    u_xlat4 = u_xlat4 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_10.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = fma(u_xlat3.xwzw, float4(u_xlat24), u_xlat17.xyxy);
    u_xlat3 = clamp(u_xlat3, 0.0f, 1.0f);
    u_xlat3 = u_xlat3 * float4(FGlobals._RenderViewportScaleFactor);
    u_xlat16_4.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = _BloomTex.sample(sampler_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = float3(u_xlat16_10.xyz) * FGlobals._Bloom_Settings.xyzx.yyy;
    u_xlat1.xy = fma(u_xlat17.xy, FGlobals._Bloom_DirtTileOffset.xy, FGlobals._Bloom_DirtTileOffset.zw);
    u_xlat16_3.xyz = _Bloom_DirtTex.sample(sampler_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * float3(0.25, 0.25, 0.25);
    u_xlat3.xyz = float3(u_xlat16_3.xyz) * FGlobals._Bloom_Settings.xyzx.zzz;
    u_xlat4.xyz = u_xlat10.xyz * FGlobals._Bloom_Color.xyzx.xyz;
    u_xlat0.xyz = fma(float3(u_xlat16_0.xyz), float3(u_xlat16_2.xxx), u_xlat4.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat10.xyz, u_xlat0.xyz);
    u_xlatb24 = FGlobals._Vignette_Mode<0.5;
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-FGlobals._Vignette_Center.xyxx.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * FGlobals._Vignette_Settings.xx;
        u_xlat24 = FGlobals._ScreenParams.x / FGlobals._ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = fma(FGlobals._Vignette_Settings.w, u_xlat24, 1.0);
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0f, 1.0f);
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * FGlobals._Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * FGlobals._Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat2.xyz = fma(float3(u_xlat24), u_xlat2.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = _Vignette_Mask.sample(sampler_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-FGlobals._Vignette_Color.xyzx.xyz) + float3(1.0, 1.0, 1.0);
        u_xlat1.xyz = fma(float3(u_xlat16_24), u_xlat1.xyz, FGlobals._Vignette_Color.xyzx.xyz);
        u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, (-u_xlat0.xyz));
        u_xlat2.xyz = fma(float3(FGlobals._Vignette_Opacity), u_xlat1.xyz, u_xlat0.xyz);
    }
    u_xlat0.xy = fma(input.TEXCOORD1.xy, FGlobals._Grain_Params2.xy, FGlobals._Grain_Params2.zw);
    u_xlat16_0.xyz = _GrainTex.sample(sampler_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0f, 1.0f);
    u_xlat24 = dot(u_xlat1.xyz, float3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = fma(FGlobals._Grain_Params1.xxxy.z, (-u_xlat24), 1.0);
    u_xlat0.xyz = float3(u_xlat16_0.zxy) * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Grain_Params1.xxxy.www;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.zxy);
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0f, 1.0f);
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * FGlobals._Lut2D_Params.xyzx.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = FGlobals._Lut2D_Params.xyzx.xy * float2(0.5, 0.5);
    u_xlat1.yz = fma(u_xlat8.yz, FGlobals._Lut2D_Params.xyzx.xy, u_xlat1.xy);
    u_xlat1.x = fma(u_xlat8.x, FGlobals._Lut2D_Params.xyzx.y, u_xlat1.y);
    u_xlat16_2.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = FGlobals._Lut2D_Params.xyzx.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = _Lut2D.sample(sampler_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = fma(u_xlat0.x, FGlobals._Lut2D_Params.xyzx.z, (-u_xlat8.x));
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xxx, float3(u_xlat16_8.xyz), float3(u_xlat16_2.xyz));
    u_xlat1.xy = fma(input.TEXCOORD0.xy, FGlobals._Dithering_Coords.xy, FGlobals._Dithering_Coords.zw);
    u_xlat16_24 = _DitheringTex.sample(sampler_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = fma(u_xlat16_24, half(2.0), half(-1.0));
    u_xlat16_1.x = half(fma(float(u_xlat16_24), 3.40282347e+38, 0.5));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.x = fma(u_xlat16_1.x, half(2.0), half(-1.0));
    u_xlat16_24 = -abs(u_xlat16_24) + half(1.0);
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    output.SV_Target0.xyz = fma(float3(u_xlat16_24), float3(0.00392156886, 0.00392156886, 0.00392156886), abs(u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    return output;
}
"
}
}
}
}
}